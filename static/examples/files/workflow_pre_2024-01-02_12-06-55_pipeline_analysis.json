{
  "version": {
    "workflow": 1,
    "nipype": "1.8.6"
  },
  "meta": {
    "pipeline_name": "pipeline_analysis",
    "stage": "pre",
    "time": "2024-01-02T12:06:55.699414-05:00"
  },
  "workflow": {
    "name": "cpac_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
    "type": "workflow",
    "inputs": {
      "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'subject': 'sub-NDARINV2VY7YYNW'}, 'check_func_scan': {'func_scan_dct': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}, 'selectrest': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}, 'outputspec': {'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}, 'select_scan_params': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}, 's3_scan_params': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}}",
      "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'function_str': 'def get_scan_params(subject_id, scan, pipeconfig_start_indx,\\n                    pipeconfig_stop_indx, data_config_scan_params=None):\\n    \"\"\"\\n    Method to extract slice timing correction parameters\\n    and scan parameters.\\n\\n    Parameters\\n    ----------\\n    subject_id : str\\n        subject id\\n    scan : str\\n        scan id\\n    pipeconfig_start_indx : int\\n        starting volume index as provided in the pipeline config yaml file\\n    pipeconfig_stop_indx : int\\n        ending volume index as provided in the pipeline config yaml file\\n    data_config_scan_params : str\\n        file path to scan parameter JSON file listed in data config yaml file\\n\\n    Returns\\n    -------\\n    TR : a string\\n        TR value\\n    pattern : a string\\n        slice aquisition pattern string or file path\\n    ref_slice : an integer\\n        reference slice which is used to allign all other slices\\n    first_tr : an integer\\n        starting TR or starting volume index\\n    last_tr : an integer\\n        ending TR or ending volume index\\n    pe_direction : str\\n    effective_echo_spacing : float\\n    \"\"\"\\n\\n    import os\\n    import json\\n    import warnings\\n\\n    check2 = lambda val: val if val == None or val == \\'\\' or \\\\\\n                                isinstance(val, str) else int(val)\\n\\n    # initialize vars to empty\\n    TR = \\'\\'\\n    TE = None\\n    pattern = \\'\\'\\n    ref_slice = \\'\\'\\n    first_tr = \\'\\'\\n    last_tr = \\'\\'\\n    unit = \\'s\\'\\n    pe_direction = \\'\\'\\n    effective_echo_spacing = None\\n    template = None\\n\\n    if isinstance(pipeconfig_stop_indx, str):\\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\\n            pipeconfig_stop_indx = None\\n    if data_config_scan_params:\\n        if \".json\" in data_config_scan_params:\\n            if not os.path.exists(data_config_scan_params):\\n                err = \"\\\\n[!] WARNING: Scan parameters JSON file listed in \" \\\\\\n                      \"your data configuration file does not exist:\\\\n{0}\" \\\\\\n                      \"\\\\n\\\\n\".format(data_config_scan_params)\\n                raise Exception(err)\\n\\n            with open(data_config_scan_params, \"r\") as f:\\n                params_dct = json.load(f)\\n\\n            # get details from the configuration\\n            # if this is a JSON file, the key values are the BIDS format\\n            # standard\\n            # TODO: better handling of errant key values!!!\\n            if \"RepetitionTime\" in params_dct.keys():\\n                TR = float(check(params_dct, subject_id, scan,\\n                                 \"RepetitionTime\", False))\\n            if \"SliceTiming\" in params_dct.keys():\\n                pattern = str(check(params_dct, subject_id, scan,\\n                                    \"SliceTiming\", False))\\n            elif \"SliceAcquisitionOrder\" in params_dct.keys():\\n                pattern = str(check(params_dct, subject_id, scan,\\n                                    \"SliceAcquisitionOrder\", False))\\n            if \"PhaseEncodingDirection\" in params_dct.keys():\\n                pe_direction = str(check(params_dct, subject_id, scan,\\n                                         \"PhaseEncodingDirection\", False))\\n            try:\\n                \"EffectiveEchoSpacing\" in params_dct.keys()\\n                effective_echo_spacing = float(\\n                        check(params_dct, subject_id, scan,\\n                            \"EffectiveEchoSpacing\", False))\\n            except TypeError:\\n                pass\\n\\n        elif len(data_config_scan_params) > 0 and \\\\\\n                isinstance(data_config_scan_params, dict):\\n\\n            params_dct = data_config_scan_params\\n\\n            # TODO: better handling of errant key values!!!\\n            # TODO: use schema validator to deal with it\\n            # get details from the configuration\\n            try: \\n                TR = float(\\n                    try_fetch_parameter(\\n                        params_dct,\\n                        subject_id,\\n                        scan,\\n                        [\\'TR\\', \\'RepetitionTime\\']\\n                    )\\n                )\\n            except TypeError:\\n                TR = None\\n\\n            try: \\n                template = str(\\n                    try_fetch_parameter(\\n                        params_dct,\\n                        subject_id,\\n                        scan,\\n                        [\\'Template\\', \\'template\\']\\n                    )\\n                )\\n            except TypeError:\\n                template = None\\n\\n            pattern = str(\\n                try_fetch_parameter(\\n                    params_dct,\\n                    subject_id,\\n                    scan,\\n                    [\\'acquisition\\', \\'SliceTiming\\', \\'SliceAcquisitionOrder\\']\\n                )\\n            )\\n\\n            ref_slice = check(params_dct, subject_id, scan, \\'reference\\',\\n                              False)\\n            if ref_slice:\\n                ref_slice = int(ref_slice)\\n\\n            first_tr = check(params_dct, subject_id, scan, \\'first_TR\\', False)\\n            if first_tr:\\n                first_tr = check2(first_tr)\\n\\n            last_tr = check(params_dct, subject_id, scan, \\'last_TR\\', False)\\n            if last_tr:\\n                last_tr = check2(last_tr)\\n\\n            pe_direction = check(params_dct, subject_id, scan,\\n                                 \\'PhaseEncodingDirection\\', False)\\n            try:\\n                effective_echo_spacing = float(\\n                try_fetch_parameter(params_dct, subject_id, scan,\\n                                    [\"EffectiveEchoSpacing\"]))\\n            except TypeError:\\n                pass\\n\\n        else:\\n            err = \"\\\\n\\\\n[!] Could not read the format of the scan parameters \" \\\\\\n                  \"information included in the data configuration file for \" \\\\\\n                  f\"the participant {subject_id}.\\\\n\\\\n\"\\n            raise Exception(err)\\n    if first_tr == \\'\\' or first_tr is None:\\n        first_tr = pipeconfig_start_indx\\n\\n    if last_tr == \\'\\' or last_tr is None:\\n        last_tr = pipeconfig_stop_indx\\n\\n    unit = \\'s\\'\\n\\n    if \\'None\\' in pattern or \\'none\\' in pattern:\\n        pattern = None\\n\\n    \\'\\'\\'\\n    if not pattern:\\n        if pipeconfig_tpattern:\\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\\n                pattern = \\'\\'\\n            else:\\n                pattern = pipeconfig_tpattern\\n    \\'\\'\\'\\n\\n    # pattern can be one of a few keywords, a filename, or blank which\\n    # indicates that the images header information should be used\\n    tpattern_file = None\\n\\n    valid_patterns = [\\'alt+z\\', \\'altplus\\', \\'alt+z2\\', \\'alt-z\\', \\'altminus\\',\\n                      \\'alt-z2\\', \\'seq+z\\', \\'seqplus\\', \\'seq-z\\', \\'seqminus\\']\\n    if pattern and pattern != \\'\\' and pattern not in valid_patterns:\\n\\n        if isinstance(pattern, list) or \\\\\\n                (\"[\" in pattern and \"]\" in pattern and \",\" in pattern):\\n            # if we got the slice timing as a list, from a BIDS-format scan\\n            # parameters JSON file\\n\\n            if not isinstance(pattern, list):\\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\\n\\n            slice_timings = [float(x) for x in pattern]\\n\\n            # write out a tpattern file for AFNI 3dTShift\\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\\n            try:\\n                with open(tpattern_file, \"wt\") as f:\\n                    for time in slice_timings:\\n                        f.write(\"{0}\\\\n\".format(time).replace(\" \", \"\"))\\n            except:\\n                err = \"\\\\n[!] Could not write the slice timing file meant as \" \\\\\\n                      \"an input for AFNI 3dTshift (slice timing correction):\" \\\\\\n                      \"\\\\n{0}\\\\n\\\\n\".format(tpattern_file)\\n                raise Exception(err)\\n\\n        elif \".txt\" in pattern and not os.path.exists(pattern):\\n            # if the user provided an acquisition pattern text file for\\n            # 3dTshift\\n            raise Exception(\"Invalid Pattern file path {0}, Please provide \"\\n                            \"the correct path\".format(pattern))\\n        elif \".txt\" in pattern:\\n            with open(pattern, \"r\") as f:\\n                lines = f.readlines()\\n            if len(lines) < 2:\\n                raise Exception(\\'Invalid slice timing file format. The file \\'\\n                                \\'should contain only one value per row. Use \\'\\n                                \\'new line char as delimiter\\')\\n            tpattern_file = pattern\\n            slice_timings = [float(l.rstrip(\\'\\\\r\\\\n\\')) for l in lines]\\n        else:\\n            # this only happens if there is a non-path string set in the data\\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\\n            # the pattern is not listed in that list\\n            err = \"\\\\n[!] The slice timing acquisition pattern provided is \" \\\\\\n                  \"not supported by AFNI 3dTshift:\\\\n\" \\\\\\n                  \"{0}\\\\n\".format(str(pattern))\\n            raise Exception(err)\\n\\n        pattern = tpattern_file\\n\\n        slice_timings.sort()\\n        max_slice_offset = slice_timings[-1]\\n\\n        # checking if the unit of TR and slice timing match or not\\n        # if slice timing in ms convert TR to ms as well\\n        if TR and max_slice_offset > TR:\\n            warnings.warn(\"TR is in seconds and slice timings are in \"\\n                          \"milliseconds. Converting TR into milliseconds\")\\n            TR = TR * 1000\\n            print(\"New TR value {0} ms\".format(TR))\\n            unit = \\'ms\\'\\n\\n    else:\\n        # check to see, if TR is in milliseconds, convert it into seconds\\n        if TR and TR > 10:\\n            warnings.warn(\\'TR is in milliseconds, Converting it into seconds\\')\\n            TR = TR / 1000.0\\n            print(\"New TR value {0} s\".format(TR))\\n            unit = \\'s\\'\\n\\n    # swap back in\\n    if TR:\\n        tr = \"{0}{1}\".format(str(TR), unit)\\n    else:\\n        tr = \"\"\\n\\n    tpattern = pattern\\n    start_indx = first_tr\\n    stop_indx = last_tr\\n\\n    return (tr if tr else None,\\n            tpattern if tpattern else None,\\n            template if template else None,\\n            ref_slice,\\n            start_indx,\\n            stop_indx,\\n            pe_direction,\\n            effective_echo_spacing)\\n', 'pipeconfig_start_indx': 0, 'pipeconfig_stop_indx': None, 'pipeconfig_tpattern': '[Undefined]', 'pipeconfig_tr': '[Undefined]', 'subject_id': 'sub-NDARINV2VY7YYNW'}",
      "func_deoblique_2": "{'args': '[Undefined]', 'atrcopy': '[Undefined]', 'atrfloat': '[Undefined]', 'atrint': '[Undefined]', 'atrstring': '[Undefined]', 'deoblique': True, 'duporigin_file': '[Undefined]', 'environ': {}, 'nosaveatr': '[Undefined]', 'saveatr': '[Undefined]', 'space': '[Undefined]', 'xdel': '[Undefined]', 'xorigin': '[Undefined]', 'xyzscale': '[Undefined]', 'ydel': '[Undefined]', 'yorigin': '[Undefined]', 'zdel': '[Undefined]', 'zorigin': '[Undefined]'}",
      "func_reorient_2": "{'args': '[Undefined]', 'environ': {}, 'master': '[Undefined]', 'num_threads': 1, 'orientation': 'RPI', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': '[Undefined]', 'voxel_size': '[Undefined]'}",
      "edit_func_44": "{'inputspec': {'func': '[Undefined]', 'start_idx': 0, 'stop_idx': None}, 'func_get_idx': {'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"\\n    Method to get the first and the last slice for\\n    the functional run. It verifies the user specified\\n    first and last slice. If the values are not valid, it\\n    calculates and returns the very first and the last slice\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:\\n        raise TypeError(\\'Input nifti file: %s is not a 4D file\\' % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx == None) or (int(start_idx) < 0) or (\\n        int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}, 'func_drop_trs': {'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}, 'outputspec': {}}",
      "func_mean_46": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_get_mean_RPI_48": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_motion_correct_mcflirt_51": "{'args': '[Undefined]', 'bins': '[Undefined]', 'cost': '[Undefined]', 'dof': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'init': '[Undefined]', 'interpolation': '[Undefined]', 'mean_vol': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'ref_vol': '[Undefined]', 'rotation': '[Undefined]', 'save_mats': True, 'save_plots': True, 'save_rms': True, 'scaling': '[Undefined]', 'smooth': '[Undefined]', 'stages': '[Undefined]', 'stats_imgs': '[Undefined]', 'use_contour': '[Undefined]', 'use_gradient': '[Undefined]'}",
      "norm_motion_params_51": "{'function_str': 'def normalize_motion_parameters(in_file):\\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\\n    import os\\n    import numpy as np\\n\\n    motion_params = np.genfromtxt(in_file).T\\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\\n                               motion_params[0, :] * 180 / np.pi,\\n                               -motion_params[1, :] * 180 / np.pi,\\n                               motion_params[5, :],\\n                               motion_params[3, :],\\n                               -motion_params[4, :]))\\n    motion_params = np.transpose(motion_params)\\n\\n    out_file = os.path.join(os.getcwd(), \\'motion_params.tsv\\')\\n    np.savetxt(out_file, motion_params)\\n\\n    return out_file\\n'}",
      "get_mcflirt_rms_abs_51": "{'function_str': \"def get_mcflirt_rms_abs(rms_files):\\n    for path in rms_files:\\n        if 'abs.rms' in path:\\n            abs_file = path\\n        if 'rel.rms' in path:\\n            rels_file = path\\n    return abs_file, rels_file\\n\"}",
      "BET_options_53": "{'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}",
      "func_get_brain_mask_BET_53": "{'args': '[Undefined]', 'center': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'functional': '[Undefined]', 'mask': True, 'no_output': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 't2_guided': '[Undefined]'}",
      "func_mean_skull_53": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_mean_skull_thr_value_53": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'index_mask_file': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-p 98.000000 ', 'output_type': 'NIFTI_GZ', 'split_4d': '[Undefined]'}",
      "form_thr_string_53": "{'function_str': \"def form_thr_string(thr):\\n    threshold_z = str(float(thr/10))\\n    return '-thr %s' % (threshold_z)\\n\"}",
      "func_mean_skull_thr_53": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
      "func_mean_skull_fast_53": "{'args': '[Undefined]', 'bias_iters': '[Undefined]', 'bias_lowpass': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'hyper': '[Undefined]', 'img_type': '[Undefined]', 'init_seg_smooth': '[Undefined]', 'init_transform': '[Undefined]', 'iters_afterbias': '[Undefined]', 'manual_seg': '[Undefined]', 'mixel_smooth': '[Undefined]', 'no_bias': '[Undefined]', 'no_pve': True, 'number_classes': '[Undefined]', 'other_priors': '[Undefined]', 'out_basename': '[Undefined]', 'output_biascorrected': True, 'output_biasfield': '[Undefined]', 'output_type': 'NIFTI_GZ', 'probability_maps': '[Undefined]', 'segment_iters': '[Undefined]', 'segments': '[Undefined]', 'use_priors': '[Undefined]', 'verbose': '[Undefined]'}",
      "erode_one_voxel_53": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'kernel_file': '[Undefined]', 'kernel_shape': 'box', 'kernel_size': 1.0, 'minimum_filter': False, 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "func_extract_brain_61": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
      "gen_motion_stats_65": "{'inputspec': {'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}, 'cal_DVARS': {'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}, 'cal_DVARS_strip': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}, 'outputspec': {}, 'calculate_FD': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}, 'calculate_FDJ': {'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}, 'get_all_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}, 'calc_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}, 'calc_power_parameters': {'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}}",
      "func_normalize_63": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-ing 10000', 'out_data_type': 'float', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
      "ANTS_bold_to_EPI-template_83": "{'inputspec': {'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}, 'anat_mni_ants_register': {'inputspec': {'ants_para': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': 1}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}, 'write_composite_linear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'write_composite_invlinear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'inverse_transform_flags': {'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}, 'write_composite_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'write_composite_inv_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-EPItemplate_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'inverse_all_transform_flags': {'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}}",
      "gather_EPI-template": "{'inputnode': {'creds_path': None, 'data': '/cpac_templates/chd8_functional_template_sk.nii', 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}, 'outputspec': {}}",
      "nuisance_regressors_Regressor_1_93": "{'inputspec': {'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}, 'functional_mean': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'VentriclesToAnat_Functional_ants_transforms': {'axis': 'vstack', 'in2': '[Undefined]', 'in3': '[Undefined]', 'no_flatten': False, 'ravel_inputs': False}, 'VentriclesToAnat_Functional_inverse_transform_flags': {'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}, 'VentriclesToAnat_Functional_ants': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'NearestNeighbor', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'CerebrospinalFluid_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'CerebrospinalFluid_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'CerebrospinalFluid_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'GlobalSignal_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'GlobalSignal_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'GlobalSignal_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'build_nuisance_regressors': {'acompcor_file_path': '[Undefined]', 'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}, 'tcompcor_file_path': '[Undefined]', 'white_matter_summary_file_path': '[Undefined]'}, 'outputspec': {}}",
      "gather_lateral-ventricles-mask": "{'inputnode': {'creds_path': None, 'data': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}, 'outputspec': {}}",
      "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "nuisance_regression_space-native_reg-Regressor_1_107": "{'inputspec': {'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}, 'nuisance_regression': {'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}, 'outputspec': {}}",
      "filtering_bold_and_regressors_space-native_reg-Regressor_1_107": "{'inputspec': {'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}, 'tr_string2float': {'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}, 'bandpass_ts': {'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'highpass': 0.01, 'localPV': '[Undefined]', 'lowpass': 0.1, 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'outputspec': {}, 'bandpass_regressor': {'function_str': \"def afni_1dBandpass(in_file, highpass, lowpass, tr=1):\\n    '''\\n    Perform AFNI 1dBandpass\\n    Parameters\\n    ----------\\n    in_file : string\\n        Path of an input 1D file\\n    highpass : float\\n        LowCutoff/HighPass\\n    lowpass : float\\n        HighCutoff/LowPass\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Path of an output 1D file\\n    '''\\n\\n    import os\\n\\n    basename = os.path.basename(in_file)\\n    filename, file_extension = os.path.splitext(basename)\\n    out_file = os.path.join(os.getcwd(), filename + '_bp' + file_extension)\\n\\n    cmd = '1dBandpass -dt %f %f %f %s > %s' % (\\n    tr, highpass, lowpass, in_file, out_file)\\n    os.system(cmd)\\n\\n    return out_file\\n\", 'highpass': 0.01, 'lowpass': 0.1}}",
      "warp_desc-preproc_bold_to_EPItemplate_118": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 3, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'chunk_warp_desc-preproc_bold_to_EPItemplate_118': {'chunk_size': 10, 'function_str': 'def chunk_ts(func_file, n_chunks=None, chunk_size=None):\\n    func_img = nb.load(func_file)\\n    trs = func_img.shape[3]\\n    TR_ranges = []\\n\\n    if n_chunks:\\n        chunk_size = trs/n_chunks\\n    elif chunk_size:\\n        n_chunks = int(trs/chunk_size)\\n    else:\\n        raise Exception(\"\\\\n[!] Dev error: Either \\'n_chunks\\' or \\'chunk_size\\' \"\\n                        \"arguments must be passed to \\'chunk_ts\\' function.\\\\n\")\\n\\n    for chunk_idx in range(0, n_chunks):\\n        if chunk_idx == n_chunks - 1:\\n            TR_ranges.append((int(chunk_idx*chunk_size), int(trs - 1)))\\n        else:\\n            TR_ranges.append((int(chunk_idx*chunk_size), int((chunk_idx+1)*chunk_size - 1)))\\n    return TR_ranges\\n', 'n_chunks': '[Undefined]'}, 'split_warp_desc-preproc_bold_to_EPItemplate_118': {'function_str': 'def split_ts_chunks(func_file, tr_ranges):\\n    if \\'.nii\\' in func_file:\\n        ext = \\'.nii\\'\\n    if \\'.nii.gz\\' in func_file:\\n        ext = \\'.nii.gz\\'\\n\\n    split_funcs = []\\n    for chunk_idx, tr_range in enumerate(tr_ranges):\\n        out_file = os.path.join(os.getcwd(), os.path.basename(func_file).replace(ext, \"_{0}{1}\".format(chunk_idx, ext)))\\n        in_file = \"{0}[{1}..{2}]\".format(func_file, tr_range[0], tr_range[1])\\n\\n        cmd = [\"3dcalc\", \"-a\", in_file, \"-expr\", \"a\", \"-prefix\", out_file]\\n\\n        retcode = subprocess.check_output(cmd)\\n\\n        split_funcs.append(out_file)\\n\\n    return split_funcs\\n'}, 'func_concat_warp_desc-preproc_bold_to_EPItemplate_118': {'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'verbose': '[Undefined]'}, 'outputspec': {}}",
      "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "warp_desc-mean_bold_to_EPItemplate_122": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_desc-mean_bold_to_EPItemplate_122': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'outputspec': {}}",
      "warp_space-bold_desc-brain_mask_to_EPItemplate_126": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'outputspec': {}}",
      "qc_motion_57": "{'inputspec': {'motion_parameters': '[Undefined]'}, 'motion_plot': {'function_str': 'CPAC.qc.utils.gen_motion_plt'}, 'outputspec': {}}",
      "qc_fd_75": "{'inputspec': {'excluded_volumes': '[Undefined]', 'fd': '[Undefined]'}, 'fd_plot': {'function_str': 'CPAC.qc.utils.gen_plot_png', 'measure': 'FD'}, 'outputspec': {}}",
      "id_string_desc-preproc_bold_114": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-preproc_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-preproc_bold_114": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-preproc_bold_114": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-preproc_bold:nuisance_regression_native'], 'SkullStripped': True, 'Sources': ['TR', 'desc-confounds_timeseries', 'space-bold_desc-brain_mask', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars'], 'Description': 'Preprocessed BOLD image that was nuisance-regressed in native space', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-preproc_bold_114": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-mean_bold_47": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-mean_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-mean_bold_47": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-mean_bold_47": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'RawSources': ['bold'], 'CpacProvenance': ['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-mean_bold_47": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-movementParameters_motion_57": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-movementParameters_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-movementParameters_motion_57": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-movementParameters_motion_57": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], 'Sources': ['desc-preproc_bold', 'motion-basefile'], 'Description': \"Each line contains for one timepoint a 6-DOF rigid transform parameters in the format defined by AFNI's 3dvolreg: [roll, pitch, yaw, superior displacement, left displacement, posterior displacement]. Rotation parameters are in degrees counterclockwise, and translation parameters are in millimeters.\", 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-movementParameters_motion_57": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-bold_desc-brain_mask_60": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-bold_desc-brain_mask', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-bold_desc-brain_mask_60": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-bold_desc-brain_mask_60": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-bold_desc-brain_mask_60": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_motion_79": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_motion_79": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_motion_79": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_motion_79": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-summary_motion_80": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-summary_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-summary_motion_80": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-summary_motion_80": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'desc-summary_motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-summary_motion_80": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_sbref_82": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'sbref', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_sbref_82": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_sbref_82": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'RawSources': ['bold'], 'CpacProvenance': ['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], 'Sources': ['desc-mean_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_sbref_82": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-preproc_bold_86": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-preproc_bold', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-preproc_bold_86": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': 1}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
      "json_space-template_desc-preproc_bold_86": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-preproc_bold:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-preproc_bold_86": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-preproc_bold_121": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-preproc_bold', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-preproc_bold_121": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-preproc_bold_121": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-preproc_bold:nuisance_regression_native'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-preproc_bold:transform_timeseries_to_EPItemplate'], 'SkullStripped': True, 'Sources': ['desc-preproc_bold', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-preproc_bold_121": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-EPItemplate_mode-image_xfm_87": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-EPItemplate_mode-image_xfm', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-bold_to-EPItemplate_mode-image_xfm_87": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-EPItemplate_mode-image_xfm_87": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-bold_to-EPItemplate_mode-image_xfm_87": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-confounds_timeseries_117": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-confounds_timeseries', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-confounds_timeseries_117": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-confounds_timeseries_117": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regression_native'], 'Sources': ['TR', 'desc-confounds_timeseries', 'space-bold_desc-brain_mask', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars'], 'Description': 'Regressors that were applied in native space', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-confounds_timeseries_117": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-mean_bold_125": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-mean_bold', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-mean_bold_125": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-mean_bold_125": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-mean_bold:transform_bold_mean_to_EPItemplate'], 'Sources': ['desc-mean_bold', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-mean_bold_125": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-bold_mask_129": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-bold_mask', 'subdir': 'func', 'template_desc': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-bold_mask_129": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-bold_mask_129": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-bold_mask:transform_bold_mask_to_EPItemplate'], 'Sources': ['space-bold_desc-brain_mask', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-bold_mask_129": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-movementParametersTrans_quality_133": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-movementParametersTrans_quality', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-movementParametersTrans_quality_133": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-movementParametersTrans_quality_133": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt', 'desc-movementParametersTrans_quality:qc_motion_plot'], 'Sources': ['desc-movementParameters_motion'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-movementParametersTrans_quality_133": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-movementParametersRot_quality_134": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-movementParametersRot_quality', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-movementParametersRot_quality_134": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-movementParametersRot_quality_134": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt', 'desc-movementParametersRot_quality:qc_motion_plot'], 'Sources': ['desc-movementParameters_motion'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-movementParametersRot_quality_134": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('analysis')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-framewiseDisplacementJenkinsonPlot_quality', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats', 'desc-framewiseDisplacementJenkinsonPlot_quality:qc_fd_plot'], 'Sources': ['framewise-displacement-jenkinson'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': False, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}"
    },
    "outputs": {
      "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}, 'check_func_scan': {}, 'selectrest': {'file_path': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}, 'select_scan_params': {'file_path': None}, 's3_scan_params': {'local_path': None}}",
      "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'effective_echo_spacing': None, 'pe_direction': None, 'ref_slice': None, 'start_indx': None, 'stop_indx': None, 'template': None, 'tpattern': None, 'tr': None}",
      "func_deoblique_2": "{'out_file': None}",
      "func_reorient_2": "{'out_file': None}",
      "edit_func_44": "{'inputspec': {'func': None, 'start_idx': None, 'stop_idx': None}, 'func_get_idx': {'startidx': None, 'stopidx': None}, 'func_drop_trs': {'out_file': None}, 'outputspec': {'edited_func': None}}",
      "func_mean_46": "{'out_file': None}",
      "func_get_mean_RPI_48": "{'out_file': None}",
      "func_motion_correct_mcflirt_51": "{'mat_file': None, 'mean_img': None, 'out_file': None, 'par_file': None, 'rms_files': None, 'std_img': None, 'variance_img': None}",
      "norm_motion_params_51": "{'out_file': None}",
      "get_mcflirt_rms_abs_51": "{'abs_file': None, 'rels_file': None}",
      "BET_options_53": "{'frac': None, 'mesh_boolean': None, 'outline': None, 'padding': None, 'radius': None, 'reduce_bias': None, 'remove_eyes': None, 'robust': None, 'skull': None, 'surfaces': None, 'threshold': None, 'vertical_gradient': None}",
      "func_get_brain_mask_BET_53": "{'inskull_mask_file': None, 'inskull_mesh_file': None, 'mask_file': None, 'meshfile': None, 'out_file': None, 'outline_file': None, 'outskin_mask_file': None, 'outskin_mesh_file': None, 'outskull_mask_file': None, 'outskull_mesh_file': None, 'skull_file': None, 'skull_mask_file': None}",
      "func_mean_skull_53": "{'out_file': None}",
      "func_mean_skull_thr_value_53": "{'out_stat': None}",
      "form_thr_string_53": "{'out_str': None}",
      "func_mean_skull_thr_53": "{'out_file': None}",
      "func_mean_skull_fast_53": "{'bias_field': None, 'mixeltype': None, 'partial_volume_files': None, 'partial_volume_map': None, 'probability_maps': None, 'restored_image': None, 'tissue_class_files': None, 'tissue_class_map': None}",
      "erode_one_voxel_53": "{'out_file': None}",
      "func_extract_brain_61": "{'out_file': None}",
      "gen_motion_stats_65": "{'inputspec': {'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}, 'cal_DVARS': {'out_file': None}, 'cal_DVARS_strip': {'DVARS_val': None, 'out_file': None}, 'outputspec': {'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}, 'calculate_FD': {'fd': None, 'out_file': None}, 'calculate_FDJ': {'fd': None, 'out_file': None}, 'get_all_motion_parameters': {'all_motion_val': None, 'summary_motion_power': None}, 'calc_motion_parameters': {'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}, 'calc_power_parameters': {'info': None, 'out_file': None}}",
      "func_normalize_63": "{'out_file': None}",
      "ANTS_bold_to_EPI-template_83": "{'inputspec': {'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}, 'anat_mni_ants_register': {'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}, 'write_composite_linear_xfm': {'output_image': None}, 'collect_transforms': {'out': None}, 'check_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_invlinear_xfm': {'output_image': None}, 'collect_inv_transforms': {'out': None}, 'check_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_transform_flags': {'inverse_transform_flags': None}, 'write_composite_xfm': {'output_image': None}, 'collect_all_transforms': {'out': None}, 'check_all_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_inv_xfm': {'output_image': None}, 'collect_all_inv_transforms': {'out': None}, 'check_all_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_all_transform_flags': {'inverse_transform_flags': None}}",
      "gather_EPI-template": "{'inputnode': {'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'data': None, 'scan': None, 'unique_id': None}}",
      "nuisance_regressors_Regressor_1_93": "{'inputspec': {'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}, 'functional_mean': {'out_file': None}, 'VentriclesToAnat_Functional_ants_transforms': {'out': None}, 'VentriclesToAnat_Functional_inverse_transform_flags': {'inverse_transform_flags': None}, 'VentriclesToAnat_Functional_ants': {'output_image': None}, 'CerebrospinalFluid_merge_masks': {'out': None}, 'CerebrospinalFluid_union_masks': {'out_file': None}, 'CerebrospinalFluid_mean': {'out_file': None}, 'GlobalSignal_merge_masks': {'out': None}, 'GlobalSignal_union_masks': {'out_file': None}, 'GlobalSignal_mean': {'out_file': None}, 'build_nuisance_regressors': {'censor_indices': None, 'out_file': None}, 'outputspec': {'censor_indices': None, 'regressors_file_path': None}}",
      "gather_lateral-ventricles-mask": "{'inputnode': {'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'data': None, 'scan': None, 'unique_id': None}}",
      "write_composite_invlinear_xfm": "{'output_image': None}",
      "write_composite_linear_xfm": "{'output_image': None}",
      "nuisance_regression_space-native_reg-Regressor_1_107": "{'inputspec': {'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}, 'nuisance_regression': {'out_file': None}, 'outputspec': {'residual_file_path': None}}",
      "filtering_bold_and_regressors_space-native_reg-Regressor_1_107": "{'inputspec': {'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}, 'tr_string2float': {'tr_float': None}, 'bandpass_ts': {'out_file': None}, 'outputspec': {'residual_file_path': None, 'residual_regressor': None}, 'bandpass_regressor': {'out_file': None}}",
      "warp_desc-preproc_bold_to_EPItemplate_118": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'chunk_warp_desc-preproc_bold_to_EPItemplate_118': {'TR_ranges': None}, 'split_warp_desc-preproc_bold_to_EPItemplate_118': {'split_funcs': None}, 'func_concat_warp_desc-preproc_bold_to_EPItemplate_118': {'out_file': None}, 'outputspec': {'output_image': None}}",
      "write_composite_xfm": "{'output_image': None}",
      "warp_desc-mean_bold_to_EPItemplate_122": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_desc-mean_bold_to_EPItemplate_122': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "warp_space-bold_desc-brain_mask_to_EPItemplate_126": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "qc_motion_57": "{'inputspec': {'motion_parameters': None}, 'motion_plot': {'rotation_plot': None, 'translation_plot': None}, 'outputspec': {'motion_rotation_plot': None, 'motion_translation_plot': None}}",
      "qc_fd_75": "{'inputspec': {'excluded_volumes': None, 'fd': None}, 'fd_plot': {'hist_path': None}, 'outputspec': {'fd_histogram_plot': None}}",
      "id_string_desc-preproc_bold_114": "{'out_filename': None}",
      "nii_desc-preproc_bold_114": "{'out_file': None}",
      "json_desc-preproc_bold_114": "{'json_file': None}",
      "sinker_desc-preproc_bold_114": "{'out_file': None}",
      "id_string_desc-mean_bold_47": "{'out_filename': None}",
      "nii_desc-mean_bold_47": "{'out_file': None}",
      "json_desc-mean_bold_47": "{'json_file': None}",
      "sinker_desc-mean_bold_47": "{'out_file': None}",
      "id_string_desc-movementParameters_motion_57": "{'out_filename': None}",
      "nii_desc-movementParameters_motion_57": "{'out_file': None}",
      "json_desc-movementParameters_motion_57": "{'json_file': None}",
      "sinker_desc-movementParameters_motion_57": "{'out_file': None}",
      "id_string_space-bold_desc-brain_mask_60": "{'out_filename': None}",
      "nii_space-bold_desc-brain_mask_60": "{'out_file': None}",
      "json_space-bold_desc-brain_mask_60": "{'json_file': None}",
      "sinker_space-bold_desc-brain_mask_60": "{'out_file': None}",
      "id_string_motion_79": "{'out_filename': None}",
      "nii_motion_79": "{'out_file': None}",
      "json_motion_79": "{'json_file': None}",
      "sinker_motion_79": "{'out_file': None}",
      "id_string_desc-summary_motion_80": "{'out_filename': None}",
      "nii_desc-summary_motion_80": "{'out_file': None}",
      "json_desc-summary_motion_80": "{'json_file': None}",
      "sinker_desc-summary_motion_80": "{'out_file': None}",
      "id_string_sbref_82": "{'out_filename': None}",
      "nii_sbref_82": "{'out_file': None}",
      "json_sbref_82": "{'json_file': None}",
      "sinker_sbref_82": "{'out_file': None}",
      "id_string_space-template_desc-preproc_bold_86": "{'out_filename': None}",
      "nii_space-template_desc-preproc_bold_86": "{'out_file': None}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
      "json_space-template_desc-preproc_bold_86": "{'json_file': None}",
      "sinker_space-template_desc-preproc_bold_86": "{'out_file': None}",
      "id_string_space-template_desc-preproc_bold_121": "{'out_filename': None}",
      "nii_space-template_desc-preproc_bold_121": "{'out_file': None}",
      "json_space-template_desc-preproc_bold_121": "{'json_file': None}",
      "sinker_space-template_desc-preproc_bold_121": "{'out_file': None}",
      "id_string_from-bold_to-EPItemplate_mode-image_xfm_87": "{'out_filename': None}",
      "nii_from-bold_to-EPItemplate_mode-image_xfm_87": "{'out_file': None}",
      "json_from-bold_to-EPItemplate_mode-image_xfm_87": "{'json_file': None}",
      "sinker_from-bold_to-EPItemplate_mode-image_xfm_87": "{'out_file': None}",
      "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'out_filename': None}",
      "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'out_file': None}",
      "json_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'json_file': None}",
      "sinker_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89": "{'out_file': None}",
      "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'out_filename': None}",
      "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'out_file': None}",
      "json_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'json_file': None}",
      "sinker_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90": "{'out_file': None}",
      "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'out_filename': None}",
      "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'out_file': None}",
      "json_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'json_file': None}",
      "sinker_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91": "{'out_file': None}",
      "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'out_filename': None}",
      "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'out_file': None}",
      "json_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'json_file': None}",
      "sinker_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92": "{'out_file': None}",
      "id_string_desc-confounds_timeseries_117": "{'out_filename': None}",
      "nii_desc-confounds_timeseries_117": "{'out_file': None}",
      "json_desc-confounds_timeseries_117": "{'json_file': None}",
      "sinker_desc-confounds_timeseries_117": "{'out_file': None}",
      "id_string_space-template_desc-mean_bold_125": "{'out_filename': None}",
      "nii_space-template_desc-mean_bold_125": "{'out_file': None}",
      "json_space-template_desc-mean_bold_125": "{'json_file': None}",
      "sinker_space-template_desc-mean_bold_125": "{'out_file': None}",
      "id_string_space-template_desc-bold_mask_129": "{'out_filename': None}",
      "nii_space-template_desc-bold_mask_129": "{'out_file': None}",
      "json_space-template_desc-bold_mask_129": "{'json_file': None}",
      "sinker_space-template_desc-bold_mask_129": "{'out_file': None}",
      "id_string_desc-movementParametersTrans_quality_133": "{'out_filename': None}",
      "nii_desc-movementParametersTrans_quality_133": "{'out_file': None}",
      "json_desc-movementParametersTrans_quality_133": "{'json_file': None}",
      "sinker_desc-movementParametersTrans_quality_133": "{'out_file': None}",
      "id_string_desc-movementParametersRot_quality_134": "{'out_filename': None}",
      "nii_desc-movementParametersRot_quality_134": "{'out_file': None}",
      "json_desc-movementParametersRot_quality_134": "{'json_file': None}",
      "sinker_desc-movementParametersRot_quality_134": "{'out_file': None}",
      "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'out_filename': None}",
      "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'out_file': None}",
      "json_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'json_file': None}",
      "sinker_desc-framewiseDisplacementJenkinsonPlot_quality_135": "{'out_file': None}"
    },
    "result": null,
    "nodes": [
      {
        "name": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'subject': 'sub-NDARINV2VY7YYNW'}",
          "check_func_scan": "{'func_scan_dct': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}",
          "selectrest": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}",
          "outputspec": "{'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}",
          "select_scan_params": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}",
          "s3_scan_params": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}",
          "check_func_scan": "{}",
          "selectrest": "{'file_path': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}",
          "select_scan_params": "{'file_path': None}",
          "s3_scan_params": "{'local_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "subject": "sub-NDARINV2VY7YYNW",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis"
            },
            "outputs": {
              "subject": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_func_scan",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_func_scan",
              "func_scan_dct": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "scan": "[Undefined]"
            },
            "outputs": {},
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "selectrest",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "resource": "scan"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "func"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "outputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "resource": "scan_parameters"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "s3_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_func_scan"
          },
          {
            "origin": "inputnode",
            "target": "selectrest"
          },
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "inputnode",
            "target": "select_scan_params"
          },
          {
            "origin": "inputnode",
            "target": "s3_scan_params"
          },
          {
            "origin": "selectrest",
            "target": "check_for_s3"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          },
          {
            "origin": "select_scan_params",
            "target": "s3_scan_params"
          },
          {
            "origin": "s3_scan_params",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "type": "node",
        "inputs": {
          "function_str": "def get_scan_params(subject_id, scan, pipeconfig_start_indx,\n                    pipeconfig_stop_indx, data_config_scan_params=None):\n    \"\"\"\n    Method to extract slice timing correction parameters\n    and scan parameters.\n\n    Parameters\n    ----------\n    subject_id : str\n        subject id\n    scan : str\n        scan id\n    pipeconfig_start_indx : int\n        starting volume index as provided in the pipeline config yaml file\n    pipeconfig_stop_indx : int\n        ending volume index as provided in the pipeline config yaml file\n    data_config_scan_params : str\n        file path to scan parameter JSON file listed in data config yaml file\n\n    Returns\n    -------\n    TR : a string\n        TR value\n    pattern : a string\n        slice aquisition pattern string or file path\n    ref_slice : an integer\n        reference slice which is used to allign all other slices\n    first_tr : an integer\n        starting TR or starting volume index\n    last_tr : an integer\n        ending TR or ending volume index\n    pe_direction : str\n    effective_echo_spacing : float\n    \"\"\"\n\n    import os\n    import json\n    import warnings\n\n    check2 = lambda val: val if val == None or val == '' or \\\n                                isinstance(val, str) else int(val)\n\n    # initialize vars to empty\n    TR = ''\n    TE = None\n    pattern = ''\n    ref_slice = ''\n    first_tr = ''\n    last_tr = ''\n    unit = 's'\n    pe_direction = ''\n    effective_echo_spacing = None\n    template = None\n\n    if isinstance(pipeconfig_stop_indx, str):\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\n            pipeconfig_stop_indx = None\n    if data_config_scan_params:\n        if \".json\" in data_config_scan_params:\n            if not os.path.exists(data_config_scan_params):\n                err = \"\\n[!] WARNING: Scan parameters JSON file listed in \" \\\n                      \"your data configuration file does not exist:\\n{0}\" \\\n                      \"\\n\\n\".format(data_config_scan_params)\n                raise Exception(err)\n\n            with open(data_config_scan_params, \"r\") as f:\n                params_dct = json.load(f)\n\n            # get details from the configuration\n            # if this is a JSON file, the key values are the BIDS format\n            # standard\n            # TODO: better handling of errant key values!!!\n            if \"RepetitionTime\" in params_dct.keys():\n                TR = float(check(params_dct, subject_id, scan,\n                                 \"RepetitionTime\", False))\n            if \"SliceTiming\" in params_dct.keys():\n                pattern = str(check(params_dct, subject_id, scan,\n                                    \"SliceTiming\", False))\n            elif \"SliceAcquisitionOrder\" in params_dct.keys():\n                pattern = str(check(params_dct, subject_id, scan,\n                                    \"SliceAcquisitionOrder\", False))\n            if \"PhaseEncodingDirection\" in params_dct.keys():\n                pe_direction = str(check(params_dct, subject_id, scan,\n                                         \"PhaseEncodingDirection\", False))\n            try:\n                \"EffectiveEchoSpacing\" in params_dct.keys()\n                effective_echo_spacing = float(\n                        check(params_dct, subject_id, scan,\n                            \"EffectiveEchoSpacing\", False))\n            except TypeError:\n                pass\n\n        elif len(data_config_scan_params) > 0 and \\\n                isinstance(data_config_scan_params, dict):\n\n            params_dct = data_config_scan_params\n\n            # TODO: better handling of errant key values!!!\n            # TODO: use schema validator to deal with it\n            # get details from the configuration\n            try: \n                TR = float(\n                    try_fetch_parameter(\n                        params_dct,\n                        subject_id,\n                        scan,\n                        ['TR', 'RepetitionTime']\n                    )\n                )\n            except TypeError:\n                TR = None\n\n            try: \n                template = str(\n                    try_fetch_parameter(\n                        params_dct,\n                        subject_id,\n                        scan,\n                        ['Template', 'template']\n                    )\n                )\n            except TypeError:\n                template = None\n\n            pattern = str(\n                try_fetch_parameter(\n                    params_dct,\n                    subject_id,\n                    scan,\n                    ['acquisition', 'SliceTiming', 'SliceAcquisitionOrder']\n                )\n            )\n\n            ref_slice = check(params_dct, subject_id, scan, 'reference',\n                              False)\n            if ref_slice:\n                ref_slice = int(ref_slice)\n\n            first_tr = check(params_dct, subject_id, scan, 'first_TR', False)\n            if first_tr:\n                first_tr = check2(first_tr)\n\n            last_tr = check(params_dct, subject_id, scan, 'last_TR', False)\n            if last_tr:\n                last_tr = check2(last_tr)\n\n            pe_direction = check(params_dct, subject_id, scan,\n                                 'PhaseEncodingDirection', False)\n            try:\n                effective_echo_spacing = float(\n                try_fetch_parameter(params_dct, subject_id, scan,\n                                    [\"EffectiveEchoSpacing\"]))\n            except TypeError:\n                pass\n\n        else:\n            err = \"\\n\\n[!] Could not read the format of the scan parameters \" \\\n                  \"information included in the data configuration file for \" \\\n                  f\"the participant {subject_id}.\\n\\n\"\n            raise Exception(err)\n    if first_tr == '' or first_tr is None:\n        first_tr = pipeconfig_start_indx\n\n    if last_tr == '' or last_tr is None:\n        last_tr = pipeconfig_stop_indx\n\n    unit = 's'\n\n    if 'None' in pattern or 'none' in pattern:\n        pattern = None\n\n    '''\n    if not pattern:\n        if pipeconfig_tpattern:\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\n                pattern = ''\n            else:\n                pattern = pipeconfig_tpattern\n    '''\n\n    # pattern can be one of a few keywords, a filename, or blank which\n    # indicates that the images header information should be used\n    tpattern_file = None\n\n    valid_patterns = ['alt+z', 'altplus', 'alt+z2', 'alt-z', 'altminus',\n                      'alt-z2', 'seq+z', 'seqplus', 'seq-z', 'seqminus']\n    if pattern and pattern != '' and pattern not in valid_patterns:\n\n        if isinstance(pattern, list) or \\\n                (\"[\" in pattern and \"]\" in pattern and \",\" in pattern):\n            # if we got the slice timing as a list, from a BIDS-format scan\n            # parameters JSON file\n\n            if not isinstance(pattern, list):\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n\n            slice_timings = [float(x) for x in pattern]\n\n            # write out a tpattern file for AFNI 3dTShift\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\n            try:\n                with open(tpattern_file, \"wt\") as f:\n                    for time in slice_timings:\n                        f.write(\"{0}\\n\".format(time).replace(\" \", \"\"))\n            except:\n                err = \"\\n[!] Could not write the slice timing file meant as \" \\\n                      \"an input for AFNI 3dTshift (slice timing correction):\" \\\n                      \"\\n{0}\\n\\n\".format(tpattern_file)\n                raise Exception(err)\n\n        elif \".txt\" in pattern and not os.path.exists(pattern):\n            # if the user provided an acquisition pattern text file for\n            # 3dTshift\n            raise Exception(\"Invalid Pattern file path {0}, Please provide \"\n                            \"the correct path\".format(pattern))\n        elif \".txt\" in pattern:\n            with open(pattern, \"r\") as f:\n                lines = f.readlines()\n            if len(lines) < 2:\n                raise Exception('Invalid slice timing file format. The file '\n                                'should contain only one value per row. Use '\n                                'new line char as delimiter')\n            tpattern_file = pattern\n            slice_timings = [float(l.rstrip('\\r\\n')) for l in lines]\n        else:\n            # this only happens if there is a non-path string set in the data\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\n            # the pattern is not listed in that list\n            err = \"\\n[!] The slice timing acquisition pattern provided is \" \\\n                  \"not supported by AFNI 3dTshift:\\n\" \\\n                  \"{0}\\n\".format(str(pattern))\n            raise Exception(err)\n\n        pattern = tpattern_file\n\n        slice_timings.sort()\n        max_slice_offset = slice_timings[-1]\n\n        # checking if the unit of TR and slice timing match or not\n        # if slice timing in ms convert TR to ms as well\n        if TR and max_slice_offset > TR:\n            warnings.warn(\"TR is in seconds and slice timings are in \"\n                          \"milliseconds. Converting TR into milliseconds\")\n            TR = TR * 1000\n            print(\"New TR value {0} ms\".format(TR))\n            unit = 'ms'\n\n    else:\n        # check to see, if TR is in milliseconds, convert it into seconds\n        if TR and TR > 10:\n            warnings.warn('TR is in milliseconds, Converting it into seconds')\n            TR = TR / 1000.0\n            print(\"New TR value {0} s\".format(TR))\n            unit = 's'\n\n    # swap back in\n    if TR:\n        tr = \"{0}{1}\".format(str(TR), unit)\n    else:\n        tr = \"\"\n\n    tpattern = pattern\n    start_indx = first_tr\n    stop_indx = last_tr\n\n    return (tr if tr else None,\n            tpattern if tpattern else None,\n            template if template else None,\n            ref_slice,\n            start_indx,\n            stop_indx,\n            pe_direction,\n            effective_echo_spacing)\n",
          "data_config_scan_params": "[Undefined]",
          "subject_id": "sub-NDARINV2VY7YYNW",
          "scan": "[Undefined]",
          "pipeconfig_tr": "[Undefined]",
          "pipeconfig_tpattern": "[Undefined]",
          "pipeconfig_start_indx": "0",
          "pipeconfig_stop_indx": "None"
        },
        "outputs": {
          "tr": "[Undefined]",
          "tpattern": "[Undefined]",
          "template": "[Undefined]",
          "ref_slice": "[Undefined]",
          "start_indx": "[Undefined]",
          "stop_indx": "[Undefined]",
          "pe_direction": "[Undefined]",
          "effective_echo_spacing": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_deoblique_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "deoblique": "True",
          "xorigin": "[Undefined]",
          "yorigin": "[Undefined]",
          "zorigin": "[Undefined]",
          "duporigin_file": "[Undefined]",
          "xdel": "[Undefined]",
          "ydel": "[Undefined]",
          "zdel": "[Undefined]",
          "xyzscale": "[Undefined]",
          "space": "[Undefined]",
          "atrcopy": "[Undefined]",
          "atrstring": "[Undefined]",
          "atrfloat": "[Undefined]",
          "atrint": "[Undefined]",
          "saveatr": "[Undefined]",
          "nosaveatr": "[Undefined]",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_reorient_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "RPI",
          "resample_mode": "[Undefined]",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "edit_func_44",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'func': '[Undefined]', 'start_idx': 0, 'stop_idx': None}",
          "func_get_idx": "{'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"\\n    Method to get the first and the last slice for\\n    the functional run. It verifies the user specified\\n    first and last slice. If the values are not valid, it\\n    calculates and returns the very first and the last slice\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:\\n        raise TypeError(\\'Input nifti file: %s is not a 4D file\\' % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx == None) or (int(start_idx) < 0) or (\\n        int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}",
          "func_drop_trs": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'func': None, 'start_idx': None, 'stop_idx': None}",
          "func_get_idx": "{'startidx': None, 'stopidx': None}",
          "func_drop_trs": "{'out_file': None}",
          "outputspec": "{'edited_func': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "start_idx": "0",
              "stop_idx": "None"
            },
            "outputs": {
              "func": "[Undefined]",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_get_idx",
            "type": "node",
            "inputs": {
              "function_str": "def get_idx(in_files, stop_idx=None, start_idx=None):\n    \"\"\"\n    Method to get the first and the last slice for\n    the functional run. It verifies the user specified\n    first and last slice. If the values are not valid, it\n    calculates and returns the very first and the last slice\n\n    Parameters\n    ----------\n    in_file : str (nifti file)\n       Path to input functional run\n\n    stop_idx : int\n        Last volume to be considered, specified by user\n        in the configuration file\n\n    stop_idx : int\n        First volume to be considered, specified by user\n        in the configuration file\n\n    Returns\n    -------\n    stop_idx :  int\n        Value of first slice to consider for the functional run\n\n    start_idx : int\n        Value of last slice to consider for the functional run\n\n    \"\"\"\n\n    # Import packages\n    from nibabel import load\n\n    # Init variables\n    img = load(in_files)\n    hdr = img.header\n    shape = hdr.get_data_shape()\n\n    # Check to make sure the input file is 4-dimensional\n    if len(shape) != 4:\n        raise TypeError('Input nifti file: %s is not a 4D file' % in_files)\n    # Grab the number of volumes\n    nvols = int(hdr.get_data_shape()[3])\n\n    if (start_idx == None) or (int(start_idx) < 0) or (\n        int(start_idx) > (nvols - 1)):\n        startidx = 0\n    else:\n        startidx = int(start_idx)\n\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\n        stopidx = nvols - 1\n    else:\n        stopidx = int(stop_idx)\n\n    return stopidx, startidx\n",
              "in_files": "[Undefined]",
              "stop_idx": "[Undefined]",
              "start_idx": "[Undefined]"
            },
            "outputs": {
              "stopidx": "[Undefined]",
              "startidx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_drop_trs",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "[Undefined]",
              "expr": "a",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "edited_func": "[Undefined]"
            },
            "outputs": {
              "edited_func": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "func_get_idx"
          },
          {
            "origin": "inputspec",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_get_idx",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_drop_trs",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_mean_46",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "mask": "[Undefined]",
          "options": "-mean",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_get_mean_RPI_48",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "mask": "[Undefined]",
          "options": "-mean",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_motion_correct_mcflirt_51",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "cost": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "ref_vol": "[Undefined]",
          "scaling": "[Undefined]",
          "smooth": "[Undefined]",
          "rotation": "[Undefined]",
          "stages": "[Undefined]",
          "init": "[Undefined]",
          "interpolation": "[Undefined]",
          "use_gradient": "[Undefined]",
          "use_contour": "[Undefined]",
          "mean_vol": "[Undefined]",
          "stats_imgs": "[Undefined]",
          "save_mats": "True",
          "save_plots": "True",
          "save_rms": "True",
          "ref_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "variance_img": "[Undefined]",
          "std_img": "[Undefined]",
          "mean_img": "[Undefined]",
          "par_file": "[Undefined]",
          "mat_file": "[Undefined]",
          "rms_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_motion_params_51",
        "type": "node",
        "inputs": {
          "function_str": "def normalize_motion_parameters(in_file):\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\n    import os\n    import numpy as np\n\n    motion_params = np.genfromtxt(in_file).T\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\n                               motion_params[0, :] * 180 / np.pi,\n                               -motion_params[1, :] * 180 / np.pi,\n                               motion_params[5, :],\n                               motion_params[3, :],\n                               -motion_params[4, :]))\n    motion_params = np.transpose(motion_params)\n\n    out_file = os.path.join(os.getcwd(), 'motion_params.tsv')\n    np.savetxt(out_file, motion_params)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_mcflirt_rms_abs_51",
        "type": "node",
        "inputs": {
          "function_str": "def get_mcflirt_rms_abs(rms_files):\n    for path in rms_files:\n        if 'abs.rms' in path:\n            abs_file = path\n        if 'rel.rms' in path:\n            rels_file = path\n    return abs_file, rels_file\n",
          "rms_files": "[Undefined]"
        },
        "outputs": {
          "abs_file": "[Undefined]",
          "rels_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "BET_options_53",
        "type": "node",
        "inputs": {
          "frac": "0.3",
          "mesh_boolean": "False",
          "outline": "False",
          "padding": "False",
          "radius": "50",
          "reduce_bias": "False",
          "remove_eyes": "False",
          "robust": "True",
          "skull": "False",
          "surfaces": "False",
          "threshold": "False",
          "vertical_gradient": "0.0"
        },
        "outputs": {
          "frac": "[Undefined]",
          "mesh_boolean": "[Undefined]",
          "outline": "[Undefined]",
          "padding": "[Undefined]",
          "radius": "[Undefined]",
          "reduce_bias": "[Undefined]",
          "remove_eyes": "[Undefined]",
          "robust": "[Undefined]",
          "skull": "[Undefined]",
          "surfaces": "[Undefined]",
          "threshold": "[Undefined]",
          "vertical_gradient": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_get_brain_mask_BET_53",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "outline": "[Undefined]",
          "mask": "True",
          "skull": "[Undefined]",
          "no_output": "[Undefined]",
          "frac": "[Undefined]",
          "vertical_gradient": "[Undefined]",
          "radius": "[Undefined]",
          "center": "[Undefined]",
          "threshold": "[Undefined]",
          "mesh": "[Undefined]",
          "robust": "[Undefined]",
          "padding": "[Undefined]",
          "remove_eyes": "[Undefined]",
          "surfaces": "[Undefined]",
          "t2_guided": "[Undefined]",
          "functional": "[Undefined]",
          "reduce_bias": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "mask_file": "[Undefined]",
          "outline_file": "[Undefined]",
          "meshfile": "[Undefined]",
          "inskull_mask_file": "[Undefined]",
          "inskull_mesh_file": "[Undefined]",
          "outskull_mask_file": "[Undefined]",
          "outskull_mesh_file": "[Undefined]",
          "outskin_mask_file": "[Undefined]",
          "outskin_mesh_file": "[Undefined]",
          "skull_mask_file": "[Undefined]",
          "skull_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_mean_skull_53",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "mask": "[Undefined]",
          "options": "-mean",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_mean_skull_thr_value_53",
        "type": "node",
        "inputs": {
          "split_4d": "[Undefined]",
          "in_file": "[Undefined]",
          "op_string": "-p 98.000000 ",
          "mask_file": "[Undefined]",
          "index_mask_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_stat": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "form_thr_string_53",
        "type": "node",
        "inputs": {
          "function_str": "def form_thr_string(thr):\n    threshold_z = str(float(thr/10))\n    return '-thr %s' % (threshold_z)\n",
          "thr": "[Undefined]"
        },
        "outputs": {
          "out_str": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_mean_skull_thr_53",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "in_file2": "[Undefined]",
          "mask_file": "[Undefined]",
          "out_file": "[Undefined]",
          "op_string": "[Undefined]",
          "suffix": "[Undefined]",
          "out_data_type": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_mean_skull_fast_53",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "out_basename": "[Undefined]",
          "number_classes": "[Undefined]",
          "output_biasfield": "[Undefined]",
          "output_biascorrected": "True",
          "img_type": "[Undefined]",
          "bias_iters": "[Undefined]",
          "bias_lowpass": "[Undefined]",
          "init_seg_smooth": "[Undefined]",
          "segments": "[Undefined]",
          "init_transform": "[Undefined]",
          "other_priors": "[Undefined]",
          "no_pve": "True",
          "no_bias": "[Undefined]",
          "use_priors": "[Undefined]",
          "segment_iters": "[Undefined]",
          "mixel_smooth": "[Undefined]",
          "iters_afterbias": "[Undefined]",
          "hyper": "[Undefined]",
          "verbose": "[Undefined]",
          "manual_seg": "[Undefined]",
          "probability_maps": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "tissue_class_map": "[Undefined]",
          "tissue_class_files": "[Undefined]",
          "restored_image": "[Undefined]",
          "mixeltype": "[Undefined]",
          "partial_volume_map": "[Undefined]",
          "partial_volume_files": "[Undefined]",
          "bias_field": "[Undefined]",
          "probability_maps": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "erode_one_voxel_53",
        "type": "node",
        "inputs": {
          "minimum_filter": "False",
          "kernel_shape": "box",
          "kernel_size": "1.0",
          "kernel_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_extract_brain_61",
        "type": "node",
        "inputs": {
          "in_file_a": "[Undefined]",
          "in_file_b": "[Undefined]",
          "in_file_c": "[Undefined]",
          "out_file": "[Undefined]",
          "expr": "a*b",
          "start_idx": "[Undefined]",
          "stop_idx": "[Undefined]",
          "single_idx": "[Undefined]",
          "overwrite": "[Undefined]",
          "other": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "gen_motion_stats_65",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}",
          "cal_DVARS": "{'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}",
          "cal_DVARS_strip": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}",
          "outputspec": "{}",
          "calculate_FD": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}",
          "calculate_FDJ": "{'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}",
          "get_all_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}",
          "calc_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}",
          "calc_power_parameters": "{'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}"
        },
        "outputs": {
          "inputspec": "{'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}",
          "cal_DVARS": "{'out_file': None}",
          "cal_DVARS_strip": "{'DVARS_val': None, 'out_file': None}",
          "outputspec": "{'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}",
          "calculate_FD": "{'fd': None, 'out_file': None}",
          "calculate_FDJ": "{'fd': None, 'out_file': None}",
          "get_all_motion_parameters": "{'all_motion_val': None, 'summary_motion_power': None}",
          "calc_motion_parameters": "{'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}",
          "calc_power_parameters": "{'info': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "outputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "out_file": "[Undefined]",
              "method": "dvars",
              "num_threads": "1",
              "outputtype": "AFNI",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS_strip",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0",
              "file_1D": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "DVARS_val": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "outputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FD",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P",
              "in_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FDJ",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J",
              "in_file": "[Undefined]",
              "calc_from": "rms",
              "center": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_all_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion",
              "fdj": "[Undefined]",
              "fdp": "[Undefined]",
              "maxdisp": "[Undefined]",
              "motion": "[Undefined]",
              "power": "[Undefined]",
              "relsdisp": "[Undefined]",
              "dvars": "[Undefined]"
            },
            "outputs": {
              "all_motion_val": "[Undefined]",
              "summary_motion_power": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters",
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "motion_correct_tool": "mcflirt",
              "rels_displacement": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]",
              "maxdisp": "[Undefined]",
              "relsdisp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_power_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters",
              "fdp": "[Undefined]",
              "fdj": "[Undefined]",
              "dvars": "[Undefined]",
              "motion_correct_tool": "mcflirt"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "cal_DVARS"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FD"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FDJ"
          },
          {
            "origin": "inputspec",
            "target": "calc_motion_parameters"
          },
          {
            "origin": "cal_DVARS",
            "target": "cal_DVARS_strip"
          },
          {
            "origin": "cal_DVARS",
            "target": "calc_power_parameters"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "outputspec"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FD",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "calc_power_parameters"
          },
          {
            "origin": "calculate_FDJ",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FDJ",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "get_all_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_power_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_power_parameters",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_normalize_63",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "in_file2": "[Undefined]",
          "mask_file": "[Undefined]",
          "out_file": "[Undefined]",
          "op_string": "-ing 10000",
          "suffix": "[Undefined]",
          "out_data_type": "float",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "ANTS_bold_to_EPI-template_83",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': 1}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
          "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "inverse_transform_flags": "{'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}",
          "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-EPItemplate_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-EPItemplate_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "inverse_all_transform_flags": "{'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}"
        },
        "outputs": {
          "inputspec": "{'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
          "write_composite_linear_xfm": "{'output_image': None}",
          "collect_transforms": "{'out': None}",
          "check_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_invlinear_xfm": "{'output_image': None}",
          "collect_inv_transforms": "{'out': None}",
          "check_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_transform_flags": "{'inverse_transform_flags': None}",
          "write_composite_xfm": "{'output_image': None}",
          "collect_all_transforms": "{'out': None}",
          "check_all_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_inv_xfm": "{'output_image': None}",
          "collect_all_inv_transforms": "{'out': None}",
          "check_all_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_all_transform_flags": "{'inverse_transform_flags': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "LanczosWindowedSinc"
            },
            "outputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "anat_mni_ants_register",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'ants_para': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
              "calc_ants_warp": "{'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': 1}",
              "select_forward_initial": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}",
              "select_forward_rigid": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}",
              "select_forward_affine": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}",
              "select_forward_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}",
              "select_inverse_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}",
              "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
            },
            "outputs": {
              "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
              "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
              "select_forward_initial": "{'selected_warp': None}",
              "select_forward_rigid": "{'selected_warp': None}",
              "select_forward_affine": "{'selected_warp': None}",
              "select_forward_warp": "{'selected_warp': None}",
              "select_inverse_warp": "{'selected_warp': None}",
              "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "None",
                  "ants_para": "[{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}]",
                  "interp": "[Undefined]"
                },
                "outputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "interp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "calc_ants_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def hardcoded_reg(moving_brain, reference_brain, moving_skull,\n                  reference_skull, ants_para, moving_mask=None,\n                  reference_mask=None, fixed_image_mask=None, interp=None,\n                  reg_with_skull=0):\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == 'dimensionality':\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = 'Dimensionality specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 2, 3, or 4 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--dimensionality\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'verbose':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Verbose output option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--verbose\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'float':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Float option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--float\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'collapse-output-transforms':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'collapse-output-transforms specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--collapse-output-transforms\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'winsorize-image-intensities':\n                if ants_para[para_index][para_type]['lowerQuantile'] is None or ants_para[para_index][para_type]['upperQuantile'] is None:\n                    err_msg = 'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--winsorize-image-intensities\")\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type]['lowerQuantile'],\n                        ants_para[para_index][para_type]['upperQuantile']))\n\n            elif para_type == 'initial-moving-transform':\n                if ants_para[para_index][para_type][\n                    'initializationFeature'] is None:\n                    err_msg = 'Please specifiy initializationFeature of ANTs parameters in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--initial-moving-transform\")\n                    if reg_with_skull == 1:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_skull, moving_skull,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n                    else:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_brain, moving_brain,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n\n            elif para_type == 'transforms':\n                for trans_index in range(\n                        len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][\n                        trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type == 'Rigid' or trans_type == 'Affine':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type,\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n\n                        if trans_type == 'SyN':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                SyN_para = []\n                                SyN_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'updateFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'updateFieldVarianceInVoxelSpace']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'totalFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'totalFieldVarianceInVoxelSpace']))\n                                SyN_para = ','.join([str(elem)\n                                                     for elem in SyN_para])\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type, SyN_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'MI':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric'][\n                                                'numberOfBins'] is None:\n                                err_msg = 'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                MI_para = []\n                                MI_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'numberOfBins']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                MI_para = ','.join(\n                                    [str(elem) for elem in MI_para])\n                                regcmd.append(\"--metric\")\n                                if reg_with_skull == 1:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_skull, moving_skull, MI_para))\n                                else:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_brain, moving_brain, MI_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'CC':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric']['radius'] is None:\n                                err_msg = 'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                CC_para = []\n                                CC_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'radius']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                CC_para = ','.join(\n                                    [str(elem) for elem in CC_para])\n                                regcmd.append(\"--metric\")\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\n                                    reference_skull, moving_skull, CC_para))\n\n                        if 'convergence' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            convergence_para = []\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['convergence'][\n                                'iteration'] is None:\n                                err_msg = 'Please specifiy convergence iteration of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                convergence_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'convergence']['iteration']))\n                                if 'convergenceThreshold' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceThreshold'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceThreshold']))\n                                if 'convergenceWindowSize' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceWindowSize'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceWindowSize']))\n                                convergence_para = ','.join(\n                                    [str(elem) for elem in convergence_para])\n                                regcmd.append(\"--convergence\")\n                                regcmd.append(\n                                    \"[{0}]\".format(convergence_para))\n\n                        if 'smoothing-sigmas' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'smoothing-sigmas'] is not None:\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['smoothing-sigmas']))\n\n                        if 'shrink-factors' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'shrink-factors'] is not None:\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['shrink-factors']))\n\n                        if 'use-histogram-matching' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['use-histogram-matching']:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if 'winsorize-image-intensities' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'lowerQuantile'] is not None and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'upperQuantile'] is not None:\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            regcmd.append(\"[{0},{1}]\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['winsorize-image-intensities']\n                                ['lowerQuantile'],\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type][\n                                    'winsorize-image-intensities'][\n                                    'upperQuantile']))\n\n                        if 'masks' in ants_para[para_index][para_type][trans_index][\n                            trans_type] and ants_para[para_index][para_type][\n                                trans_index][trans_type]['masks'] is not None:\n                            if ants_para[para_index][para_type][trans_index][trans_type]['masks']:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == 'masks':\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if ants_para[para_index][para_type][\n                        'fixed_image_mask'] == False and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        err_msg = 'Masks option in ANTs parameters: %d is not supported. ' \\\n                                  'Please set `fixed_image_mask` as True. ' \\\n                                  'Or set both `fixed_image_mask` and `moving_image_mask` as False' % \\\n                                  ants_para[para_index][para_type]\n                        raise Exception(err_msg)\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ',' + str(\n                            moving_mask) + ']')\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == False:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ']')\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(\"{0}\".format(interp))\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), 'command.txt')\n    with open(command_file, 'wt') as f:\n        f.write(' '.join(regcmd))\n\n    try:\n        retcode = subprocess.check_output(regcmd)\n    except Exception as e:\n        raise Exception('[!] ANTS registration did not complete successfully.'\n                        '\\n\\nError details:\\n{0}\\n{1}\\n'.format(e, e.output))\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir('.') if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        raise Exception(\"\\n\\n[!] No registration output file found. ANTS \"\n                        \"registration may not have completed \"\n                        \"successfully.\\n\\n\")\n\n    return warp_list, warped_image\n",
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "interp": "[Undefined]",
                  "reg_with_skull": "1"
                },
                "outputs": {
                  "warp_list": "[Undefined]",
                  "warped_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_initial",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Initial"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_rigid",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Rigid"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_affine",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Affine"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Warp"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_inverse_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Inverse"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "outputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "calc_ants_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_initial"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_rigid"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_affine"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_inverse_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_initial",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_rigid",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_affine",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_inverse_warp",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "write_composite_linear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-bold_to-EPItemplate_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_invlinear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-EPItemplate_to-bold_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if 'WARPINV' in transform:\n            inverse_transform_flags.append(False)\n        if 'updated_affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'Initial' in transform:\n            inverse_transform_flags.append(True)\n        if 'Rigid' in transform:\n            inverse_transform_flags.append(True)\n        if 'Affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'InverseWarp' in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-bold_to-EPItemplate_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_inv_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-EPItemplate_to-bold_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_all_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if 'WARPINV' in transform:\n            inverse_transform_flags.append(False)\n        if 'updated_affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'Initial' in transform:\n            inverse_transform_flags.append(True)\n        if 'Rigid' in transform:\n            inverse_transform_flags.append(True)\n        if 'Affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'InverseWarp' in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "anat_mni_ants_register"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_inv_transforms"
          },
          {
            "origin": "collect_transforms",
            "target": "check_transforms"
          },
          {
            "origin": "check_transforms",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "collect_inv_transforms",
            "target": "check_inv_transforms"
          },
          {
            "origin": "check_inv_transforms",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "check_inv_transforms",
            "target": "inverse_transform_flags"
          },
          {
            "origin": "inverse_transform_flags",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "collect_all_transforms",
            "target": "check_all_transforms"
          },
          {
            "origin": "check_all_transforms",
            "target": "write_composite_xfm"
          },
          {
            "origin": "collect_all_inv_transforms",
            "target": "check_all_inv_transforms"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "inverse_all_transform_flags"
          },
          {
            "origin": "inverse_all_transform_flags",
            "target": "write_composite_inv_xfm"
          }
        ]
      },
      {
        "name": "gather_EPI-template",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'data': '/cpac_templates/chd8_functional_template_sk.nii', 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'data': None, 'scan': None, 'unique_id': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
              "data": "/cpac_templates/chd8_functional_template_sk.nii",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "other"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "nuisance_regressors_Regressor_1_93",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}",
          "functional_mean": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "VentriclesToAnat_Functional_ants_transforms": "{'axis': 'vstack', 'in2': '[Undefined]', 'in3': '[Undefined]', 'no_flatten': False, 'ravel_inputs': False}",
          "VentriclesToAnat_Functional_inverse_transform_flags": "{'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}",
          "VentriclesToAnat_Functional_ants": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'NearestNeighbor', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "CerebrospinalFluid_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "CerebrospinalFluid_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "CerebrospinalFluid_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "GlobalSignal_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "GlobalSignal_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "GlobalSignal_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "build_nuisance_regressors": "{'acompcor_file_path': '[Undefined]', 'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}, 'tcompcor_file_path': '[Undefined]', 'white_matter_summary_file_path': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}",
          "functional_mean": "{'out_file': None}",
          "VentriclesToAnat_Functional_ants_transforms": "{'out': None}",
          "VentriclesToAnat_Functional_inverse_transform_flags": "{'inverse_transform_flags': None}",
          "VentriclesToAnat_Functional_ants": "{'output_image': None}",
          "CerebrospinalFluid_merge_masks": "{'out': None}",
          "CerebrospinalFluid_union_masks": "{'out_file': None}",
          "CerebrospinalFluid_mean": "{'out_file': None}",
          "GlobalSignal_merge_masks": "{'out': None}",
          "GlobalSignal_union_masks": "{'out_file': None}",
          "GlobalSignal_mean": "{'out_file': None}",
          "build_nuisance_regressors": "{'censor_indices': None, 'out_file': None}",
          "outputspec": "{'censor_indices': None, 'regressors_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "functional_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "-mean",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "VentriclesToAnat_Functional_ants_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "VentriclesToAnat_Functional_inverse_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if 'WARPINV' in transform:\n            inverse_transform_flags.append(False)\n        if 'updated_affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'Initial' in transform:\n            inverse_transform_flags.append(True)\n        if 'Rigid' in transform:\n            inverse_transform_flags.append(True)\n        if 'Affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'InverseWarp' in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "VentriclesToAnat_Functional_ants",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "NearestNeighbor",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "build_nuisance_regressors",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.nuisance.gather_nuisance",
              "functional_file_path": "[Undefined]",
              "selector": "{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}",
              "grey_matter_summary_file_path": "[Undefined]",
              "white_matter_summary_file_path": "[Undefined]",
              "csf_summary_file_path": "[Undefined]",
              "acompcor_file_path": "[Undefined]",
              "tcompcor_file_path": "[Undefined]",
              "global_summary_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "custom_file_paths": "[Undefined]",
              "censor_file_path": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "outputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "functional_mean"
          },
          {
            "origin": "inputspec",
            "target": "VentriclesToAnat_Functional_ants_transforms"
          },
          {
            "origin": "inputspec",
            "target": "VentriclesToAnat_Functional_ants"
          },
          {
            "origin": "inputspec",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_merge_masks"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "inputspec",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "functional_mean",
            "target": "VentriclesToAnat_Functional_ants"
          },
          {
            "origin": "VentriclesToAnat_Functional_ants_transforms",
            "target": "VentriclesToAnat_Functional_inverse_transform_flags"
          },
          {
            "origin": "VentriclesToAnat_Functional_ants_transforms",
            "target": "VentriclesToAnat_Functional_ants"
          },
          {
            "origin": "VentriclesToAnat_Functional_inverse_transform_flags",
            "target": "VentriclesToAnat_Functional_ants"
          },
          {
            "origin": "VentriclesToAnat_Functional_ants",
            "target": "CerebrospinalFluid_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_merge_masks",
            "target": "CerebrospinalFluid_union_masks"
          },
          {
            "origin": "CerebrospinalFluid_union_masks",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "CerebrospinalFluid_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "GlobalSignal_merge_masks",
            "target": "GlobalSignal_union_masks"
          },
          {
            "origin": "GlobalSignal_union_masks",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "GlobalSignal_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "build_nuisance_regressors",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "gather_lateral-ventricles-mask",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'data': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis', 'scan': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'other'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'data': None, 'dl_dir': None, 'scan': None, 'unique_id': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'data': None, 'scan': None, 'unique_id': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
              "data": "/cpac_templates/chd8_functional_template_noise_mask_ag.nii",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working/pipeline_analysis"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "other"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "outputs": {
              "unique_id": "[Undefined]",
              "data": "[Undefined]",
              "scan": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "write_composite_invlinear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-EPItemplate_to-bold_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_linear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-bold_to-EPItemplate_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nuisance_regression_space-native_reg-Regressor_1_107",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'regressor_file': '[Undefined]', 'selector': '[Undefined]'}",
          "nuisance_regression": "{'TR': '[Undefined]', 'args': '[Undefined]', 'automask': '[Undefined]', 'bandpass': '[Undefined]', 'blur': '[Undefined]', 'cenmode': '[Undefined]', 'censor': '[Undefined]', 'censortr': '[Undefined]', 'concat': '[Undefined]', 'dsort': '[Undefined]', 'environ': {}, 'noblock': '[Undefined]', 'norm': False, 'num_threads': 1, 'out_file': 'residuals.nii.gz', 'outputtype': 'NIFTI_GZ', 'polort': 0, 'stopband': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'regressor_file': None, 'selector': None}",
          "nuisance_regression": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "regressor_file": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "nuisance_regression",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "residuals.nii.gz",
              "censor": "[Undefined]",
              "censortr": "[Undefined]",
              "cenmode": "[Undefined]",
              "concat": "[Undefined]",
              "noblock": "[Undefined]",
              "ort": "[Undefined]",
              "polort": "0",
              "dsort": "[Undefined]",
              "bandpass": "[Undefined]",
              "stopband": "[Undefined]",
              "TR": "[Undefined]",
              "mask": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "norm": "False",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "nuisance_regression"
          },
          {
            "origin": "nuisance_regression",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'nuisance_selectors': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}, 'regressors_file_path': '[Undefined]', 'tr': '[Undefined]'}",
          "tr_string2float": "{'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}",
          "bandpass_ts": "{'args': '[Undefined]', 'automask': '[Undefined]', 'blur': '[Undefined]', 'despike': '[Undefined]', 'environ': {}, 'highpass': 0.01, 'localPV': '[Undefined]', 'lowpass': 0.1, 'nfft': '[Undefined]', 'no_detrend': '[Undefined]', 'normalize': '[Undefined]', 'notrans': '[Undefined]', 'num_threads': 1, 'orthogonalize_dset': '[Undefined]', 'orthogonalize_file': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "outputspec": "{}",
          "bandpass_regressor": "{'function_str': \"def afni_1dBandpass(in_file, highpass, lowpass, tr=1):\\n    '''\\n    Perform AFNI 1dBandpass\\n    Parameters\\n    ----------\\n    in_file : string\\n        Path of an input 1D file\\n    highpass : float\\n        LowCutoff/HighPass\\n    lowpass : float\\n        HighCutoff/LowPass\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Path of an output 1D file\\n    '''\\n\\n    import os\\n\\n    basename = os.path.basename(in_file)\\n    filename, file_extension = os.path.splitext(basename)\\n    out_file = os.path.join(os.getcwd(), filename + '_bp' + file_extension)\\n\\n    cmd = '1dBandpass -dt %f %f %f %s > %s' % (\\n    tr, highpass, lowpass, in_file, out_file)\\n    os.system(cmd)\\n\\n    return out_file\\n\", 'highpass': 0.01, 'lowpass': 0.1}"
        },
        "outputs": {
          "inputspec": "{'functional_brain_mask_file_path': None, 'functional_file_path': None, 'nuisance_selectors': None, 'regressors_file_path': None, 'tr': None}",
          "tr_string2float": "{'tr_float': None}",
          "bandpass_ts": "{'out_file': None}",
          "outputspec": "{'residual_file_path': None, 'residual_regressor': None}",
          "bandpass_regressor": "{'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': {'filter': 'Mean', 'method': 'Mean'}, 'extraction_resolution': 'Functional'}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}",
              "tr": "[Undefined]"
            },
            "outputs": {
              "functional_file_path": "[Undefined]",
              "regressors_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "nuisance_selectors": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tr_string2float",
            "type": "node",
            "inputs": {
              "function_str": "def TR_string_to_float(tr):\n    \"\"\"\n    Convert TR string to seconds (float). Suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Parameters\n    ----------\n    tr : TR string representation. May use suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Returns\n    -------\n    tr in seconds (float)\n    \"\"\"\n    if not isinstance(tr, str):\n        raise TypeError(f'Improper type for TR_string_to_float ({tr}).')\n\n    tr_str = tr.replace(' ', '')\n\n    try:\n        if tr_str.endswith('ms'):\n            tr_numeric = float(tr_str[:-2]) * 0.001\n        elif tr.endswith('s'):\n            tr_numeric = float(tr_str[:-1])\n        else:\n            tr_numeric = float(tr_str)\n    except Exception as exc:\n        raise ValueError(f'Can not convert TR string to float: \"{tr}\".') from exc\n\n    return tr_numeric\n",
              "tr": "[Undefined]"
            },
            "outputs": {
              "tr_float": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bandpass_ts",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "lowpass": "0.1",
              "highpass": "0.01",
              "mask": "[Undefined]",
              "despike": "[Undefined]",
              "orthogonalize_file": "[Undefined]",
              "orthogonalize_dset": "[Undefined]",
              "no_detrend": "[Undefined]",
              "tr": "[Undefined]",
              "nfft": "[Undefined]",
              "normalize": "[Undefined]",
              "automask": "[Undefined]",
              "blur": "[Undefined]",
              "localPV": "[Undefined]",
              "notrans": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "outputs": {
              "residual_file_path": "[Undefined]",
              "residual_regressor": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bandpass_regressor",
            "type": "node",
            "inputs": {
              "function_str": "def afni_1dBandpass(in_file, highpass, lowpass, tr=1):\n    '''\n    Perform AFNI 1dBandpass\n    Parameters\n    ----------\n    in_file : string\n        Path of an input 1D file\n    highpass : float\n        LowCutoff/HighPass\n    lowpass : float\n        HighCutoff/LowPass\n\n    Returns\n    -------\n    out_file : string\n        Path of an output 1D file\n    '''\n\n    import os\n\n    basename = os.path.basename(in_file)\n    filename, file_extension = os.path.splitext(basename)\n    out_file = os.path.join(os.getcwd(), filename + '_bp' + file_extension)\n\n    cmd = '1dBandpass -dt %f %f %f %s > %s' % (\n    tr, highpass, lowpass, in_file, out_file)\n    os.system(cmd)\n\n    return out_file\n",
              "in_file": "[Undefined]",
              "highpass": "0.01",
              "lowpass": "0.1",
              "tr": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "tr_string2float"
          },
          {
            "origin": "inputspec",
            "target": "bandpass_ts"
          },
          {
            "origin": "inputspec",
            "target": "bandpass_regressor"
          },
          {
            "origin": "tr_string2float",
            "target": "bandpass_ts"
          },
          {
            "origin": "tr_string2float",
            "target": "bandpass_regressor"
          },
          {
            "origin": "bandpass_ts",
            "target": "outputspec"
          },
          {
            "origin": "bandpass_regressor",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "warp_desc-preproc_bold_to_EPItemplate_118",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 3, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "chunk_warp_desc-preproc_bold_to_EPItemplate_118": "{'chunk_size': 10, 'function_str': 'def chunk_ts(func_file, n_chunks=None, chunk_size=None):\\n    func_img = nb.load(func_file)\\n    trs = func_img.shape[3]\\n    TR_ranges = []\\n\\n    if n_chunks:\\n        chunk_size = trs/n_chunks\\n    elif chunk_size:\\n        n_chunks = int(trs/chunk_size)\\n    else:\\n        raise Exception(\"\\\\n[!] Dev error: Either \\'n_chunks\\' or \\'chunk_size\\' \"\\n                        \"arguments must be passed to \\'chunk_ts\\' function.\\\\n\")\\n\\n    for chunk_idx in range(0, n_chunks):\\n        if chunk_idx == n_chunks - 1:\\n            TR_ranges.append((int(chunk_idx*chunk_size), int(trs - 1)))\\n        else:\\n            TR_ranges.append((int(chunk_idx*chunk_size), int((chunk_idx+1)*chunk_size - 1)))\\n    return TR_ranges\\n', 'n_chunks': '[Undefined]'}",
          "split_warp_desc-preproc_bold_to_EPItemplate_118": "{'function_str': 'def split_ts_chunks(func_file, tr_ranges):\\n    if \\'.nii\\' in func_file:\\n        ext = \\'.nii\\'\\n    if \\'.nii.gz\\' in func_file:\\n        ext = \\'.nii.gz\\'\\n\\n    split_funcs = []\\n    for chunk_idx, tr_range in enumerate(tr_ranges):\\n        out_file = os.path.join(os.getcwd(), os.path.basename(func_file).replace(ext, \"_{0}{1}\".format(chunk_idx, ext)))\\n        in_file = \"{0}[{1}..{2}]\".format(func_file, tr_range[0], tr_range[1])\\n\\n        cmd = [\"3dcalc\", \"-a\", in_file, \"-expr\", \"a\", \"-prefix\", out_file]\\n\\n        retcode = subprocess.check_output(cmd)\\n\\n        split_funcs.append(out_file)\\n\\n    return split_funcs\\n'}",
          "func_concat_warp_desc-preproc_bold_to_EPItemplate_118": "{'args': '[Undefined]', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'verbose': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "chunk_warp_desc-preproc_bold_to_EPItemplate_118": "{'TR_ranges': None}",
          "split_warp_desc-preproc_bold_to_EPItemplate_118": "{'split_funcs': None}",
          "func_concat_warp_desc-preproc_bold_to_EPItemplate_118": "{'out_file': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "default_value": "0.0",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "float": "False",
              "input_image": "[Undefined]",
              "input_image_type": "3",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "num_threads": "1",
              "out_postfix": "_trans",
              "output_image": "[Undefined]",
              "print_out_composite_warp_file": "[Undefined]",
              "reference_image": "[Undefined]",
              "transforms": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "chunk_warp_desc-preproc_bold_to_EPItemplate_118",
            "type": "node",
            "inputs": {
              "function_str": "def chunk_ts(func_file, n_chunks=None, chunk_size=None):\n    func_img = nb.load(func_file)\n    trs = func_img.shape[3]\n    TR_ranges = []\n\n    if n_chunks:\n        chunk_size = trs/n_chunks\n    elif chunk_size:\n        n_chunks = int(trs/chunk_size)\n    else:\n        raise Exception(\"\\n[!] Dev error: Either 'n_chunks' or 'chunk_size' \"\n                        \"arguments must be passed to 'chunk_ts' function.\\n\")\n\n    for chunk_idx in range(0, n_chunks):\n        if chunk_idx == n_chunks - 1:\n            TR_ranges.append((int(chunk_idx*chunk_size), int(trs - 1)))\n        else:\n            TR_ranges.append((int(chunk_idx*chunk_size), int((chunk_idx+1)*chunk_size - 1)))\n    return TR_ranges\n",
              "func_file": "[Undefined]",
              "n_chunks": "[Undefined]",
              "chunk_size": "10"
            },
            "outputs": {
              "TR_ranges": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "split_warp_desc-preproc_bold_to_EPItemplate_118",
            "type": "node",
            "inputs": {
              "function_str": "def split_ts_chunks(func_file, tr_ranges):\n    if '.nii' in func_file:\n        ext = '.nii'\n    if '.nii.gz' in func_file:\n        ext = '.nii.gz'\n\n    split_funcs = []\n    for chunk_idx, tr_range in enumerate(tr_ranges):\n        out_file = os.path.join(os.getcwd(), os.path.basename(func_file).replace(ext, \"_{0}{1}\".format(chunk_idx, ext)))\n        in_file = \"{0}[{1}..{2}]\".format(func_file, tr_range[0], tr_range[1])\n\n        cmd = [\"3dcalc\", \"-a\", in_file, \"-expr\", \"a\", \"-prefix\", out_file]\n\n        retcode = subprocess.check_output(cmd)\n\n        split_funcs.append(out_file)\n\n    return split_funcs\n",
              "func_file": "[Undefined]",
              "tr_ranges": "[Undefined]"
            },
            "outputs": {
              "split_funcs": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_concat_warp_desc-preproc_bold_to_EPItemplate_118",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "rlt": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "inputspec",
            "target": "chunk_warp_desc-preproc_bold_to_EPItemplate_118"
          },
          {
            "origin": "inputspec",
            "target": "split_warp_desc-preproc_bold_to_EPItemplate_118"
          },
          {
            "origin": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_",
            "target": "func_concat_warp_desc-preproc_bold_to_EPItemplate_118"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_"
          },
          {
            "origin": "chunk_warp_desc-preproc_bold_to_EPItemplate_118",
            "target": "split_warp_desc-preproc_bold_to_EPItemplate_118"
          },
          {
            "origin": "split_warp_desc-preproc_bold_to_EPItemplate_118",
            "target": "apply_warp_warp_desc-preproc_bold_to_EPItemplate_118_"
          },
          {
            "origin": "func_concat_warp_desc-preproc_bold_to_EPItemplate_118",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "write_composite_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-bold_to-EPItemplate_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_desc-mean_bold_to_EPItemplate_122",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_desc-mean_bold_to_EPItemplate_122": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_desc-mean_bold_to_EPItemplate_122": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_desc-mean_bold_to_EPItemplate_122",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_desc-mean_bold_to_EPItemplate_122"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_desc-mean_bold_to_EPItemplate_122",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_desc-mean_bold_to_EPItemplate_122"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_desc-mean_bold_to_EPItemplate_122"
          }
        ]
      },
      {
        "name": "warp_space-bold_desc-brain_mask_to_EPItemplate_126",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_space-bold_desc-brain_mask_to_EPItemplate_126"
          }
        ]
      },
      {
        "name": "qc_motion_57",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'motion_parameters': '[Undefined]'}",
          "motion_plot": "{'function_str': 'CPAC.qc.utils.gen_motion_plt'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'motion_parameters': None}",
          "motion_plot": "{'rotation_plot': None, 'translation_plot': None}",
          "outputspec": "{'motion_rotation_plot': None, 'motion_translation_plot': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "motion_parameters": "[Undefined]"
            },
            "outputs": {
              "motion_parameters": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "motion_plot",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.qc.utils.gen_motion_plt",
              "motion_parameters": "[Undefined]"
            },
            "outputs": {
              "translation_plot": "[Undefined]",
              "rotation_plot": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "motion_translation_plot": "[Undefined]",
              "motion_rotation_plot": "[Undefined]"
            },
            "outputs": {
              "motion_translation_plot": "[Undefined]",
              "motion_rotation_plot": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "motion_plot"
          },
          {
            "origin": "motion_plot",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "qc_fd_75",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'excluded_volumes': '[Undefined]', 'fd': '[Undefined]'}",
          "fd_plot": "{'function_str': 'CPAC.qc.utils.gen_plot_png', 'measure': 'FD'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'excluded_volumes': None, 'fd': None}",
          "fd_plot": "{'hist_path': None}",
          "outputspec": "{'fd_histogram_plot': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "fd": "[Undefined]",
              "excluded_volumes": "[Undefined]"
            },
            "outputs": {
              "fd": "[Undefined]",
              "excluded_volumes": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fd_plot",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.qc.utils.gen_plot_png",
              "arr": "[Undefined]",
              "measure": "FD",
              "ex_vol": "[Undefined]"
            },
            "outputs": {
              "hist_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "fd_histogram_plot": "[Undefined]"
            },
            "outputs": {
              "fd_histogram_plot": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "fd_plot"
          },
          {
            "origin": "fd_plot",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "id_string_desc-preproc_bold_114",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-preproc_bold_114",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-preproc_bold_114",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-preproc_bold:nuisance_regression_native'], 'SkullStripped': True, 'Sources': ['TR', 'desc-confounds_timeseries', 'space-bold_desc-brain_mask', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars'], 'Description': 'Preprocessed BOLD image that was nuisance-regressed in native space', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-preproc_bold_114",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-mean_bold_47",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-mean_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-mean_bold_47",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-mean_bold_47",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'RawSources': ['bold'], 'CpacProvenance': ['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-mean_bold_47",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-movementParameters_motion_57",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-movementParameters_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-movementParameters_motion_57",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-movementParameters_motion_57",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], 'Sources': ['desc-preproc_bold', 'motion-basefile'], 'Description': \"Each line contains for one timepoint a 6-DOF rigid transform parameters in the format defined by AFNI's 3dvolreg: [roll, pitch, yaw, superior displacement, left displacement, posterior displacement]. Rotation parameters are in degrees counterclockwise, and translation parameters are in millimeters.\", 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-movementParameters_motion_57",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-bold_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-bold_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-bold_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-bold_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-bold_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_motion_79",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_motion_79",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_motion_79",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_motion_79",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-summary_motion_80",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-summary_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-summary_motion_80",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-summary_motion_80",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'desc-summary_motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-summary_motion_80",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_sbref_82",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "sbref",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_sbref_82",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_sbref_82",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'RawSources': ['bold'], 'CpacProvenance': ['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], 'Sources': ['desc-mean_bold'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_sbref_82",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-preproc_bold_86",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-preproc_bold_86",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_mni_ants_register",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'ants_para': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
          "calc_ants_warp": "{'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': 1}",
          "select_forward_initial": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}",
          "select_forward_rigid": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}",
          "select_forward_affine": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}",
          "select_forward_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}",
          "select_inverse_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}",
          "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
          "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
          "select_forward_initial": "{'selected_warp': None}",
          "select_forward_rigid": "{'selected_warp': None}",
          "select_forward_affine": "{'selected_warp': None}",
          "select_forward_warp": "{'selected_warp': None}",
          "select_inverse_warp": "{'selected_warp': None}",
          "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "None",
              "ants_para": "[{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}]",
              "interp": "[Undefined]"
            },
            "outputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "ants_para": "[Undefined]",
              "interp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_ants_warp",
            "type": "node",
            "inputs": {
              "function_str": "def hardcoded_reg(moving_brain, reference_brain, moving_skull,\n                  reference_skull, ants_para, moving_mask=None,\n                  reference_mask=None, fixed_image_mask=None, interp=None,\n                  reg_with_skull=0):\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == 'dimensionality':\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = 'Dimensionality specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 2, 3, or 4 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--dimensionality\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'verbose':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Verbose output option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--verbose\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'float':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Float option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--float\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'collapse-output-transforms':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'collapse-output-transforms specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--collapse-output-transforms\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'winsorize-image-intensities':\n                if ants_para[para_index][para_type]['lowerQuantile'] is None or ants_para[para_index][para_type]['upperQuantile'] is None:\n                    err_msg = 'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--winsorize-image-intensities\")\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type]['lowerQuantile'],\n                        ants_para[para_index][para_type]['upperQuantile']))\n\n            elif para_type == 'initial-moving-transform':\n                if ants_para[para_index][para_type][\n                    'initializationFeature'] is None:\n                    err_msg = 'Please specifiy initializationFeature of ANTs parameters in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--initial-moving-transform\")\n                    if reg_with_skull == 1:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_skull, moving_skull,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n                    else:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_brain, moving_brain,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n\n            elif para_type == 'transforms':\n                for trans_index in range(\n                        len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][\n                        trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type == 'Rigid' or trans_type == 'Affine':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type,\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n\n                        if trans_type == 'SyN':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                SyN_para = []\n                                SyN_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'updateFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'updateFieldVarianceInVoxelSpace']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'totalFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'totalFieldVarianceInVoxelSpace']))\n                                SyN_para = ','.join([str(elem)\n                                                     for elem in SyN_para])\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type, SyN_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'MI':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric'][\n                                                'numberOfBins'] is None:\n                                err_msg = 'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                MI_para = []\n                                MI_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'numberOfBins']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                MI_para = ','.join(\n                                    [str(elem) for elem in MI_para])\n                                regcmd.append(\"--metric\")\n                                if reg_with_skull == 1:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_skull, moving_skull, MI_para))\n                                else:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_brain, moving_brain, MI_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'CC':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric']['radius'] is None:\n                                err_msg = 'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                CC_para = []\n                                CC_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'radius']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                CC_para = ','.join(\n                                    [str(elem) for elem in CC_para])\n                                regcmd.append(\"--metric\")\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\n                                    reference_skull, moving_skull, CC_para))\n\n                        if 'convergence' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            convergence_para = []\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['convergence'][\n                                'iteration'] is None:\n                                err_msg = 'Please specifiy convergence iteration of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                convergence_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'convergence']['iteration']))\n                                if 'convergenceThreshold' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceThreshold'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceThreshold']))\n                                if 'convergenceWindowSize' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceWindowSize'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceWindowSize']))\n                                convergence_para = ','.join(\n                                    [str(elem) for elem in convergence_para])\n                                regcmd.append(\"--convergence\")\n                                regcmd.append(\n                                    \"[{0}]\".format(convergence_para))\n\n                        if 'smoothing-sigmas' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'smoothing-sigmas'] is not None:\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['smoothing-sigmas']))\n\n                        if 'shrink-factors' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'shrink-factors'] is not None:\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['shrink-factors']))\n\n                        if 'use-histogram-matching' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['use-histogram-matching']:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if 'winsorize-image-intensities' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'lowerQuantile'] is not None and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'upperQuantile'] is not None:\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            regcmd.append(\"[{0},{1}]\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['winsorize-image-intensities']\n                                ['lowerQuantile'],\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type][\n                                    'winsorize-image-intensities'][\n                                    'upperQuantile']))\n\n                        if 'masks' in ants_para[para_index][para_type][trans_index][\n                            trans_type] and ants_para[para_index][para_type][\n                                trans_index][trans_type]['masks'] is not None:\n                            if ants_para[para_index][para_type][trans_index][trans_type]['masks']:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == 'masks':\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if ants_para[para_index][para_type][\n                        'fixed_image_mask'] == False and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        err_msg = 'Masks option in ANTs parameters: %d is not supported. ' \\\n                                  'Please set `fixed_image_mask` as True. ' \\\n                                  'Or set both `fixed_image_mask` and `moving_image_mask` as False' % \\\n                                  ants_para[para_index][para_type]\n                        raise Exception(err_msg)\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ',' + str(\n                            moving_mask) + ']')\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == False:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ']')\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(\"{0}\".format(interp))\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), 'command.txt')\n    with open(command_file, 'wt') as f:\n        f.write(' '.join(regcmd))\n\n    try:\n        retcode = subprocess.check_output(regcmd)\n    except Exception as e:\n        raise Exception('[!] ANTS registration did not complete successfully.'\n                        '\\n\\nError details:\\n{0}\\n{1}\\n'.format(e, e.output))\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir('.') if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        raise Exception(\"\\n\\n[!] No registration output file found. ANTS \"\n                        \"registration may not have completed \"\n                        \"successfully.\\n\\n\")\n\n    return warp_list, warped_image\n",
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "ants_para": "[Undefined]",
              "moving_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "interp": "[Undefined]",
              "reg_with_skull": "1"
            },
            "outputs": {
              "warp_list": "[Undefined]",
              "warped_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_initial",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Initial"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_rigid",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Rigid"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_affine",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Affine"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Warp"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_inverse_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Inverse"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "outputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "calc_ants_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_initial"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_rigid"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_affine"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_inverse_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_initial",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_rigid",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_affine",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_inverse_warp",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "json_space-template_desc-preproc_bold_86",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-preproc_bold:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-preproc_bold_86",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-preproc_bold_121",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-preproc_bold_121",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-preproc_bold_121",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-preproc_bold:nuisance_regression_native'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-preproc_bold:transform_timeseries_to_EPItemplate'], 'SkullStripped': True, 'Sources': ['desc-preproc_bold', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-preproc_bold_121",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-EPItemplate_mode-image_xfm_87",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-bold_to-EPItemplate_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-EPItemplate_mode-image_xfm_87",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-EPItemplate_mode-image_xfm_87",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-EPItemplate_mode-image_xfm_87",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-bold_to-EPItemplate_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-EPItemplate_to-bold_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm:register_ANTs_EPI_to_template'], 'Sources': ['sbref', 'space-bold_desc-brain_mask', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-confounds_timeseries_117",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-confounds_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-confounds_timeseries_117",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-confounds_timeseries_117",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['TR:func_metadata_ingress'], [['lateral-ventricles-mask:lateral-ventricles-mask_config_ingress'], ['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-brain_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-EPItemplate_to-bold_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_desc-linear_xfm:register_ANTs_EPI_to_template'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regressors_generation_EPItemplate_Regressor_1'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking', 'desc-preproc_bold:func_normalize'], 'desc-confounds_timeseries:nuisance_regression_native'], 'Sources': ['TR', 'desc-confounds_timeseries', 'space-bold_desc-brain_mask', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars'], 'Description': 'Regressors that were applied in native space', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-confounds_timeseries_117",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-mean_bold_125",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-mean_bold",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-mean_bold_125",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-mean_bold_125",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-mean_bold:transform_bold_mean_to_EPItemplate'], 'Sources': ['desc-mean_bold', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-mean_bold_125",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-bold_mask_129",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-bold_mask",
          "scan_id": "[Undefined]",
          "template_desc": "template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-bold_mask_129",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-bold_mask_129",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate', 'desc-mean_bold:func_mean', 'sbref:coregistration_prep_mean'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], ['EPI-template:EPI-template_config_ingress'], 'from-bold_to-EPItemplate_mode-image_xfm:register_ANTs_EPI_to_template'], ['EPI-template:EPI-template_config_ingress'], 'space-template_desc-bold_mask:transform_bold_mask_to_EPItemplate'], 'Sources': ['space-bold_desc-brain_mask', 'from-bold_to-EPItemplate_mode-image_xfm', 'EPI-template'], 'Template': 'template - EPI-based template - /cpac_templates/chd8_functional_template_sk.nii', 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-bold_mask_129",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-movementParametersTrans_quality_133",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-movementParametersTrans_quality",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-movementParametersTrans_quality_133",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-movementParametersTrans_quality_133",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt', 'desc-movementParametersTrans_quality:qc_motion_plot'], 'Sources': ['desc-movementParameters_motion'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-movementParametersTrans_quality_133",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-movementParametersRot_quality_134",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-movementParametersRot_quality",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-movementParametersRot_quality_134",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-movementParametersRot_quality_134",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt', 'desc-movementParametersRot_quality:qc_motion_plot'], 'Sources': ['desc-movementParameters_motion'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-movementParametersRot_quality_134",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('analysis')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-framewiseDisplacementJenkinsonPlot_quality",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-preproc_bold:motion_correction_mcflirt', 'space-bold_desc-brain_mask:bold_mask_fsl'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'desc-movementParameters_motion:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'max-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'rels-displacement:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'filtered-coordinate-transformation:motion_correction_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_mean'], 'coordinate-transformation:motion_correction_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats', 'desc-framewiseDisplacementJenkinsonPlot_quality:qc_fd_plot'], 'Sources': ['framewise-displacement-jenkinson'], 'CpacConfigHash': 'cf7e1177eacbd9411cd316c34a27ce56f78939b1', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'analysis', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': True}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'mpi_smp', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 4, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': False}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': False, 'acpc_alignment': {'T1w_brain_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm_brain.nii.gz', 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_1mm.nii.gz'}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': '/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz'}, 'using': ['3dSkullStrip'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': True, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': False, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Auto', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': True, 'priors_path': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm', 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': ['T1_Template'], 'WHITE': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz', 'GRAY': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz', 'CSF': '/usr/share/fsl/6.0/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'}, 'ANTs_Prior_Based': {'template_brain_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_T1w_brain.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_T1w_brain.nii.gz'], 'template_segmentation_list': ['/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz', '/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz'], 'GM_label': [3, 42], 'WM_label': [2, 41], 'CSF_label': [24]}, 'FreeSurfer': {'erode': 0, 'CSF_label': [24], 'GM_label': [3, 42], 'WM_label': [2, 41]}}}, 'registration_workflows': {'anatomical_registration': {'run': False, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz', 'T1w_template_res-2': '/usr/share/fsl/6.0/data/standard/MNI152_T1_2mm.nii.gz', 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 0}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'Affine': {'gradientStep': 0.1, 'metric': {'type': 'MI', 'metricWeight': 1, 'numberOfBins': 32, 'samplingStrategy': 'Regular', 'samplingPercentage': 0.25}, 'convergence': {'iteration': '1000x500x250x100', 'convergenceThreshold': '1e-08', 'convergenceWindowSize': 10}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '8x4x2x1', 'use-histogram-matching': True}}, {'SyN': {'gradientStep': 0.1, 'updateFieldVarianceInVoxelSpace': 3.0, 'totalFieldVarianceInVoxelSpace': 0.0, 'metric': {'type': 'CC', 'metricWeight': 1, 'radius': 4}, 'convergence': {'iteration': '100x100x70x20', 'convergenceThreshold': '1e-09', 'convergenceWindowSize': 15}, 'smoothing-sigmas': '3.0x2.0x1.0x0.0', 'shrink-factors': '6x4x2x1', 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.01, 'upperQuantile': 0.99}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '2mm', 'T1w_brain_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz', 'T1w_template': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz', 'T1w_brain_template_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'reg_with_skull': True}, 'functional_registration': {'coregistration': {'run': False, 'func_input_prep': {'reg_with_skull': False, 'input': ['Mean_Functional'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'whole-head', 'bbr_wm_map': 'probability_map', 'bbr_wm_mask_args': '-thr 0.5 -bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': True, 'apply_transform': {'using': 'default'}, 'output_resolution': {'func_preproc_outputs': '2.3mmx2.3mmx6mm', 'func_derivative_outputs': '2.3mmx2.3mmx6mm'}, 'target_template': {'using': ['EPI_template'], 'T1_template': {'T1w_brain_template_funcreg': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_funcreg': '/template/study_based_functional_template.nii.gz', 'T1w_brain_template_mask_funcreg': None, 'T1w_template_for_resample': None}, 'EPI_template': {'EPI_template_funcreg': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'Linear'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': True, 'using': ['ANTS'], 'EPI_template': '/cpac_templates/chd8_functional_template_sk.nii', 'EPI_template_mask': None, 'ANTs': {'parameters': [{'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 1}}, {'transforms': [{'Affine': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.25, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0'}}, {'SyN': {'convergence': {'iteration': '100x100x30'}, 'gradientStep': 0.15, 'metric': {'metricWeight': 1, 'radius': 2, 'type': 'CC'}, 'shrink-factors': '5x3x1', 'smoothing-sigmas': '5x3x0', 'totalFieldVarianceInVoxelSpace': 1, 'updateFieldVarianceInVoxelSpace': 5}}]}], 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [False], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': False, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': False}, 'motion_correction_reference': ['mean'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [False], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': True, 'threshold_value': 98}, 'functional_mean_bias_correction': True, 'functional_mean_boolean': True, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 50, 'reduce_bias': False, 'remove_eyes': False, 'robust': True, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': None, 'brain_mask': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz', 'brain_probseg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': True}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [True], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1, 'method': 'AFNI'}, 'CerebrospinalFluid': {'erode_mask': False, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': False, 'include_delayed_squared': False, 'include_squared': False}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': False, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': False, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': False, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'native', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': '/cpac_templates/chd8_functional_template_noise_mask_ag.nii', 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': '/template/study_based_functional_template_sk.nii.gz', 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': '/template/study_based_functional_template_sk.nii.gz', 'T1w_template_symmetric': '/template/study_based_functional_template.nii.gz', 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': '/template/study_based_functional_template.nii.g', 'dilated_symmetric_brain_mask': '/template/study_based_functional_template_mask.nii.gz', 'dilated_symmetric_brain_mask_for_resample': '/template/study_based_functional_template_mask.nii.gz'}}, 'network_centrality': {'run': False, 'memory_allocation': 1.0, 'template_specification_file': '/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz', 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Correlation threshold', 'correlation_threshold': 0.6}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['AFNI'], 'fwhm': [6]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz', 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/rodent/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_analysis/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "False",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      }
    ],
    "edges": [
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "func_deoblique_2"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-preproc_bold_114"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-mean_bold_47"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-movementParameters_motion_57"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_motion_79"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-summary_motion_80"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_sbref_82"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-confounds_timeseries_117"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-mean_bold_125"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-bold_mask_129"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      },
      {
        "origin": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "func_deoblique_2",
        "target": "func_reorient_2"
      },
      {
        "origin": "func_reorient_2",
        "target": "edit_func_44"
      },
      {
        "origin": "edit_func_44",
        "target": "func_mean_46"
      },
      {
        "origin": "edit_func_44",
        "target": "func_get_mean_RPI_48"
      },
      {
        "origin": "edit_func_44",
        "target": "func_motion_correct_mcflirt_51"
      },
      {
        "origin": "func_mean_46",
        "target": "ANTS_bold_to_EPI-template_83"
      },
      {
        "origin": "func_mean_46",
        "target": "warp_desc-mean_bold_to_EPItemplate_122"
      },
      {
        "origin": "func_mean_46",
        "target": "nii_desc-mean_bold_47"
      },
      {
        "origin": "func_mean_46",
        "target": "nii_sbref_82"
      },
      {
        "origin": "func_get_mean_RPI_48",
        "target": "func_motion_correct_mcflirt_51"
      },
      {
        "origin": "func_motion_correct_mcflirt_51",
        "target": "norm_motion_params_51"
      },
      {
        "origin": "func_motion_correct_mcflirt_51",
        "target": "get_mcflirt_rms_abs_51"
      },
      {
        "origin": "func_motion_correct_mcflirt_51",
        "target": "func_mean_skull_53"
      },
      {
        "origin": "func_motion_correct_mcflirt_51",
        "target": "func_extract_brain_61"
      },
      {
        "origin": "func_motion_correct_mcflirt_51",
        "target": "gen_motion_stats_65"
      },
      {
        "origin": "norm_motion_params_51",
        "target": "gen_motion_stats_65"
      },
      {
        "origin": "norm_motion_params_51",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "norm_motion_params_51",
        "target": "qc_motion_57"
      },
      {
        "origin": "norm_motion_params_51",
        "target": "nii_desc-movementParameters_motion_57"
      },
      {
        "origin": "get_mcflirt_rms_abs_51",
        "target": "gen_motion_stats_65"
      },
      {
        "origin": "BET_options_53",
        "target": "func_get_brain_mask_BET_53"
      },
      {
        "origin": "func_get_brain_mask_BET_53",
        "target": "erode_one_voxel_53"
      },
      {
        "origin": "func_mean_skull_53",
        "target": "func_mean_skull_thr_value_53"
      },
      {
        "origin": "func_mean_skull_53",
        "target": "func_mean_skull_thr_53"
      },
      {
        "origin": "func_mean_skull_thr_value_53",
        "target": "form_thr_string_53"
      },
      {
        "origin": "form_thr_string_53",
        "target": "func_mean_skull_thr_53"
      },
      {
        "origin": "func_mean_skull_thr_53",
        "target": "func_mean_skull_fast_53"
      },
      {
        "origin": "func_mean_skull_fast_53",
        "target": "func_get_brain_mask_BET_53"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "func_extract_brain_61"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "gen_motion_stats_65"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "ANTS_bold_to_EPI-template_83"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "nuisance_regression_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "warp_space-bold_desc-brain_mask_to_EPItemplate_126"
      },
      {
        "origin": "erode_one_voxel_53",
        "target": "nii_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "func_extract_brain_61",
        "target": "gen_motion_stats_65"
      },
      {
        "origin": "func_extract_brain_61",
        "target": "func_normalize_63"
      },
      {
        "origin": "func_extract_brain_61",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "gen_motion_stats_65",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "gen_motion_stats_65",
        "target": "nuisance_regression_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "gen_motion_stats_65",
        "target": "qc_fd_75"
      },
      {
        "origin": "gen_motion_stats_65",
        "target": "nii_motion_79"
      },
      {
        "origin": "gen_motion_stats_65",
        "target": "nii_desc-summary_motion_80"
      },
      {
        "origin": "func_normalize_63",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "func_normalize_63",
        "target": "nuisance_regression_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "gather_EPI-template",
        "target": "ANTS_bold_to_EPI-template_83"
      },
      {
        "origin": "gather_EPI-template",
        "target": "warp_desc-preproc_bold_to_EPItemplate_118"
      },
      {
        "origin": "gather_EPI-template",
        "target": "warp_desc-mean_bold_to_EPItemplate_122"
      },
      {
        "origin": "gather_EPI-template",
        "target": "warp_space-bold_desc-brain_mask_to_EPItemplate_126"
      },
      {
        "origin": "nuisance_regressors_Regressor_1_93",
        "target": "nuisance_regression_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "nuisance_regressors_Regressor_1_93",
        "target": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "gather_lateral-ventricles-mask",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nuisance_regressors_Regressor_1_93"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "nuisance_regression_space-native_reg-Regressor_1_107",
        "target": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107"
      },
      {
        "origin": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107",
        "target": "warp_desc-preproc_bold_to_EPItemplate_118"
      },
      {
        "origin": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107",
        "target": "nii_desc-preproc_bold_114"
      },
      {
        "origin": "filtering_bold_and_regressors_space-native_reg-Regressor_1_107",
        "target": "nii_desc-confounds_timeseries_117"
      },
      {
        "origin": "warp_desc-preproc_bold_to_EPItemplate_118",
        "target": "nii_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_desc-preproc_bold_to_EPItemplate_118"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_desc-mean_bold_to_EPItemplate_122"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_space-bold_desc-brain_mask_to_EPItemplate_126"
      },
      {
        "origin": "write_composite_xfm",
        "target": "nii_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "warp_desc-mean_bold_to_EPItemplate_122",
        "target": "nii_space-template_desc-mean_bold_125"
      },
      {
        "origin": "warp_space-bold_desc-brain_mask_to_EPItemplate_126",
        "target": "nii_space-template_desc-bold_mask_129"
      },
      {
        "origin": "qc_motion_57",
        "target": "nii_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "qc_motion_57",
        "target": "nii_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "qc_fd_75",
        "target": "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      },
      {
        "origin": "id_string_desc-preproc_bold_114",
        "target": "nii_desc-preproc_bold_114"
      },
      {
        "origin": "id_string_desc-preproc_bold_114",
        "target": "json_desc-preproc_bold_114"
      },
      {
        "origin": "nii_desc-preproc_bold_114",
        "target": "sinker_desc-preproc_bold_114"
      },
      {
        "origin": "json_desc-preproc_bold_114",
        "target": "sinker_desc-preproc_bold_114"
      },
      {
        "origin": "id_string_desc-mean_bold_47",
        "target": "nii_desc-mean_bold_47"
      },
      {
        "origin": "id_string_desc-mean_bold_47",
        "target": "json_desc-mean_bold_47"
      },
      {
        "origin": "nii_desc-mean_bold_47",
        "target": "sinker_desc-mean_bold_47"
      },
      {
        "origin": "json_desc-mean_bold_47",
        "target": "sinker_desc-mean_bold_47"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_57",
        "target": "nii_desc-movementParameters_motion_57"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_57",
        "target": "json_desc-movementParameters_motion_57"
      },
      {
        "origin": "nii_desc-movementParameters_motion_57",
        "target": "sinker_desc-movementParameters_motion_57"
      },
      {
        "origin": "json_desc-movementParameters_motion_57",
        "target": "sinker_desc-movementParameters_motion_57"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_60",
        "target": "nii_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_60",
        "target": "json_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "nii_space-bold_desc-brain_mask_60",
        "target": "sinker_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "json_space-bold_desc-brain_mask_60",
        "target": "sinker_space-bold_desc-brain_mask_60"
      },
      {
        "origin": "id_string_motion_79",
        "target": "nii_motion_79"
      },
      {
        "origin": "id_string_motion_79",
        "target": "json_motion_79"
      },
      {
        "origin": "nii_motion_79",
        "target": "sinker_motion_79"
      },
      {
        "origin": "json_motion_79",
        "target": "sinker_motion_79"
      },
      {
        "origin": "id_string_desc-summary_motion_80",
        "target": "nii_desc-summary_motion_80"
      },
      {
        "origin": "id_string_desc-summary_motion_80",
        "target": "json_desc-summary_motion_80"
      },
      {
        "origin": "nii_desc-summary_motion_80",
        "target": "sinker_desc-summary_motion_80"
      },
      {
        "origin": "json_desc-summary_motion_80",
        "target": "sinker_desc-summary_motion_80"
      },
      {
        "origin": "id_string_sbref_82",
        "target": "nii_sbref_82"
      },
      {
        "origin": "id_string_sbref_82",
        "target": "json_sbref_82"
      },
      {
        "origin": "nii_sbref_82",
        "target": "sinker_sbref_82"
      },
      {
        "origin": "json_sbref_82",
        "target": "sinker_sbref_82"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_86",
        "target": "nii_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_86",
        "target": "json_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "nii_space-template_desc-preproc_bold_86",
        "target": "sinker_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "json_space-template_desc-preproc_bold_86",
        "target": "sinker_space-template_desc-preproc_bold_86"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_121",
        "target": "nii_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_121",
        "target": "json_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "nii_space-template_desc-preproc_bold_121",
        "target": "sinker_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "json_space-template_desc-preproc_bold_121",
        "target": "sinker_space-template_desc-preproc_bold_121"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_xfm_87",
        "target": "nii_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_xfm_87",
        "target": "json_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "nii_from-bold_to-EPItemplate_mode-image_xfm_87",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "json_from-bold_to-EPItemplate_mode-image_xfm_87",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_xfm_87"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "target": "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "target": "json_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "nii_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "json_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_desc-linear_xfm_89"
      },
      {
        "origin": "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "target": "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "id_string_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "target": "json_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "nii_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "target": "sinker_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "json_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90",
        "target": "sinker_from-EPItemplate_to-bold_mode-image_desc-linear_xfm_90"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "target": "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "id_string_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "target": "json_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "nii_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "json_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91",
        "target": "sinker_from-bold_to-EPItemplate_mode-image_desc-nonlinear_xfm_91"
      },
      {
        "origin": "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "target": "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "id_string_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "target": "json_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "nii_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "target": "sinker_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "json_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92",
        "target": "sinker_from-EPItemplate_to-bold_mode-image_desc-nonlinear_xfm_92"
      },
      {
        "origin": "id_string_desc-confounds_timeseries_117",
        "target": "nii_desc-confounds_timeseries_117"
      },
      {
        "origin": "id_string_desc-confounds_timeseries_117",
        "target": "json_desc-confounds_timeseries_117"
      },
      {
        "origin": "nii_desc-confounds_timeseries_117",
        "target": "sinker_desc-confounds_timeseries_117"
      },
      {
        "origin": "json_desc-confounds_timeseries_117",
        "target": "sinker_desc-confounds_timeseries_117"
      },
      {
        "origin": "id_string_space-template_desc-mean_bold_125",
        "target": "nii_space-template_desc-mean_bold_125"
      },
      {
        "origin": "id_string_space-template_desc-mean_bold_125",
        "target": "json_space-template_desc-mean_bold_125"
      },
      {
        "origin": "nii_space-template_desc-mean_bold_125",
        "target": "sinker_space-template_desc-mean_bold_125"
      },
      {
        "origin": "json_space-template_desc-mean_bold_125",
        "target": "sinker_space-template_desc-mean_bold_125"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_129",
        "target": "nii_space-template_desc-bold_mask_129"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_129",
        "target": "json_space-template_desc-bold_mask_129"
      },
      {
        "origin": "nii_space-template_desc-bold_mask_129",
        "target": "sinker_space-template_desc-bold_mask_129"
      },
      {
        "origin": "json_space-template_desc-bold_mask_129",
        "target": "sinker_space-template_desc-bold_mask_129"
      },
      {
        "origin": "id_string_desc-movementParametersTrans_quality_133",
        "target": "nii_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "id_string_desc-movementParametersTrans_quality_133",
        "target": "json_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "nii_desc-movementParametersTrans_quality_133",
        "target": "sinker_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "json_desc-movementParametersTrans_quality_133",
        "target": "sinker_desc-movementParametersTrans_quality_133"
      },
      {
        "origin": "id_string_desc-movementParametersRot_quality_134",
        "target": "nii_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "id_string_desc-movementParametersRot_quality_134",
        "target": "json_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "nii_desc-movementParametersRot_quality_134",
        "target": "sinker_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "json_desc-movementParametersRot_quality_134",
        "target": "sinker_desc-movementParametersRot_quality_134"
      },
      {
        "origin": "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "target": "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      },
      {
        "origin": "id_string_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "target": "json_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      },
      {
        "origin": "nii_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "target": "sinker_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      },
      {
        "origin": "json_desc-framewiseDisplacementJenkinsonPlot_quality_135",
        "target": "sinker_desc-framewiseDisplacementJenkinsonPlot_quality_135"
      }
    ]
  }
}