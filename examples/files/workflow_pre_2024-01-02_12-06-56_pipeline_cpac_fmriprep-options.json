{
  "version": {
    "workflow": 1,
    "nipype": "1.8.6"
  },
  "meta": {
    "pipeline_name": "pipeline_cpac_fmriprep-options",
    "stage": "pre",
    "time": "2024-01-02T12:06:56.293466-05:00"
  },
  "workflow": {
    "name": "cpac_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
    "type": "workflow",
    "inputs": {
      "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options', 'scan': '[Undefined]', 'subject': 'sub-NDARINV2VY7YYNW'}, 'check_func_scan': {'func_scan_dct': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}, 'selectrest': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}, 'outputspec': {'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}, 'select_scan_params': {'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}, 's3_scan_params': {'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}}",
      "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'function_str': 'def get_scan_params(subject_id, scan, pipeconfig_start_indx,\\n                    pipeconfig_stop_indx, data_config_scan_params=None):\\n    \"\"\"\\n    Method to extract slice timing correction parameters\\n    and scan parameters.\\n\\n    Parameters\\n    ----------\\n    subject_id : str\\n        subject id\\n    scan : str\\n        scan id\\n    pipeconfig_start_indx : int\\n        starting volume index as provided in the pipeline config yaml file\\n    pipeconfig_stop_indx : int\\n        ending volume index as provided in the pipeline config yaml file\\n    data_config_scan_params : str\\n        file path to scan parameter JSON file listed in data config yaml file\\n\\n    Returns\\n    -------\\n    TR : a string\\n        TR value\\n    pattern : a string\\n        slice aquisition pattern string or file path\\n    ref_slice : an integer\\n        reference slice which is used to allign all other slices\\n    first_tr : an integer\\n        starting TR or starting volume index\\n    last_tr : an integer\\n        ending TR or ending volume index\\n    pe_direction : str\\n    effective_echo_spacing : float\\n    \"\"\"\\n\\n    import os\\n    import json\\n    import warnings\\n\\n    check2 = lambda val: val if val == None or val == \\'\\' or \\\\\\n                                isinstance(val, str) else int(val)\\n\\n    # initialize vars to empty\\n    TR = \\'\\'\\n    TE = None\\n    pattern = \\'\\'\\n    ref_slice = \\'\\'\\n    first_tr = \\'\\'\\n    last_tr = \\'\\'\\n    unit = \\'s\\'\\n    pe_direction = \\'\\'\\n    effective_echo_spacing = None\\n    template = None\\n\\n    if isinstance(pipeconfig_stop_indx, str):\\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\\n            pipeconfig_stop_indx = None\\n    if data_config_scan_params:\\n        if \".json\" in data_config_scan_params:\\n            if not os.path.exists(data_config_scan_params):\\n                err = \"\\\\n[!] WARNING: Scan parameters JSON file listed in \" \\\\\\n                      \"your data configuration file does not exist:\\\\n{0}\" \\\\\\n                      \"\\\\n\\\\n\".format(data_config_scan_params)\\n                raise Exception(err)\\n\\n            with open(data_config_scan_params, \"r\") as f:\\n                params_dct = json.load(f)\\n\\n            # get details from the configuration\\n            # if this is a JSON file, the key values are the BIDS format\\n            # standard\\n            # TODO: better handling of errant key values!!!\\n            if \"RepetitionTime\" in params_dct.keys():\\n                TR = float(check(params_dct, subject_id, scan,\\n                                 \"RepetitionTime\", False))\\n            if \"SliceTiming\" in params_dct.keys():\\n                pattern = str(check(params_dct, subject_id, scan,\\n                                    \"SliceTiming\", False))\\n            elif \"SliceAcquisitionOrder\" in params_dct.keys():\\n                pattern = str(check(params_dct, subject_id, scan,\\n                                    \"SliceAcquisitionOrder\", False))\\n            if \"PhaseEncodingDirection\" in params_dct.keys():\\n                pe_direction = str(check(params_dct, subject_id, scan,\\n                                         \"PhaseEncodingDirection\", False))\\n            try:\\n                \"EffectiveEchoSpacing\" in params_dct.keys()\\n                effective_echo_spacing = float(\\n                        check(params_dct, subject_id, scan,\\n                            \"EffectiveEchoSpacing\", False))\\n            except TypeError:\\n                pass\\n\\n        elif len(data_config_scan_params) > 0 and \\\\\\n                isinstance(data_config_scan_params, dict):\\n\\n            params_dct = data_config_scan_params\\n\\n            # TODO: better handling of errant key values!!!\\n            # TODO: use schema validator to deal with it\\n            # get details from the configuration\\n            try: \\n                TR = float(\\n                    try_fetch_parameter(\\n                        params_dct,\\n                        subject_id,\\n                        scan,\\n                        [\\'TR\\', \\'RepetitionTime\\']\\n                    )\\n                )\\n            except TypeError:\\n                TR = None\\n\\n            try: \\n                template = str(\\n                    try_fetch_parameter(\\n                        params_dct,\\n                        subject_id,\\n                        scan,\\n                        [\\'Template\\', \\'template\\']\\n                    )\\n                )\\n            except TypeError:\\n                template = None\\n\\n            pattern = str(\\n                try_fetch_parameter(\\n                    params_dct,\\n                    subject_id,\\n                    scan,\\n                    [\\'acquisition\\', \\'SliceTiming\\', \\'SliceAcquisitionOrder\\']\\n                )\\n            )\\n\\n            ref_slice = check(params_dct, subject_id, scan, \\'reference\\',\\n                              False)\\n            if ref_slice:\\n                ref_slice = int(ref_slice)\\n\\n            first_tr = check(params_dct, subject_id, scan, \\'first_TR\\', False)\\n            if first_tr:\\n                first_tr = check2(first_tr)\\n\\n            last_tr = check(params_dct, subject_id, scan, \\'last_TR\\', False)\\n            if last_tr:\\n                last_tr = check2(last_tr)\\n\\n            pe_direction = check(params_dct, subject_id, scan,\\n                                 \\'PhaseEncodingDirection\\', False)\\n            try:\\n                effective_echo_spacing = float(\\n                try_fetch_parameter(params_dct, subject_id, scan,\\n                                    [\"EffectiveEchoSpacing\"]))\\n            except TypeError:\\n                pass\\n\\n        else:\\n            err = \"\\\\n\\\\n[!] Could not read the format of the scan parameters \" \\\\\\n                  \"information included in the data configuration file for \" \\\\\\n                  f\"the participant {subject_id}.\\\\n\\\\n\"\\n            raise Exception(err)\\n    if first_tr == \\'\\' or first_tr is None:\\n        first_tr = pipeconfig_start_indx\\n\\n    if last_tr == \\'\\' or last_tr is None:\\n        last_tr = pipeconfig_stop_indx\\n\\n    unit = \\'s\\'\\n\\n    if \\'None\\' in pattern or \\'none\\' in pattern:\\n        pattern = None\\n\\n    \\'\\'\\'\\n    if not pattern:\\n        if pipeconfig_tpattern:\\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\\n                pattern = \\'\\'\\n            else:\\n                pattern = pipeconfig_tpattern\\n    \\'\\'\\'\\n\\n    # pattern can be one of a few keywords, a filename, or blank which\\n    # indicates that the images header information should be used\\n    tpattern_file = None\\n\\n    valid_patterns = [\\'alt+z\\', \\'altplus\\', \\'alt+z2\\', \\'alt-z\\', \\'altminus\\',\\n                      \\'alt-z2\\', \\'seq+z\\', \\'seqplus\\', \\'seq-z\\', \\'seqminus\\']\\n    if pattern and pattern != \\'\\' and pattern not in valid_patterns:\\n\\n        if isinstance(pattern, list) or \\\\\\n                (\"[\" in pattern and \"]\" in pattern and \",\" in pattern):\\n            # if we got the slice timing as a list, from a BIDS-format scan\\n            # parameters JSON file\\n\\n            if not isinstance(pattern, list):\\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\\n\\n            slice_timings = [float(x) for x in pattern]\\n\\n            # write out a tpattern file for AFNI 3dTShift\\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\\n            try:\\n                with open(tpattern_file, \"wt\") as f:\\n                    for time in slice_timings:\\n                        f.write(\"{0}\\\\n\".format(time).replace(\" \", \"\"))\\n            except:\\n                err = \"\\\\n[!] Could not write the slice timing file meant as \" \\\\\\n                      \"an input for AFNI 3dTshift (slice timing correction):\" \\\\\\n                      \"\\\\n{0}\\\\n\\\\n\".format(tpattern_file)\\n                raise Exception(err)\\n\\n        elif \".txt\" in pattern and not os.path.exists(pattern):\\n            # if the user provided an acquisition pattern text file for\\n            # 3dTshift\\n            raise Exception(\"Invalid Pattern file path {0}, Please provide \"\\n                            \"the correct path\".format(pattern))\\n        elif \".txt\" in pattern:\\n            with open(pattern, \"r\") as f:\\n                lines = f.readlines()\\n            if len(lines) < 2:\\n                raise Exception(\\'Invalid slice timing file format. The file \\'\\n                                \\'should contain only one value per row. Use \\'\\n                                \\'new line char as delimiter\\')\\n            tpattern_file = pattern\\n            slice_timings = [float(l.rstrip(\\'\\\\r\\\\n\\')) for l in lines]\\n        else:\\n            # this only happens if there is a non-path string set in the data\\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\\n            # the pattern is not listed in that list\\n            err = \"\\\\n[!] The slice timing acquisition pattern provided is \" \\\\\\n                  \"not supported by AFNI 3dTshift:\\\\n\" \\\\\\n                  \"{0}\\\\n\".format(str(pattern))\\n            raise Exception(err)\\n\\n        pattern = tpattern_file\\n\\n        slice_timings.sort()\\n        max_slice_offset = slice_timings[-1]\\n\\n        # checking if the unit of TR and slice timing match or not\\n        # if slice timing in ms convert TR to ms as well\\n        if TR and max_slice_offset > TR:\\n            warnings.warn(\"TR is in seconds and slice timings are in \"\\n                          \"milliseconds. Converting TR into milliseconds\")\\n            TR = TR * 1000\\n            print(\"New TR value {0} ms\".format(TR))\\n            unit = \\'ms\\'\\n\\n    else:\\n        # check to see, if TR is in milliseconds, convert it into seconds\\n        if TR and TR > 10:\\n            warnings.warn(\\'TR is in milliseconds, Converting it into seconds\\')\\n            TR = TR / 1000.0\\n            print(\"New TR value {0} s\".format(TR))\\n            unit = \\'s\\'\\n\\n    # swap back in\\n    if TR:\\n        tr = \"{0}{1}\".format(str(TR), unit)\\n    else:\\n        tr = \"\"\\n\\n    tpattern = pattern\\n    start_indx = first_tr\\n    stop_indx = last_tr\\n\\n    return (tr if tr else None,\\n            tpattern if tpattern else None,\\n            template if template else None,\\n            ref_slice,\\n            start_indx,\\n            stop_indx,\\n            pe_direction,\\n            effective_echo_spacing)\\n', 'pipeconfig_start_indx': 0, 'pipeconfig_stop_indx': None, 'pipeconfig_tpattern': '[Undefined]', 'pipeconfig_tr': '[Undefined]', 'subject_id': 'sub-NDARINV2VY7YYNW'}",
      "anat_T1w_gather_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'anat': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/anat/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_run-01_T1w.nii', 'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options', 'img_type': 'anat', 'subject': 'sub-NDARINV2VY7YYNW'}, 'check_for_s3': {'function_str': 'CPAC.utils.datasource.check_for_s3'}, 'outputspec': {}}",
      "anat_deoblique_0": "{'args': '[Undefined]', 'atrcopy': '[Undefined]', 'atrfloat': '[Undefined]', 'atrint': '[Undefined]', 'atrstring': '[Undefined]', 'deoblique': True, 'duporigin_file': '[Undefined]', 'environ': {}, 'nosaveatr': '[Undefined]', 'saveatr': '[Undefined]', 'space': '[Undefined]', 'xdel': '[Undefined]', 'xorigin': '[Undefined]', 'xyzscale': '[Undefined]', 'ydel': '[Undefined]', 'yorigin': '[Undefined]', 'zdel': '[Undefined]', 'zorigin': '[Undefined]'}",
      "anat_reorient_0": "{'args': '[Undefined]', 'environ': {}, 'master': '[Undefined]', 'num_threads': 1, 'orientation': 'RPI', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': '[Undefined]', 'voxel_size': '[Undefined]'}",
      "anat_skullstrip_ants": "{'inputnode': {'in_files': '[Undefined]', 'in_mask': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}, 'truncate_images_': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '0.01 0.999 256', 'operation': 'TruncateImageIntensity', 'output_image': '[Undefined]'}, 'copy_xform': {}, 'inu_n4_final_': {'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': True, 'shrink_factor': 4}, 'init_aff': {'args': '[Undefined]', 'convergence': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50270>, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50040>, 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374ab9fc0>, 'search_grid': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abaff0>, 'transform': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba570>, 'verbose': True}, 'norm': {'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-08, 1e-08, 1e-09], 'convergence_window_size': [10, 10, 15], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['MI', 'MI', ['CC', 'CC']], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0, 1.0, [0.5, 0.5]], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'anat_to_template', 'output_warped_image': True, 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [32, 32, [4, 4]], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.25, 0.25, [1.0, 1.0]], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Regular', 'Regular', ['None', 'None']], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]], 'sigma_units': ['vox', 'vox', 'vox'], 'smoothing_sigmas': [[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]], 'transform_parameters': [<generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb060>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abaea0>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb0d0>], 'transforms': ['Rigid', 'Affine', 'SyN'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': True, 'verbose': True, 'winsorize_lower_quantile': 0.025, 'winsorize_upper_quantile': 0.975, 'write_composite_transform': False}, 'map_brainmask': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'input_image_type': '[Undefined]', 'interpolation': 'Gaussian', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'inu_n4_': {'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': 4, 'weight_image': '[Undefined]'}, 'res_target': {'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba650>, 'output_image': '[Undefined]'}, 'res_tmpl': {'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_image': '/ants_template/oasis/T_template0.nii.gz', 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb610>, 'output_image': '[Undefined]'}, 'thr_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_mask': '[Undefined]', 'inside_value': 1.0, 'mode': '[Undefined]', 'num_threads': 1, 'num_thresholds': '[Undefined]', 'output_image': '[Undefined]', 'outside_value': 0.0, 'th_high': 1.0, 'th_low': 0.5}, 'dil_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'MD', 'output_image': '[Undefined]'}, 'get_brainmask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, 'apply_mask_': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'outputnode': {}, 'lap_target': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}, 'lap_tmpl': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op1': '/ants_template/oasis/T_template0.nii.gz', 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}, 'mrg_tmpl': {'axis': 'vstack', 'in1': '/ants_template/oasis/T_template0.nii.gz', 'no_flatten': False, 'ravel_inputs': False}, 'mrg_target': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'atropos_wf': {'inputnode': {'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}, 'copy_xform': {}, '03_pad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '01_atropos': {'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': True}, 'msk_conform': {'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensures the mask headers make sense and match those of the T1w\"\"\"\\n    from pathlib import Path\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nb.load(in_reference)\\n    nii = nb.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\\'int16\\')\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \\'_maths\\' in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \\'\\'.join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\\'_maths\\')[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\\'_mask\\',\\n                               newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\\'int16\\'), ref.affine,\\n                  hdr).to_filename(out_file)\\n    return out_file\\n'}, '02_pad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '04_sel_labels': {'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [3, 2, 1]}, '05_get_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '06_get_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '07_fill_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '08_mult_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}, '09_relabel_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}, '10_me_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}, '11_add_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '12_relabel_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}, '13_add_gm_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '14_sel_labels2': {'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [2, 3]}, '15_add_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '16_me_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}, '17_comp_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '18_md_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}, '19_fill_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '20_add_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '21_md_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}, '22_me_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}, '23_depad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '24_depad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '26_depad_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '25_depad_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '27_depad_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, 'merge_tpms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'outputnode': {}}, 'sel_wm': {'index': [2]}}",
      "brain_extraction_34": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*step(b)', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
      "ANTS_T1_to_template_40": "{'inputspec': {'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}, 'anat_mni_ants_register': {'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}, 'write_composite_linear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'write_composite_invlinear_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'inverse_transform_flags': {'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}, 'write_composite_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'write_composite_inv_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'check_all_inv_transforms': {'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}, 'inverse_all_transform_flags': {'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}}",
      "resampled_T1w-brain-template": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'template_name': 'T1w-brain-template'}",
      "resampled_T1w-template": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'template_name': 'T1w-template'}",
      "resampled_T1w-brain-template-mask": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '1mm', 'tag': 'resolution_for_anat', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'template_name': 'T1w-brain-template-mask'}",
      "warp_wholehead_T1w_to_T1template_53": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_wholehead_T1w_to_T1template_53': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'outputspec': {}}",
      "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "warp_T1mask_to_T1template_57": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_T1mask_to_T1template_57': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'outputspec': {}}",
      "segment_61": "{'args': '[Undefined]', 'bias_iters': '[Undefined]', 'bias_lowpass': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'hyper': '[Undefined]', 'img_type': 1, 'init_seg_smooth': '[Undefined]', 'init_transform': '[Undefined]', 'iters_afterbias': '[Undefined]', 'manual_seg': '[Undefined]', 'mixel_smooth': '[Undefined]', 'no_bias': '[Undefined]', 'no_pve': '[Undefined]', 'number_classes': '[Undefined]', 'other_priors': '[Undefined]', 'out_basename': 'segment', 'output_biascorrected': '[Undefined]', 'output_biasfield': '[Undefined]', 'output_type': 'NIFTI_GZ', 'probability_maps': True, 'segment_iters': '[Undefined]', 'segments': True, 'use_priors': '[Undefined]', 'verbose': '[Undefined]'}",
      "get_pve_csf_61": "{'args': '-thr 0.5 -uthr 1.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "get_pve_gm_61": "{'args': '-thr 1.5 -uthr 2.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "get_pve_wm_61": "{'args': '-thr 2.5 -uthr 3.5 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "CSF_61": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_CSF_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_CSF_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "GM_61": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_GM_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_GM_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "WM_61": "{'inputspec': {'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}, 'threshold_segmentmap_WM_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'binarize_WM_61': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'outputspec': {'probability_tissue_map': '[Undefined]'}}",
      "get_csf_61": "{'function_str': 'def pick_wm_prob_0(probability_maps):\\n    \"\"\"Returns the csf probability map from the list of segmented\\n    probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n    \"\"\"\\n    if isinstance(probability_maps, list):\\n        if len(probability_maps) == 1:\\n            probability_maps = probability_maps[0]\\n        for filename in probability_maps:\\n            if filename.endswith(\"prob_0.nii.gz\"):\\n                return filename\\n    return None\\n'}",
      "func_deoblique_2": "{'args': '[Undefined]', 'atrcopy': '[Undefined]', 'atrfloat': '[Undefined]', 'atrint': '[Undefined]', 'atrstring': '[Undefined]', 'deoblique': True, 'duporigin_file': '[Undefined]', 'environ': {}, 'nosaveatr': '[Undefined]', 'saveatr': '[Undefined]', 'space': '[Undefined]', 'xdel': '[Undefined]', 'xorigin': '[Undefined]', 'xyzscale': '[Undefined]', 'ydel': '[Undefined]', 'yorigin': '[Undefined]', 'zdel': '[Undefined]', 'zorigin': '[Undefined]'}",
      "func_reorient_2": "{'args': '[Undefined]', 'environ': {}, 'master': '[Undefined]', 'num_threads': 1, 'orientation': 'RPI', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'resample_mode': '[Undefined]', 'voxel_size': '[Undefined]'}",
      "edit_func_79": "{'inputspec': {'func': '[Undefined]', 'start_idx': 0, 'stop_idx': None}, 'func_get_idx': {'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"\\n    Method to get the first and the last slice for\\n    the functional run. It verifies the user specified\\n    first and last slice. If the values are not valid, it\\n    calculates and returns the very first and the last slice\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:\\n        raise TypeError(\\'Input nifti file: %s is not a 4D file\\' % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx == None) or (int(start_idx) < 0) or (\\n        int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}, 'func_drop_trs': {'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}, 'outputspec': {}}",
      "func_get_fmriprep_ref_82": "{'function_str': 'def estimate_reference_image(in_file):\\n    \"\"\"fMRIPrep-style BOLD reference\\n    Ref: https://github.com/nipreps/niworkflows/blob/maint/1.3.x/niworkflows/interfaces/registration.py#L446-L549\\n    \"\"\"\\n    import os\\n    import numpy as np\\n    import nibabel as nb\\n\\n    ref_input = [in_file]\\n    mc_out_file = \\'bold_mc.nii.gz\\'\\n\\n    # Build the nibabel spatial image we will work with\\n    ref_im = []\\n    for im_i in ref_input:\\n        max_new_volumes = 50 - len(ref_im)\\n        if max_new_volumes <= 0:\\n            break\\n        nib_i = nb.squeeze_image(nb.load(im_i))\\n        if nib_i.dataobj.ndim == 3:\\n            ref_im.append(nib_i)\\n        elif nib_i.dataobj.ndim == 4:\\n            ref_im += nb.four_to_three(nib_i.slicer[..., :max_new_volumes])\\n    ref_im = nb.squeeze_image(nb.concat_images(ref_im))\\n\\n    out_file = os.path.join(os.getcwd(), \"ref_bold.nii.gz\")\\n\\n    # Slicing may induce inconsistencies with shape-dependent values in extensions.\\n    # For now, remove all. If this turns out to be a mistake, we can select extensions\\n    # that don\\'t break pipeline stages.\\n    ref_im.header.extensions.clear()\\n\\n    if ref_im.shape[-1] > 40:\\n        ref_im = nb.Nifti1Image(\\n            ref_im.dataobj[:, :, :, 20:40], ref_im.affine, ref_im.header\\n        )\\n\\n    ref_name = os.path.join(os.getcwd(), \"slice.nii.gz\")\\n    ref_im.to_filename(ref_name)\\n    os.system(\\'3dvolreg -Fourier -twopass -zpad 4 \\'\\n              f\\'-prefix {mc_out_file} {ref_name}\\')\\n\\n    mc_slice_nii = nb.load(mc_out_file)\\n\\n    median_image_data = np.median(mc_slice_nii.get_fdata(), axis=3)\\n\\n    nb.Nifti1Image(median_image_data, ref_im.affine, ref_im.header\\n                   ).to_filename(out_file)\\n\\n    return out_file\\n'}",
      "func_motion_correct_mcflirt_85": "{'args': '[Undefined]', 'bins': '[Undefined]', 'cost': '[Undefined]', 'dof': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'init': '[Undefined]', 'interpolation': '[Undefined]', 'mean_vol': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'ref_vol': '[Undefined]', 'rotation': '[Undefined]', 'save_mats': True, 'save_plots': True, 'save_rms': True, 'scaling': '[Undefined]', 'smooth': '[Undefined]', 'stages': '[Undefined]', 'stats_imgs': '[Undefined]', 'use_contour': '[Undefined]', 'use_gradient': '[Undefined]'}",
      "norm_motion_params_85": "{'function_str': 'def normalize_motion_parameters(in_file):\\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\\n    import os\\n    import numpy as np\\n\\n    motion_params = np.genfromtxt(in_file).T\\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\\n                               motion_params[0, :] * 180 / np.pi,\\n                               -motion_params[1, :] * 180 / np.pi,\\n                               motion_params[5, :],\\n                               motion_params[3, :],\\n                               -motion_params[4, :]))\\n    motion_params = np.transpose(motion_params)\\n\\n    out_file = os.path.join(os.getcwd(), \\'motion_params.tsv\\')\\n    np.savetxt(out_file, motion_params)\\n\\n    return out_file\\n'}",
      "get_mcflirt_rms_abs_85": "{'function_str': \"def get_mcflirt_rms_abs(rms_files):\\n    for path in rms_files:\\n        if 'abs.rms' in path:\\n            abs_file = path\\n        if 'rel.rms' in path:\\n            rels_file = path\\n    return abs_file, rels_file\\n\"}",
      "func_slice_timing_correction_92": "{'inputspec': {'func_ts': '[Undefined]', 'tpattern': '[Undefined]', 'tr': '[Undefined]'}, 'slice_timing': {'args': '[Undefined]', 'environ': {}, 'ignore': '[Undefined]', 'interp': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'rltplus': '[Undefined]', 'slice_encoding_direction': 'k', 'slice_timing': '[Undefined]', 'tslice': '[Undefined]', 'tzero': '[Undefined]'}, 'outputspec': {}}",
      "func_mean_95": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "func_motion_correct_mcflirt_98": "{'args': '[Undefined]', 'bins': '[Undefined]', 'cost': '[Undefined]', 'dof': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'init': '[Undefined]', 'interpolation': '[Undefined]', 'mean_vol': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'ref_vol': '[Undefined]', 'rotation': '[Undefined]', 'save_mats': True, 'save_plots': True, 'save_rms': True, 'scaling': '[Undefined]', 'smooth': '[Undefined]', 'stages': '[Undefined]', 'stats_imgs': '[Undefined]', 'use_contour': '[Undefined]', 'use_gradient': '[Undefined]'}",
      "norm_motion_params_98": "{'function_str': 'def normalize_motion_parameters(in_file):\\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\\n    import os\\n    import numpy as np\\n\\n    motion_params = np.genfromtxt(in_file).T\\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\\n                               motion_params[0, :] * 180 / np.pi,\\n                               -motion_params[1, :] * 180 / np.pi,\\n                               motion_params[5, :],\\n                               motion_params[3, :],\\n                               -motion_params[4, :]))\\n    motion_params = np.transpose(motion_params)\\n\\n    out_file = os.path.join(os.getcwd(), \\'motion_params.tsv\\')\\n    np.savetxt(out_file, motion_params)\\n\\n    return out_file\\n'}",
      "get_mcflirt_rms_abs_98": "{'function_str': \"def get_mcflirt_rms_abs(rms_files):\\n    for path in rms_files:\\n        if 'abs.rms' in path:\\n            abs_file = path\\n        if 'rel.rms' in path:\\n            rels_file = path\\n    return abs_file, rels_file\\n\"}",
      "resampled_FSL-AFNI-bold-ref": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '3.438mmx3.438mmx3.4mm', 'tag': 'func_preproc_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'template_name': 'FSL-AFNI-bold-ref'}",
      "init_aff_102": "{'args': '[Undefined]', 'convergence': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abaf80>, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abaf10>, 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb8b0>, 'search_grid': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb990>, 'transform': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb920>, 'verbose': True}",
      "resampled_FSL-AFNI-brain-mask": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '3.438mmx3.438mmx3.4mm', 'tag': 'func_preproc_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'template_name': 'FSL-AFNI-brain-mask'}",
      "norm_102": "{'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-09], 'convergence_window_size': [10], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'fixed_image_masks': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['Mattes'], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[200]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'transform', 'output_warped_image': '[Undefined]', 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [64], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.2], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Random', 'Random'], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[2]], 'sigma_units': ['mm', 'mm', 'mm'], 'smoothing_sigmas': [[2.0]], 'transform_parameters': [<generator object _serialize_inout.<locals>.<genexpr> at 0x155374abba00>], 'transforms': ['Affine'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': [True], 'verbose': False, 'winsorize_lower_quantile': 0.05, 'winsorize_upper_quantile': 0.98, 'write_composite_transform': False}",
      "resampled_FSL-AFNI-brain-probseg": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '3.438mmx3.438mmx3.4mm', 'tag': 'func_preproc_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz', 'template_name': 'FSL-AFNI-brain-probseg'}",
      "map_brainmask_102": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'BSpline', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "binarize_mask_102": "{'args': '-thr 0.85 -bin', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "pre_mask_dilate_102": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': 'char', 'kernel_file': '[Undefined]', 'kernel_shape': 'sphere', 'kernel_size': 3.0, 'nan2zeros': '[Undefined]', 'operation': 'max', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "print_header_102": "{'args': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'what_information': 4}",
      "set_direction_102": "{'args': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'num_threads': 1}",
      "n4_correct_102": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': '[Undefined]', 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'n_iterations': '[Undefined]', 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': '[Undefined]', 'weight_image': '[Undefined]'}",
      "skullstrip_first_pass_102": "{'args': '[Undefined]', 'center': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'frac': 0.2, 'functional': False, 'mask': True, 'mesh': '[Undefined]', 'no_output': '[Undefined]', 'out_file': '[Undefined]', 'outline': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding': '[Undefined]', 'radius': '[Undefined]', 'reduce_bias': '[Undefined]', 'remove_eyes': '[Undefined]', 'robust': '[Undefined]', 'skull': '[Undefined]', 'surfaces': '[Undefined]', 't2_guided': '[Undefined]', 'threshold': '[Undefined]', 'vertical_gradient': '[Undefined]'}",
      "skullstrip_first_dilate_102": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': 'char', 'kernel_file': '[Undefined]', 'kernel_shape': 'sphere', 'kernel_size': 6.0, 'nan2zeros': '[Undefined]', 'operation': 'max', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "skullstrip_first_mask_102": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "unifize_102": "{'args': '-clfrac 0.2 -rbt 18.3 65.0 90.0', 'cl_frac': '[Undefined]', 'environ': {}, 'epi': '[Undefined]', 'gm': '[Undefined]', 'no_duplo': '[Undefined]', 'num_threads': 1, 'out_file': 'uni.nii.gz', 'outputtype': 'NIFTI_GZ', 'quiet': '[Undefined]', 'rbt': '[Undefined]', 'scale_file': '[Undefined]', 't2': True, 't2_up': '[Undefined]', 'urad': '[Undefined]'}",
      "skullstrip_second_pass_102": "{'args': '[Undefined]', 'brain_file': '[Undefined]', 'clfrac': '[Undefined]', 'dilate': 1, 'environ': {}, 'erode': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
      "combine_masks_102": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'operand_value': '[Undefined]', 'operation': 'mul', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "extract_ref_brain_bold_102": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "func_extract_brain_109": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
      "gen_motion_stats_113": "{'inputspec': {'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}, 'cal_DVARS': {'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}, 'cal_DVARS_strip': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}, 'outputspec': {}, 'calculate_FD': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}, 'calculate_FDJ': {'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}, 'get_all_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}, 'calc_motion_parameters': {'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}, 'calc_power_parameters': {'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}}",
      "func_to_anat_FLIRT_130": "{'inputspec': {'anat': '[Undefined]', 'dof': 6, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'interp': 'trilinear'}, 'linear_func_to_anat': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': 'corratio', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'outputspec': {}}",
      "func_to_anat_bbreg_130": "{'inputspec': {'anat': '[Undefined]', 'anat_wm_segmentation': '[Undefined]', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch', 'bbr_wm_mask_args': '-bin', 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'linear_reg_matrix': '[Undefined]'}, 'wm_bb_mask': {'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}, 'bbreg_func_to_anat': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': 6, 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'outputspec': {}}",
      "create_func_to_T1wtemplate_xfm_139": "{'inputspec': {'T1w-brain-template_funcreg': '[Undefined]', 'T1w_to_template_xfm': '[Undefined]', 'blip_warp': '[Undefined]', 'coreg_xfm': '[Undefined]', 'input_brain': '[Undefined]', 'mean_bold': '[Undefined]', 'template_to_T1w_xfm': '[Undefined]'}, 'fsl_reg_2_itk': {'args': '[Undefined]', 'environ': {}, 'fsl2ras': True, 'itk_transform': True}, 'change_transform_type': {'function_str': 'def change_itk_transform_type(input_affine_file):\\n    \"\"\"\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \\'Transform Type\\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \\'updated_affine.txt\\'\\n    \"\"\"\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n        for line in f:\\n            if \\'Transform:\\' in line:\\n                if \\'MatrixOffsetTransformBase_double_3_3\\' in line:\\n                    transform_line = \\'Transform: AffineTransform_double_3_3\\\\n\\'\\n                    new_file_lines.append(transform_line)\\n            else:\\n                new_file_lines.append(line)\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \\'updated_affine.txt\\')\\n\\n    with open(updated_affine_file, \\'wt\\') as f:\\n        for line in new_file_lines:\\n            f.write(line)\\n\\n    return updated_affine_file\\n'}, 'write_composite_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_all_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'write_composite_inv_xfm': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}, 'collect_inv_transforms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}}",
      "resampled_T1w-brain-template-funcreg": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '3.438mmx3.438mmx3.4mm', 'tag': 'func_preproc_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'template_name': 'T1w-brain-template-funcreg'}",
      "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "erode_T1w_mask_147": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': '[Undefined]', 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'outputspec': {}}",
      "erode_CSF_mask_150": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'erode_mask': {'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \\'segment_tissue_mask.nii.gz\\')\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}, 'outputspec': {}}",
      "erode_WM_mask_153": "{'inputspec': {'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.6, 'mask': '[Undefined]', 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}, 'erode_mask': {'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \\'segment_tissue_mask.nii.gz\\')\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}, 'outputspec': {}}",
      "nuisance_regressors_Regressor_1_156": "{'inputspec': {'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}, 'functional_mean': {'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}, 'Anatomical_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'Functional_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'WhiteMatter_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'WhiteMatter_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'WhiteMatter_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'CerebrospinalFluid_2mm_flirt': {'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'CerebrospinalFluid_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'CerebrospinalFluid_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'CerebrospinalFluid_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'aCompCor_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'aCompCor_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'aCompCor_cosine_filter': {'function_str': 'def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode=\\'error\\'):\\n    \"\"\"\\n    input_image_path: string\\n            Bold image to be filtered.\\n    timestep: float\\n            \\'Repetition time (TR) of series (in sec) - derived from image header if unspecified\\'\\n    period_cut: float\\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\\n\\n    \"\"\"\\n\\n    from CPAC.nuisance.utils.compcor import _full_rank\\n    from CPAC.nuisance.utils.compcor import _cosine_drift\\n\\n    input_img = nb.load(input_image_path)\\n    input_data = input_img.get_fdata()\\n\\n    datashape = input_data.shape\\n    timepoints = datashape[axis]\\n    if datashape[0] == 0 and failure_mode != \\'error\\':\\n        return input_data, np.array([])\\n\\n    input_data = input_data.reshape((-1, timepoints))\\n\\n    frametimes = timestep * np.arange(timepoints)\\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\\n\\n    betas = np.linalg.lstsq(X, input_data.T)[0]\\n\\n    if not remove_mean:\\n        X = X[:, :-1]\\n        betas = betas[:-1]\\n\\n    residuals = input_data - X.dot(betas).T\\n\\n    output_data = residuals.reshape(datashape)\\n\\n    hdr = input_img.header\\n    output_img = nb.Nifti1Image(output_data, header=hdr,\\n                                affine=input_img.affine)\\n\\n    file_name = input_image_path[input_image_path.rindex(\\'/\\')+1:]\\n\\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\\n\\n    output_img.to_filename(cosfiltered_img)\\n\\n    return cosfiltered_img\\n'}, 'aCompCor_tr_string2float': {'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}, 'aCompCor_std': {'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'aCompCor_standardized': {'args': '[Undefined]', 'environ': {}, 'expr': 'a/b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}, 'aCompCor_pc': {'args': '-vmean -nscale', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'pcs': 5, 'pcs_file': '[Undefined]'}, 'tcompcor': {'inputspec': {'functional_file_path': '[Undefined]', 'mask_file_path': '[Undefined]'}, 'detrend': {'args': '-polort 2', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'std': {'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'var': {'args': '[Undefined]', 'environ': {}, 'expr': 'a*a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}, 'slice_mapper_list': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'slice_mask_mapper_list': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'slice_mapper': {}, 'threshold_value_': {'function_str': 'CPAC.nuisance.utils.compute_pct_threshold', 'threshold_pct': 5.0}, 'threshold_': {'args': '-bin', 'direction': 'below', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ', 'use_nonzero_voxels': '[Undefined]', 'use_robust_range': '[Undefined]'}, 'merge_slice_masks': {'args': '[Undefined]', 'dimension': 'z', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}, 'outputspec': {}}, 'anat_to_func_linear_xfm': {'args': '[Undefined]', 'concat_xfm': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fix_scale_skew': '[Undefined]', 'in_file2': '[Undefined]', 'invert_xfm': True, 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ'}, 'Functional_eroded_mask': {'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}, 'tCompCor_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'tCompCor_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'tCompCor_cosine_filter': {'function_str': 'def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode=\\'error\\'):\\n    \"\"\"\\n    input_image_path: string\\n            Bold image to be filtered.\\n    timestep: float\\n            \\'Repetition time (TR) of series (in sec) - derived from image header if unspecified\\'\\n    period_cut: float\\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\\n\\n    \"\"\"\\n\\n    from CPAC.nuisance.utils.compcor import _full_rank\\n    from CPAC.nuisance.utils.compcor import _cosine_drift\\n\\n    input_img = nb.load(input_image_path)\\n    input_data = input_img.get_fdata()\\n\\n    datashape = input_data.shape\\n    timepoints = datashape[axis]\\n    if datashape[0] == 0 and failure_mode != \\'error\\':\\n        return input_data, np.array([])\\n\\n    input_data = input_data.reshape((-1, timepoints))\\n\\n    frametimes = timestep * np.arange(timepoints)\\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\\n\\n    betas = np.linalg.lstsq(X, input_data.T)[0]\\n\\n    if not remove_mean:\\n        X = X[:, :-1]\\n        betas = betas[:-1]\\n\\n    residuals = input_data - X.dot(betas).T\\n\\n    output_data = residuals.reshape(datashape)\\n\\n    hdr = input_img.header\\n    output_img = nb.Nifti1Image(output_data, header=hdr,\\n                                affine=input_img.affine)\\n\\n    file_name = input_image_path[input_image_path.rindex(\\'/\\')+1:]\\n\\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\\n\\n    output_img.to_filename(cosfiltered_img)\\n\\n    return cosfiltered_img\\n'}, 'tCompCor_tr_string2float': {'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}, 'tCompCor_std': {'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'tCompCor_standardized': {'args': '[Undefined]', 'environ': {}, 'expr': 'a/b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}, 'tCompCor_pc': {'args': '-vmean -nscale', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'pcs': 5, 'pcs_file': '[Undefined]'}, 'GlobalSignal_merge_masks': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'GlobalSignal_union_masks': {'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}, 'GlobalSignal_mean': {'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}, 'build_nuisance_regressors': {'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT', 'by_slice': False}}}, 'outputspec': {}}",
      "anat_to_func_linear_xfm_Regressor_1_156": "{'args': '[Undefined]', 'concat_xfm': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fix_scale_skew': '[Undefined]', 'in_file2': '[Undefined]', 'invert_xfm': True, 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image': '[Undefined]', 'input_image_type': 0, 'interpolation': 'Linear', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True, 'reference_image': '[Undefined]', 'transforms': '[Undefined]'}",
      "convert_bbr2itk_186": "{'function_str': \"def run_c3d(reference_file, source_file, transform_file):\\n\\n    import os\\n    import subprocess\\n\\n    itk_transform = os.path.join(os.getcwd(), 'affine.txt')\\n\\n    cmd = ['c3d_affine_tool', '-ref', reference_file, '-src',\\n            source_file, transform_file, '-fsl2ras', '-oitk', itk_transform]\\n    retcode = subprocess.check_output(cmd)\\n\\n    return itk_transform\\n\"}",
      "split_func_186": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'out_base_name': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "convert_motionxfm2itk_186_": "{'function_str': \"def run_c3d(reference_file, source_file, transform_file):\\n\\n    import os\\n    import subprocess\\n\\n    itk_transform = os.path.join(os.getcwd(), 'affine.txt')\\n\\n    cmd = ['c3d_affine_tool', '-ref', reference_file, '-src',\\n            source_file, transform_file, '-fsl2ras', '-oitk', itk_transform]\\n    retcode = subprocess.check_output(cmd)\\n\\n    return itk_transform\\n\"}",
      "collectxfm_func_to_standard_186_": "{'axis': 'vstack', 'in3': 'identity', 'no_flatten': False, 'ravel_inputs': False}",
      "applyxfm_func_to_standard_186_": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "applyxfm_derivfunc_to_standard_186_": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image_type': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "resampled_T1w-brain-template-deriv": "{'function_str': 'CPAC.utils.datasource.resolve_resolution', 'resolution': '3.438mmx3.438mmx3.4mm', 'tag': 'func_derivative_outputs', 'template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'template_name': 'T1w-brain-template-deriv'}",
      "merge_func_to_standard_186": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}",
      "merge_derivfunc_to_standard_186": "{'args': '[Undefined]', 'dimension': 't', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}",
      "applyxfm_func_mask_to_standard_186": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'MultiLabel', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "collectxfm_func_mask_to_standard_186": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
      "applyxfm_deriv_mask_to_standard_186": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation': 'MultiLabel', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
      "collectxfm_deriv_mask_to_standard_186": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
      "get_func_brain_to_standard_186": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
      "warp_funcreg-sbref_to_T1wtemplate_204": "{'inputspec': {'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}, 'apply_warp_warp_funcreg-sbref_to_T1wtemplate_204': {'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}, 'interp_string': {'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}, 'single_ants_xfm_to_list': {'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}, 'outputspec': {}}",
      "id_string_desc-preproc_T1w_37": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-preproc_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-preproc_T1w_37": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-preproc_T1w_37": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], 'Sources': ['desc-head_T1w', 'desc-preproc_T1w', 'space-T1w_desc-brain_mask'], 'SkullStripped': 'True', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-preproc_T1w_37": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-head_T1w_39": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-head_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-head_T1w_39": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-head_T1w_39": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'Sources': ['desc-head_T1w', 'desc-preproc_T1w', 'space-T1w_desc-brain_mask'], 'SkullStripped': 'False', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-head_T1w_39": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_desc-brain_mask_32": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_desc-brain_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-T1w_desc-brain_mask_32": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_desc-brain_mask_32": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'RawSources': ['T1w'], 'CpacProvenance': ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'Sources': ['desc-preproc_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-T1w_desc-brain_mask_32": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-preproc_T1w_46": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-preproc_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-preproc_T1w_46": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
      "json_space-template_desc-preproc_T1w_46": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'space-template_desc-preproc_T1w:register_ANTs_anat_to_template'], 'SkullStripped': 'False', 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'The preprocessed T1w brain transformed to template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-preproc_T1w_46": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_xfm_47": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-T1w_to-template_mode-image_xfm_47": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_xfm_47": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Composite (affine + warp field) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-T1w_to-template_mode-image_xfm_47": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_xfm_48": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-template_to-T1w_mode-image_xfm_48": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_xfm_48": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Composite (affine + warp field) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-template_to-T1w_mode-image_xfm_48": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_desc-linear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Linear (affine) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_desc-linear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Linear (affine) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-T1w_to-template_mode-image_desc-nonlinear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-nonlinear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Nonlinear (warp field) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-T1w_mode-image_desc-nonlinear_xfm', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-nonlinear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Nonlinear (warp field) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-head_T1w_56": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-head_T1w', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-head_T1w_56": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-head_T1w_56": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], ['T1w-template:template_resample'], 'space-template_desc-head_T1w:transform_whole_head_T1w_to_T1template'], 'SkullStripped': 'False', 'Sources': ['desc-head_T1w', 'from-T1w_to-template_mode-image_xfm', 'T1w-template'], 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-head_T1w_56": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-brain_mask_60": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-brain_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-brain_mask_60": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-brain_mask_60": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], ['T1w-template:template_resample'], 'space-template_desc-brain_mask:transform_T1mask_to_T1template'], 'Sources': ['space-T1w_desc-brain_mask', 'from-T1w_to-template_mode-image_xfm', 'T1w-template'], 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_desc-brain_mask_60": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_probseg_67": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-CSF_probseg_67": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_probseg_67": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-CSF_probseg_67": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_probseg_68": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-GM_probseg_68": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_probseg_68": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-GM_probseg_68": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_probseg_69": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_probseg', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-WM_probseg_69": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_probseg_69": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-WM_probseg_69": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_mask_70": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-CSF_mask_70": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_mask_70": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-CSF_mask_70": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_mask_71": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-GM_mask_71": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_mask_71": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-GM_mask_71": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_mask_72": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-WM_mask_72": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_mask_72": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-WM_mask_72": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_desc-preproc_mask_73": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-CSF_desc-preproc_mask_73": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_desc-preproc_mask_73": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-CSF_desc-preproc_mask_73": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-GM_desc-preproc_mask_74": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-GM_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-GM_desc-preproc_mask_74": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-GM_desc-preproc_mask_74": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-GM_desc-preproc_mask_74": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_desc-preproc_mask_75": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_desc-preproc_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-WM_desc-preproc_mask_75": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_desc-preproc_mask_75": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-WM_desc-preproc_mask_75": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-preproc_bold_185": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-preproc_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-preproc_bold_185": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-preproc_bold_185": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], ['bold:func_ingress'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], ['pe-direction:func_metadata_ingress'], 'desc-preproc_bold:apply_phasediff_to_timeseries_separately_single_step_resampling_from_stc'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], ['bold:func_ingress'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], 'desc-preproc_bold:apply_blip_to_timeseries_separately_single_step_resampling_from_stc'], 'CpacVariant': {'bold': ['apply_phasediff_to_timeseries_separately_single_step_resampling_from_stc', 'apply_blip_to_timeseries_separately_single_step_resampling_from_stc']}, 'SkullStripped': True, 'Sources': ['sbref', 'desc-preproc_bold', 'desc-stc_bold', 'bold', 'from-bold_to-template_mode-image_xfm'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-preproc_bold_185": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-movementParameters_motion_90": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-movementParameters_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-movementParameters_motion_90": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-movementParameters_motion_90": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], 'Sources': ['desc-preproc_bold', 'motion-basefile'], 'Description': \"Each line contains for one timepoint a 6-DOF rigid transform parameters in the format defined by AFNI's 3dvolreg: [roll, pitch, yaw, superior displacement, left displacement, posterior displacement]. Rotation parameters are in degrees counterclockwise, and translation parameters are in millimeters.\", 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-movementParameters_motion_90": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-mean_bold_97": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-mean_bold', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-mean_bold_97": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-mean_bold_97": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time', 'desc-mean_bold:func_mean'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-mean_bold_97": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-bold_desc-brain_mask_107": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-bold_desc-brain_mask', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-bold_desc-brain_mask_107": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-bold_desc-brain_mask_107": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'Sources': ['motion-basefile', 'desc-preproc_bold', 'FSL-AFNI-bold-ref', 'FSL-AFNI-brain-mask', 'FSL-AFNI-brain-probseg'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-bold_desc-brain_mask_107": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_motion_127": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_motion_127": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_motion_127": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_motion_127": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-summary_motion_128": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-summary_motion', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-summary_motion_128": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-summary_motion_128": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'desc-summary_motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-summary_motion_128": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_sbref_129": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'sbref', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_sbref_129": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_sbref_129": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], 'Sources': ['desc-ref_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_sbref_129": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_sbref_137": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_sbref', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-T1w_sbref_137": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_sbref_137": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'space-T1w_sbref:coregistration'], 'Sources': ['sbref', 'desc-motion_bold', 'pe-direction', 'desc-preproc_T1w', 'label-WM_probseg', 'label-WM_pveseg', 'desc-head_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-T1w_sbref_137": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], 'Sources': ['sbref', 'desc-motion_bold', 'pe-direction', 'desc-preproc_T1w', 'label-WM_probseg', 'label-WM_pveseg', 'desc-head_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-bold_to-template_mode-image_xfm_145": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-bold_to-template_mode-image_xfm', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-bold_to-template_mode-image_xfm_145": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-bold_to-template_mode-image_xfm_145": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], 'Sources': ['sbref', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_xfm', 'from-template_to-T1w_mode-image_xfm', 'desc-brain_T1w', 'T1w-brain-template-funcreg'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-bold_to-template_mode-image_xfm_145": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_from-template_to-bold_mode-image_xfm_146": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'from-template_to-bold_mode-image_xfm', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_from-template_to-bold_mode-image_xfm_146": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_from-template_to-bold_mode-image_xfm_146": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-template_to-bold_mode-image_xfm:create_func_to_T1template_xfm'], 'Sources': ['sbref', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_xfm', 'from-template_to-T1w_mode-image_xfm', 'desc-brain_T1w', 'T1w-brain-template-funcreg'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_from-template_to-bold_mode-image_xfm_146": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-T1w_desc-eroded_mask_149": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-T1w_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-T1w_desc-eroded_mask_149": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-T1w_desc-eroded_mask_149": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'space-T1w_desc-eroded_mask:erode_mask_T1w'], 'Sources': ['space-T1w_desc-brain_mask', 'label-CSF_desc-preproc_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-T1w_desc-eroded_mask_149": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-CSF_desc-eroded_mask_152": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-CSF_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-CSF_desc-eroded_mask_152": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-CSF_desc-eroded_mask_152": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-CSF_desc-eroded_mask:erode_mask_CSF'], 'Sources': ['label-CSF_desc-preproc_mask', 'space-T1w_desc-brain_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-CSF_desc-eroded_mask_152": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_label-WM_desc-eroded_mask_155": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'label-WM_desc-eroded_mask', 'scan_id': '[Undefined]', 'subdir': 'anat', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_label-WM_desc-eroded_mask_155": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_label-WM_desc-eroded_mask_155": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-WM_desc-eroded_mask:erode_mask_WM'], 'Sources': ['label-WM_desc-preproc_mask', 'space-T1w_desc-brain_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_label-WM_desc-eroded_mask_155": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_desc-confounds_timeseries_171": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'desc-confounds_timeseries', 'subdir': 'func', 'template_desc': '[Undefined]', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_desc-confounds_timeseries_171": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_desc-confounds_timeseries_171": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'space-T1w_desc-eroded_mask:erode_mask_T1w'], [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-CSF_desc-eroded_mask:erode_mask_CSF'], [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-WM_desc-eroded_mask:erode_mask_WM'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_desc-preproc_mask:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], 'desc-confounds_timeseries:nuisance_regressors_generation_T1w_Regressor_1'], 'Sources': ['TR', 'space-bold_desc-brain_mask', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'desc-movementParameters_motion', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars', 'desc-brain_T1w', 'space-T1w_desc-eroded_mask', 'label-CSF_desc-eroded_mask', 'label-WM_desc-eroded_mask', 'label-GM_desc-preproc_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_desc-linear_xfm', 'desc-stc_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_desc-confounds_timeseries_171": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-head_bold_198": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-head_bold', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-head_bold_198": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-head_bold_198": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-head_bold:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_bold': ['single_step_resample_stc_timeseries_to_T1template']}}}",
      "sinker_space-template_desc-head_bold_198": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-preproc_bold_200": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-preproc_bold', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-preproc_bold_200": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-preproc_bold_200": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-preproc_bold:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_bold': ['single_step_resample_stc_timeseries_to_T1template']}}}",
      "sinker_space-template_desc-preproc_bold_200": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_desc-bold_mask_201": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_desc-bold_mask', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_desc-bold_mask_201": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_desc-bold_mask_201": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-bold_mask:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_mask': ['single_step_resample_stc_timeseries_to_T1template']}}}",
      "sinker_space-template_desc-bold_mask_201": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_res-derivative_desc-bold_mask_203": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_res-derivative_desc-bold_mask', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_res-derivative_desc-bold_mask_203": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_res-derivative_desc-bold_mask_203": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_res-derivative_desc-bold_mask:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_res-derivative_mask': ['single_step_resample_stc_timeseries_to_T1template']}}}",
      "sinker_space-template_res-derivative_desc-bold_mask_203": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}",
      "id_string_space-template_sbref_207": "{'atlas_id': '[Undefined]', 'cfg': \"C-PAC Configuration ('cpac_fmriprep-options')\", 'function_str': 'def create_id_string(cfg, unique_id, resource, scan_id=None,\\n                     template_desc=None, atlas_id=None, fwhm=None,\\n                     subdir=None):\\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\\n    compliant file names.\\n\\n    This is used in the file renaming performed during the Datasink\\n    connections.\\n\\n    Example\\n    -------\\n    >>> from CPAC.utils.configuration import Configuration\\n    >>> create_id_string(Configuration(), \\'sub-1_ses-1\\',\\n    ...                  \\'res-derivative_desc-Mean-1_timeseries\\',\\n    ...                  scan_id=\\'rest\\', atlas_id=\\'Yeo_desc-7\\')\\n    \\'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries\\'\\n    \"\"\"\\n    import re\\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\\\\n                                      res_in_filename\\n    if atlas_id:\\n        if \\'_desc-\\' in atlas_id:\\n            atlas, desc = atlas_id.split(\\'_desc-\\')\\n            if not re.match(r\\'.*[0-9]$\\', atlas) and re.match(r\\'[a-z].*\\', desc):\\n                atlas_id = f\\'{atlas}{desc[0].upper()}{desc[1:]}\\'\\n            else:\\n                atlas_id = atlas_id.replace(\\'_desc-\\', \\'\\')\\n        resource = f\\'atlas-{atlas_id}_{resource}\\'\\n\\n    part_id = unique_id.split(\\'_\\')[0]\\n    ses_id = unique_id.split(\\'_\\')[1]\\n    if \\'sub-\\' not in part_id:\\n        part_id = f\\'sub-{part_id}\\'\\n    if \\'ses-\\' not in ses_id:\\n        ses_id = f\\'ses-{ses_id}\\'\\n    if scan_id:\\n        out_filename = f\\'{part_id}_{ses_id}_task-{scan_id}_{resource}\\'\\n    else:\\n        out_filename = f\\'{part_id}_{ses_id}_{resource}\\'\\n\\n    template_tag = template_desc.split(\\' -\\')[0] if template_desc else \\'*\\'\\n    for prefix in [\\'space-\\', \\'from-\\', \\'to-\\']:\\n        for bidstag in out_filename.split(\\'_\\'):\\n            if prefix in bidstag and \\'template\\' in bidstag:\\n                out_filename = out_filename.replace(\\n                    bidstag, f\\'{prefix}{template_tag}\\')\\n\\n    if fwhm:\\n        for tag in resource.split(\\'_\\'):\\n            if \\'desc-\\' in tag and \\'-sm\\' in tag:\\n                newtag = tag.replace(\\'-sm\\', f\\'-sm{fwhm}\\')\\n                out_filename = out_filename.replace(tag, newtag)\\n                break\\n        else:\\n            raise Exception(\\'\\\\n[!] FWHM provided but no desc-sm?\\\\n\\')\\n\\n    # drop space- entities from from native-space filenames\\n    if subdir == \\'anat\\':\\n        out_filename = out_filename.replace(\\'_space-T1w_\\', \\'_\\')\\n    if subdir == \\'func\\':\\n        out_filename = out_filename.replace(\\'_space-bold_\\', \\'_\\')\\n    return combine_multiple_entity_instances(\\n        res_in_filename(cfg, out_filename))\\n', 'fwhm': '[Undefined]', 'resource': 'space-template_sbref', 'subdir': 'func', 'template_desc': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'unique_id': 'sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1'}",
      "nii_space-template_sbref_207": "{'keep_ext': True, 'parse_string': '[Undefined]', 'use_fullpath': False}",
      "json_space-template_sbref_207": "{'function_str': \"def write_output_json(json_data, filename, indent=3, basedir=None):\\n    if not basedir:\\n        basedir = os.getcwd()\\n    if '.json' not in filename:\\n        filename = f'{filename}.json'\\n    json_file = os.path.join(basedir, filename)\\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\\n    with open(json_file, 'wt') as f:\\n        f.write(json_data)\\n    return json_file\\n\", 'json_data': {'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w-brain-template-funcreg:template_resample'], 'space-template_sbref:transform_sbref_to_T1template'], 'Sources': ['sbref', 'from-bold_to-template_mode-image_xfm', 'T1w-brain-template-funcreg'], 'Description': 'Single-volume sbref of the BOLD time-series transformed to template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}}",
      "sinker_space-template_sbref_207": "{'_outputs': {}, 'base_directory': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'bucket': '[Undefined]', 'container': 'pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1', 'creds_path': '[Undefined]', 'encrypt_bucket_keys': True, 'local_copy': '[Undefined]', 'parameterization': False, 'regexp_substitutions': '[Undefined]', 'remove_dest_dir': False, 'strip_dir': '[Undefined]', 'substitutions': '[Undefined]'}"
    },
    "outputs": {
      "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}, 'check_func_scan': {}, 'selectrest': {'file_path': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}, 'select_scan_params': {'file_path': None}, 's3_scan_params': {'local_path': None}}",
      "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'effective_echo_spacing': None, 'pe_direction': None, 'ref_slice': None, 'start_indx': None, 'stop_indx': None, 'template': None, 'tpattern': None, 'tr': None}",
      "anat_T1w_gather_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1": "{'inputnode': {'anat': None, 'creds_path': None, 'dl_dir': None, 'img_type': None, 'subject': None}, 'check_for_s3': {'local_path': None}, 'outputspec': {'anat': None, 'subject': None}}",
      "anat_deoblique_0": "{'out_file': None}",
      "anat_reorient_0": "{'out_file': None}",
      "anat_skullstrip_ants": "{'inputnode': {'in_files': None, 'in_mask': None}, 'truncate_images_': {'output_image': None}, 'copy_xform': {'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None}, 'inu_n4_final_': {'output_image': None, 'bias_image': None}, 'init_aff': {'output_transform': None}, 'norm': {'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}, 'map_brainmask': {'output_image': None}, 'inu_n4_': {'output_image': None, 'bias_image': None}, 'res_target': {'output_image': None}, 'res_tmpl': {'output_image': None}, 'thr_brainmask': {'output_image': None}, 'dil_brainmask': {'output_image': None}, 'get_brainmask': {'output_image': None}, 'apply_mask_': {'out_file': None}, 'outputnode': {'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None, 'out_segm': None, 'out_tpms': None}, 'lap_target': {'output_image': None}, 'lap_tmpl': {'output_image': None}, 'mrg_tmpl': {'out': None}, 'mrg_target': {'out': None}, 'atropos_wf': {'inputnode': {'in_files': None, 'in_mask': None, 'in_mask_dilated': None}, 'copy_xform': {'out_mask': None, 'out_segm': None, 'out_tpms': None}, '03_pad_mask': {'output_image': None}, '01_atropos': {'classified_image': None, 'posteriors': None}, 'msk_conform': {'out': None}, '02_pad_segm': {'output_image': None}, '04_sel_labels': {'out_csf': None, 'out_gm': None, 'out_wm': None}, '05_get_wm': {'output_image': None}, '06_get_gm': {'output_image': None}, '07_fill_gm': {'output_image': None}, '08_mult_gm': {'output_product_image': None}, '09_relabel_wm': {'output_product_image': None}, '10_me_csf': {'output_image': None}, '11_add_gm': {'output_image': None}, '12_relabel_gm': {'output_product_image': None}, '13_add_gm_wm': {'output_image': None}, '14_sel_labels2': {'out_gm': None, 'out_wm': None}, '15_add_7': {'output_image': None}, '16_me_7': {'output_image': None}, '17_comp_7': {'output_image': None}, '18_md_7': {'output_image': None}, '19_fill_7': {'output_image': None}, '20_add_7_2': {'output_image': None}, '21_md_7_2': {'output_image': None}, '22_me_7_2': {'output_image': None}, '23_depad_mask': {'output_image': None}, '24_depad_segm': {'output_image': None}, '26_depad_wm': {'output_image': None}, '25_depad_gm': {'output_image': None}, '27_depad_csf': {'output_image': None}, 'merge_tpms': {'out': None}, 'outputnode': {'out_mask': None, 'out_segm': None, 'out_tpms': None}}, 'sel_wm': {'out': None}}",
      "brain_extraction_34": "{'out_file': None}",
      "ANTS_T1_to_template_40": "{'inputspec': {'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}, 'anat_mni_ants_register': {'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}, 'write_composite_linear_xfm': {'output_image': None}, 'collect_transforms': {'out': None}, 'check_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_invlinear_xfm': {'output_image': None}, 'collect_inv_transforms': {'out': None}, 'check_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_transform_flags': {'inverse_transform_flags': None}, 'write_composite_xfm': {'output_image': None}, 'collect_all_transforms': {'out': None}, 'check_all_transforms': {'checked_transform_list': None, 'list_length': None}, 'write_composite_inv_xfm': {'output_image': None}, 'collect_all_inv_transforms': {'out': None}, 'check_all_inv_transforms': {'checked_transform_list': None, 'list_length': None}, 'inverse_all_transform_flags': {'inverse_transform_flags': None}}",
      "resampled_T1w-brain-template": "{'resampled_template': None}",
      "resampled_T1w-template": "{'resampled_template': None}",
      "resampled_T1w-brain-template-mask": "{'resampled_template': None}",
      "warp_wholehead_T1w_to_T1template_53": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_wholehead_T1w_to_T1template_53': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "write_composite_xfm": "{'output_image': None}",
      "warp_T1mask_to_T1template_57": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_T1mask_to_T1template_57': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "segment_61": "{'bias_field': None, 'mixeltype': None, 'partial_volume_files': None, 'partial_volume_map': None, 'probability_maps': None, 'restored_image': None, 'tissue_class_files': None, 'tissue_class_map': None}",
      "get_pve_csf_61": "{'out_file': None}",
      "get_pve_gm_61": "{'out_file': None}",
      "get_pve_wm_61": "{'out_file': None}",
      "CSF_61": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_CSF_61': {'out_file': None}, 'binarize_CSF_61': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "GM_61": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_GM_61': {'out_file': None}, 'binarize_GM_61': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "WM_61": "{'inputspec': {'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}, 'threshold_segmentmap_WM_61': {'out_file': None}, 'binarize_WM_61': {'out_file': None}, 'outputspec': {'probability_tissue_map': None, 'segment_mask': None}}",
      "get_csf_61": "{'filename': None}",
      "func_deoblique_2": "{'out_file': None}",
      "func_reorient_2": "{'out_file': None}",
      "edit_func_79": "{'inputspec': {'func': None, 'start_idx': None, 'stop_idx': None}, 'func_get_idx': {'startidx': None, 'stopidx': None}, 'func_drop_trs': {'out_file': None}, 'outputspec': {'edited_func': None}}",
      "func_get_fmriprep_ref_82": "{'out_file': None}",
      "func_motion_correct_mcflirt_85": "{'mat_file': None, 'mean_img': None, 'out_file': None, 'par_file': None, 'rms_files': None, 'std_img': None, 'variance_img': None}",
      "norm_motion_params_85": "{'out_file': None}",
      "get_mcflirt_rms_abs_85": "{'abs_file': None, 'rels_file': None}",
      "func_slice_timing_correction_92": "{'inputspec': {'func_ts': None, 'tpattern': None, 'tr': None}, 'slice_timing': {'out_file': None, 'timing_file': None}, 'outputspec': {'slice_time_corrected': None}}",
      "func_mean_95": "{'out_file': None}",
      "func_motion_correct_mcflirt_98": "{'mat_file': None, 'mean_img': None, 'out_file': None, 'par_file': None, 'rms_files': None, 'std_img': None, 'variance_img': None}",
      "norm_motion_params_98": "{'out_file': None}",
      "get_mcflirt_rms_abs_98": "{'abs_file': None, 'rels_file': None}",
      "resampled_FSL-AFNI-bold-ref": "{'resampled_template': None}",
      "init_aff_102": "{'output_transform': None}",
      "resampled_FSL-AFNI-brain-mask": "{'resampled_template': None}",
      "norm_102": "{'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}",
      "resampled_FSL-AFNI-brain-probseg": "{'resampled_template': None}",
      "map_brainmask_102": "{'output_image': None}",
      "binarize_mask_102": "{'out_file': None}",
      "pre_mask_dilate_102": "{'out_file': None}",
      "print_header_102": "{'header': None}",
      "set_direction_102": "{'outfile': None}",
      "n4_correct_102": "{'bias_image': None, 'output_image': None}",
      "skullstrip_first_pass_102": "{'inskull_mask_file': None, 'inskull_mesh_file': None, 'mask_file': None, 'meshfile': None, 'out_file': None, 'outline_file': None, 'outskin_mask_file': None, 'outskin_mesh_file': None, 'outskull_mask_file': None, 'outskull_mesh_file': None, 'skull_file': None, 'skull_mask_file': None}",
      "skullstrip_first_dilate_102": "{'out_file': None}",
      "skullstrip_first_mask_102": "{'out_file': None}",
      "unifize_102": "{'out_file': None, 'scale_file': None}",
      "skullstrip_second_pass_102": "{'brain_file': None, 'out_file': None}",
      "combine_masks_102": "{'out_file': None}",
      "extract_ref_brain_bold_102": "{'out_file': None}",
      "func_extract_brain_109": "{'out_file': None}",
      "gen_motion_stats_113": "{'inputspec': {'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}, 'cal_DVARS': {'out_file': None}, 'cal_DVARS_strip': {'DVARS_val': None, 'out_file': None}, 'outputspec': {'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}, 'calculate_FD': {'fd': None, 'out_file': None}, 'calculate_FDJ': {'fd': None, 'out_file': None}, 'get_all_motion_parameters': {'all_motion_val': None, 'summary_motion_power': None}, 'calc_motion_parameters': {'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}, 'calc_power_parameters': {'info': None, 'out_file': None}}",
      "func_to_anat_FLIRT_130": "{'inputspec': {'anat': None, 'dof': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'interp': None}, 'linear_func_to_anat': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'outputspec': {'anat_func_nobbreg': None, 'func_to_anat_linear_xfm_nobbreg': None}}",
      "func_to_anat_bbreg_130": "{'inputspec': {'anat': None, 'anat_wm_segmentation': None, 'bbr_schedule': None, 'bbr_wm_mask_args': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'linear_reg_matrix': None}, 'wm_bb_mask': {'out_file': None}, 'bbreg_func_to_anat': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'outputspec': {'anat_func': None, 'func_to_anat_linear_xfm': None}}",
      "create_func_to_T1wtemplate_xfm_139": "{'inputspec': {'T1w-brain-template_funcreg': None, 'T1w_to_template_xfm': None, 'blip_warp': None, 'coreg_xfm': None, 'input_brain': None, 'mean_bold': None, 'template_to_T1w_xfm': None}, 'fsl_reg_2_itk': {'itk_transform': None}, 'change_transform_type': {'updated_affine_file': None}, 'write_composite_xfm': {'output_image': None}, 'collect_all_transforms': {'out': None}, 'write_composite_inv_xfm': {'output_image': None}, 'collect_inv_transforms': {'out': None}}",
      "resampled_T1w-brain-template-funcreg": "{'resampled_template': None}",
      "write_composite_inv_xfm": "{'output_image': None}",
      "erode_T1w_mask_147": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "erode_CSF_mask_150": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'erode_mask': {'eroded_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "erode_WM_mask_153": "{'inputspec': {'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}, 'erode_skullstrip_mask': {'eroded_skullstrip_mask': None, 'output_roi_mask': None}, 'erode_mask': {'eroded_roi_mask': None}, 'outputspec': {'eroded_mask': None}}",
      "nuisance_regressors_Regressor_1_156": "{'inputspec': {'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}, 'functional_mean': {'out_file': None}, 'Anatomical_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'Functional_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'WhiteMatter_merge_masks': {'out': None}, 'WhiteMatter_union_masks': {'out_file': None}, 'WhiteMatter_mean': {'out_file': None}, 'CerebrospinalFluid_2mm_flirt': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'CerebrospinalFluid_merge_masks': {'out': None}, 'CerebrospinalFluid_union_masks': {'out_file': None}, 'CerebrospinalFluid_mean': {'out_file': None}, 'aCompCor_merge_masks': {'out': None}, 'aCompCor_union_masks': {'out_file': None}, 'aCompCor_cosine_filter': {'cosfiltered_img': None}, 'aCompCor_tr_string2float': {'tr_float': None}, 'aCompCor_std': {'out_file': None}, 'aCompCor_standardized': {'out_file': None}, 'aCompCor_pc': {'out_file': None, 'pcs_file': None}, 'tcompcor': {'inputspec': {'functional_file_path': None, 'mask_file_path': None}, 'detrend': {'out_file': None}, 'std': {'out_file': None}, 'var': {'out_file': None}, 'slice_mapper_list': {'out': None}, 'slice_mask_mapper_list': {'out': None}, 'slice_mapper': {'mask_file': None, 'out_file': None}, 'threshold_value_': {'threshold': None}, 'threshold_': {'out_file': None}, 'merge_slice_masks': {'merged_file': None}, 'outputspec': {'mask': None}}, 'anat_to_func_linear_xfm': {'out_file': None}, 'Functional_eroded_mask': {'out_file': None, 'out_log': None, 'out_matrix_file': None}, 'tCompCor_merge_masks': {'out': None}, 'tCompCor_union_masks': {'out_file': None}, 'tCompCor_cosine_filter': {'cosfiltered_img': None}, 'tCompCor_tr_string2float': {'tr_float': None}, 'tCompCor_std': {'out_file': None}, 'tCompCor_standardized': {'out_file': None}, 'tCompCor_pc': {'out_file': None, 'pcs_file': None}, 'GlobalSignal_merge_masks': {'out': None}, 'GlobalSignal_union_masks': {'out_file': None}, 'GlobalSignal_mean': {'out_file': None}, 'build_nuisance_regressors': {'censor_indices': None, 'out_file': None}, 'outputspec': {'censor_indices': None, 'regressors_file_path': None}}",
      "anat_to_func_linear_xfm_Regressor_1_156": "{'out_file': None}",
      "write_composite_invlinear_xfm": "{'output_image': None}",
      "write_composite_linear_xfm": "{'output_image': None}",
      "convert_bbr2itk_186": "{'itk_transform': None}",
      "split_func_186": "{'out_files': None}",
      "convert_motionxfm2itk_186_": "{'itk_transform': None}",
      "collectxfm_func_to_standard_186_": "{'out': None}",
      "applyxfm_func_to_standard_186_": "{'output_image': None}",
      "applyxfm_derivfunc_to_standard_186_": "{'output_image': None}",
      "resampled_T1w-brain-template-deriv": "{'resampled_template': None}",
      "merge_func_to_standard_186": "{'merged_file': None}",
      "merge_derivfunc_to_standard_186": "{'merged_file': None}",
      "applyxfm_func_mask_to_standard_186": "{'output_image': None}",
      "collectxfm_func_mask_to_standard_186": "{'out': None}",
      "applyxfm_deriv_mask_to_standard_186": "{'output_image': None}",
      "collectxfm_deriv_mask_to_standard_186": "{'out': None}",
      "get_func_brain_to_standard_186": "{'out_file': None}",
      "warp_funcreg-sbref_to_T1wtemplate_204": "{'inputspec': {'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}, 'apply_warp_warp_funcreg-sbref_to_T1wtemplate_204': {'output_image': None}, 'interp_string': {'interpolation': None}, 'single_ants_xfm_to_list': {'transform_list': None}, 'outputspec': {'output_image': None}}",
      "id_string_desc-preproc_T1w_37": "{'out_filename': None}",
      "nii_desc-preproc_T1w_37": "{'out_file': None}",
      "json_desc-preproc_T1w_37": "{'json_file': None}",
      "sinker_desc-preproc_T1w_37": "{'out_file': None}",
      "id_string_desc-head_T1w_39": "{'out_filename': None}",
      "nii_desc-head_T1w_39": "{'out_file': None}",
      "json_desc-head_T1w_39": "{'json_file': None}",
      "sinker_desc-head_T1w_39": "{'out_file': None}",
      "id_string_space-T1w_desc-brain_mask_32": "{'out_filename': None}",
      "nii_space-T1w_desc-brain_mask_32": "{'out_file': None}",
      "json_space-T1w_desc-brain_mask_32": "{'json_file': None}",
      "sinker_space-T1w_desc-brain_mask_32": "{'out_file': None}",
      "id_string_space-template_desc-preproc_T1w_46": "{'out_filename': None}",
      "nii_space-template_desc-preproc_T1w_46": "{'out_file': None}",
      "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
      "json_space-template_desc-preproc_T1w_46": "{'json_file': None}",
      "sinker_space-template_desc-preproc_T1w_46": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_xfm_47": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_xfm_47": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_xfm_47": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_xfm_47": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_xfm_48": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_xfm_48": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_xfm_48": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_xfm_48": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_49": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_50": "{'out_file': None}",
      "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'out_filename': None}",
      "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'out_file': None}",
      "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'json_file': None}",
      "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51": "{'out_file': None}",
      "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'out_filename': None}",
      "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'out_file': None}",
      "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'json_file': None}",
      "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52": "{'out_file': None}",
      "id_string_space-template_desc-head_T1w_56": "{'out_filename': None}",
      "nii_space-template_desc-head_T1w_56": "{'out_file': None}",
      "json_space-template_desc-head_T1w_56": "{'json_file': None}",
      "sinker_space-template_desc-head_T1w_56": "{'out_file': None}",
      "id_string_space-template_desc-brain_mask_60": "{'out_filename': None}",
      "nii_space-template_desc-brain_mask_60": "{'out_file': None}",
      "json_space-template_desc-brain_mask_60": "{'json_file': None}",
      "sinker_space-template_desc-brain_mask_60": "{'out_file': None}",
      "id_string_label-CSF_probseg_67": "{'out_filename': None}",
      "nii_label-CSF_probseg_67": "{'out_file': None}",
      "json_label-CSF_probseg_67": "{'json_file': None}",
      "sinker_label-CSF_probseg_67": "{'out_file': None}",
      "id_string_label-GM_probseg_68": "{'out_filename': None}",
      "nii_label-GM_probseg_68": "{'out_file': None}",
      "json_label-GM_probseg_68": "{'json_file': None}",
      "sinker_label-GM_probseg_68": "{'out_file': None}",
      "id_string_label-WM_probseg_69": "{'out_filename': None}",
      "nii_label-WM_probseg_69": "{'out_file': None}",
      "json_label-WM_probseg_69": "{'json_file': None}",
      "sinker_label-WM_probseg_69": "{'out_file': None}",
      "id_string_label-CSF_mask_70": "{'out_filename': None}",
      "nii_label-CSF_mask_70": "{'out_file': None}",
      "json_label-CSF_mask_70": "{'json_file': None}",
      "sinker_label-CSF_mask_70": "{'out_file': None}",
      "id_string_label-GM_mask_71": "{'out_filename': None}",
      "nii_label-GM_mask_71": "{'out_file': None}",
      "json_label-GM_mask_71": "{'json_file': None}",
      "sinker_label-GM_mask_71": "{'out_file': None}",
      "id_string_label-WM_mask_72": "{'out_filename': None}",
      "nii_label-WM_mask_72": "{'out_file': None}",
      "json_label-WM_mask_72": "{'json_file': None}",
      "sinker_label-WM_mask_72": "{'out_file': None}",
      "id_string_label-CSF_desc-preproc_mask_73": "{'out_filename': None}",
      "nii_label-CSF_desc-preproc_mask_73": "{'out_file': None}",
      "json_label-CSF_desc-preproc_mask_73": "{'json_file': None}",
      "sinker_label-CSF_desc-preproc_mask_73": "{'out_file': None}",
      "id_string_label-GM_desc-preproc_mask_74": "{'out_filename': None}",
      "nii_label-GM_desc-preproc_mask_74": "{'out_file': None}",
      "json_label-GM_desc-preproc_mask_74": "{'json_file': None}",
      "sinker_label-GM_desc-preproc_mask_74": "{'out_file': None}",
      "id_string_label-WM_desc-preproc_mask_75": "{'out_filename': None}",
      "nii_label-WM_desc-preproc_mask_75": "{'out_file': None}",
      "json_label-WM_desc-preproc_mask_75": "{'json_file': None}",
      "sinker_label-WM_desc-preproc_mask_75": "{'out_file': None}",
      "id_string_desc-preproc_bold_185": "{'out_filename': None}",
      "nii_desc-preproc_bold_185": "{'out_file': None}",
      "json_desc-preproc_bold_185": "{'json_file': None}",
      "sinker_desc-preproc_bold_185": "{'out_file': None}",
      "id_string_desc-movementParameters_motion_90": "{'out_filename': None}",
      "nii_desc-movementParameters_motion_90": "{'out_file': None}",
      "json_desc-movementParameters_motion_90": "{'json_file': None}",
      "sinker_desc-movementParameters_motion_90": "{'out_file': None}",
      "id_string_desc-mean_bold_97": "{'out_filename': None}",
      "nii_desc-mean_bold_97": "{'out_file': None}",
      "json_desc-mean_bold_97": "{'json_file': None}",
      "sinker_desc-mean_bold_97": "{'out_file': None}",
      "id_string_space-bold_desc-brain_mask_107": "{'out_filename': None}",
      "nii_space-bold_desc-brain_mask_107": "{'out_file': None}",
      "json_space-bold_desc-brain_mask_107": "{'json_file': None}",
      "sinker_space-bold_desc-brain_mask_107": "{'out_file': None}",
      "id_string_motion_127": "{'out_filename': None}",
      "nii_motion_127": "{'out_file': None}",
      "json_motion_127": "{'json_file': None}",
      "sinker_motion_127": "{'out_file': None}",
      "id_string_desc-summary_motion_128": "{'out_filename': None}",
      "nii_desc-summary_motion_128": "{'out_file': None}",
      "json_desc-summary_motion_128": "{'json_file': None}",
      "sinker_desc-summary_motion_128": "{'out_file': None}",
      "id_string_sbref_129": "{'out_filename': None}",
      "nii_sbref_129": "{'out_file': None}",
      "json_sbref_129": "{'json_file': None}",
      "sinker_sbref_129": "{'out_file': None}",
      "id_string_space-T1w_sbref_137": "{'out_filename': None}",
      "nii_space-T1w_sbref_137": "{'out_file': None}",
      "json_space-T1w_sbref_137": "{'json_file': None}",
      "sinker_space-T1w_sbref_137": "{'out_file': None}",
      "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'out_filename': None}",
      "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'out_file': None}",
      "json_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'json_file': None}",
      "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_138": "{'out_file': None}",
      "id_string_from-bold_to-template_mode-image_xfm_145": "{'out_filename': None}",
      "nii_from-bold_to-template_mode-image_xfm_145": "{'out_file': None}",
      "json_from-bold_to-template_mode-image_xfm_145": "{'json_file': None}",
      "sinker_from-bold_to-template_mode-image_xfm_145": "{'out_file': None}",
      "id_string_from-template_to-bold_mode-image_xfm_146": "{'out_filename': None}",
      "nii_from-template_to-bold_mode-image_xfm_146": "{'out_file': None}",
      "json_from-template_to-bold_mode-image_xfm_146": "{'json_file': None}",
      "sinker_from-template_to-bold_mode-image_xfm_146": "{'out_file': None}",
      "id_string_space-T1w_desc-eroded_mask_149": "{'out_filename': None}",
      "nii_space-T1w_desc-eroded_mask_149": "{'out_file': None}",
      "json_space-T1w_desc-eroded_mask_149": "{'json_file': None}",
      "sinker_space-T1w_desc-eroded_mask_149": "{'out_file': None}",
      "id_string_label-CSF_desc-eroded_mask_152": "{'out_filename': None}",
      "nii_label-CSF_desc-eroded_mask_152": "{'out_file': None}",
      "json_label-CSF_desc-eroded_mask_152": "{'json_file': None}",
      "sinker_label-CSF_desc-eroded_mask_152": "{'out_file': None}",
      "id_string_label-WM_desc-eroded_mask_155": "{'out_filename': None}",
      "nii_label-WM_desc-eroded_mask_155": "{'out_file': None}",
      "json_label-WM_desc-eroded_mask_155": "{'json_file': None}",
      "sinker_label-WM_desc-eroded_mask_155": "{'out_file': None}",
      "id_string_desc-confounds_timeseries_171": "{'out_filename': None}",
      "nii_desc-confounds_timeseries_171": "{'out_file': None}",
      "json_desc-confounds_timeseries_171": "{'json_file': None}",
      "sinker_desc-confounds_timeseries_171": "{'out_file': None}",
      "id_string_space-template_desc-head_bold_198": "{'out_filename': None}",
      "nii_space-template_desc-head_bold_198": "{'out_file': None}",
      "json_space-template_desc-head_bold_198": "{'json_file': None}",
      "sinker_space-template_desc-head_bold_198": "{'out_file': None}",
      "id_string_space-template_desc-preproc_bold_200": "{'out_filename': None}",
      "nii_space-template_desc-preproc_bold_200": "{'out_file': None}",
      "json_space-template_desc-preproc_bold_200": "{'json_file': None}",
      "sinker_space-template_desc-preproc_bold_200": "{'out_file': None}",
      "id_string_space-template_desc-bold_mask_201": "{'out_filename': None}",
      "nii_space-template_desc-bold_mask_201": "{'out_file': None}",
      "json_space-template_desc-bold_mask_201": "{'json_file': None}",
      "sinker_space-template_desc-bold_mask_201": "{'out_file': None}",
      "id_string_space-template_res-derivative_desc-bold_mask_203": "{'out_filename': None}",
      "nii_space-template_res-derivative_desc-bold_mask_203": "{'out_file': None}",
      "json_space-template_res-derivative_desc-bold_mask_203": "{'json_file': None}",
      "sinker_space-template_res-derivative_desc-bold_mask_203": "{'out_file': None}",
      "id_string_space-template_sbref_207": "{'out_filename': None}",
      "nii_space-template_sbref_207": "{'out_file': None}",
      "json_space-template_sbref_207": "{'json_file': None}",
      "sinker_space-template_sbref_207": "{'out_file': None}"
    },
    "result": null,
    "nodes": [
      {
        "name": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options', 'scan': '[Undefined]', 'subject': 'sub-NDARINV2VY7YYNW'}",
          "check_func_scan": "{'func_scan_dct': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}, 'function_str': 'CPAC.utils.datasource.check_func_scan'}",
          "selectrest": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': 'func'}",
          "outputspec": "{'magnitude': '[Undefined]', 'phase_diff': '[Undefined]'}",
          "select_scan_params": "{'function_str': 'CPAC.utils.datasource.get_rest', 'resource': 'scan_parameters', 'rest_dict': {'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}}",
          "s3_scan_params": "{'function_str': 'CPAC.utils.datasource.check_for_s3', 'img_type': '[Undefined]'}"
        },
        "outputs": {
          "inputnode": "{'creds_path': None, 'dl_dir': None, 'scan': None, 'subject': None}",
          "check_func_scan": "{}",
          "selectrest": "{'file_path': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'magnitude': None, 'phase_diff': None, 'rest': None, 'scan': None, 'scan_params': None, 'subject': None}",
          "select_scan_params": "{'file_path': None}",
          "s3_scan_params": "{'local_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "subject": "sub-NDARINV2VY7YYNW",
              "scan": "[Undefined]",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options"
            },
            "outputs": {
              "subject": "[Undefined]",
              "scan": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_func_scan",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_func_scan",
              "func_scan_dct": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "scan": "[Undefined]"
            },
            "outputs": {},
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "selectrest",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "resource": "scan"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "func"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "outputs": {
              "subject": "[Undefined]",
              "rest": "[Undefined]",
              "scan": "[Undefined]",
              "scan_params": "[Undefined]",
              "phase_diff": "[Undefined]",
              "magnitude": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.get_rest",
              "scan": "[Undefined]",
              "rest_dict": "{'rest_run-01': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-01_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-02': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-02_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-03': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-03_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}, 'rest_run-04': {'scan': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/func/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_task-rest_run-04_bold.nii', 'scan_parameters': {'EchoTime': 0.03, 'FlipAngle': 52.0, 'RepetitionTime': 0.8, 'TaskName': \"b'rest'\", 'registration_matrix_T1': [[0.9975787311026656, -0.00039385853349085584, -0.06954388950109636, 2.5427616230733006], [-0.005554781604944987, 0.9963377512970775, -0.08532388155944741, -17.617207609820525], [0.0693228069207997, 0.08550358112452774, 0.9939233286777647, 9.429133818673339], [0.0, 0.0, 0.0, 1.0]]}}}",
              "resource": "scan_parameters"
            },
            "outputs": {
              "file_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "s3_scan_params",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_func_scan"
          },
          {
            "origin": "inputnode",
            "target": "selectrest"
          },
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "inputnode",
            "target": "select_scan_params"
          },
          {
            "origin": "inputnode",
            "target": "s3_scan_params"
          },
          {
            "origin": "selectrest",
            "target": "check_for_s3"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          },
          {
            "origin": "select_scan_params",
            "target": "s3_scan_params"
          },
          {
            "origin": "s3_scan_params",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "type": "node",
        "inputs": {
          "function_str": "def get_scan_params(subject_id, scan, pipeconfig_start_indx,\n                    pipeconfig_stop_indx, data_config_scan_params=None):\n    \"\"\"\n    Method to extract slice timing correction parameters\n    and scan parameters.\n\n    Parameters\n    ----------\n    subject_id : str\n        subject id\n    scan : str\n        scan id\n    pipeconfig_start_indx : int\n        starting volume index as provided in the pipeline config yaml file\n    pipeconfig_stop_indx : int\n        ending volume index as provided in the pipeline config yaml file\n    data_config_scan_params : str\n        file path to scan parameter JSON file listed in data config yaml file\n\n    Returns\n    -------\n    TR : a string\n        TR value\n    pattern : a string\n        slice aquisition pattern string or file path\n    ref_slice : an integer\n        reference slice which is used to allign all other slices\n    first_tr : an integer\n        starting TR or starting volume index\n    last_tr : an integer\n        ending TR or ending volume index\n    pe_direction : str\n    effective_echo_spacing : float\n    \"\"\"\n\n    import os\n    import json\n    import warnings\n\n    check2 = lambda val: val if val == None or val == '' or \\\n                                isinstance(val, str) else int(val)\n\n    # initialize vars to empty\n    TR = ''\n    TE = None\n    pattern = ''\n    ref_slice = ''\n    first_tr = ''\n    last_tr = ''\n    unit = 's'\n    pe_direction = ''\n    effective_echo_spacing = None\n    template = None\n\n    if isinstance(pipeconfig_stop_indx, str):\n        if \"End\" in pipeconfig_stop_indx or \"end\" in pipeconfig_stop_indx:\n            pipeconfig_stop_indx = None\n    if data_config_scan_params:\n        if \".json\" in data_config_scan_params:\n            if not os.path.exists(data_config_scan_params):\n                err = \"\\n[!] WARNING: Scan parameters JSON file listed in \" \\\n                      \"your data configuration file does not exist:\\n{0}\" \\\n                      \"\\n\\n\".format(data_config_scan_params)\n                raise Exception(err)\n\n            with open(data_config_scan_params, \"r\") as f:\n                params_dct = json.load(f)\n\n            # get details from the configuration\n            # if this is a JSON file, the key values are the BIDS format\n            # standard\n            # TODO: better handling of errant key values!!!\n            if \"RepetitionTime\" in params_dct.keys():\n                TR = float(check(params_dct, subject_id, scan,\n                                 \"RepetitionTime\", False))\n            if \"SliceTiming\" in params_dct.keys():\n                pattern = str(check(params_dct, subject_id, scan,\n                                    \"SliceTiming\", False))\n            elif \"SliceAcquisitionOrder\" in params_dct.keys():\n                pattern = str(check(params_dct, subject_id, scan,\n                                    \"SliceAcquisitionOrder\", False))\n            if \"PhaseEncodingDirection\" in params_dct.keys():\n                pe_direction = str(check(params_dct, subject_id, scan,\n                                         \"PhaseEncodingDirection\", False))\n            try:\n                \"EffectiveEchoSpacing\" in params_dct.keys()\n                effective_echo_spacing = float(\n                        check(params_dct, subject_id, scan,\n                            \"EffectiveEchoSpacing\", False))\n            except TypeError:\n                pass\n\n        elif len(data_config_scan_params) > 0 and \\\n                isinstance(data_config_scan_params, dict):\n\n            params_dct = data_config_scan_params\n\n            # TODO: better handling of errant key values!!!\n            # TODO: use schema validator to deal with it\n            # get details from the configuration\n            try: \n                TR = float(\n                    try_fetch_parameter(\n                        params_dct,\n                        subject_id,\n                        scan,\n                        ['TR', 'RepetitionTime']\n                    )\n                )\n            except TypeError:\n                TR = None\n\n            try: \n                template = str(\n                    try_fetch_parameter(\n                        params_dct,\n                        subject_id,\n                        scan,\n                        ['Template', 'template']\n                    )\n                )\n            except TypeError:\n                template = None\n\n            pattern = str(\n                try_fetch_parameter(\n                    params_dct,\n                    subject_id,\n                    scan,\n                    ['acquisition', 'SliceTiming', 'SliceAcquisitionOrder']\n                )\n            )\n\n            ref_slice = check(params_dct, subject_id, scan, 'reference',\n                              False)\n            if ref_slice:\n                ref_slice = int(ref_slice)\n\n            first_tr = check(params_dct, subject_id, scan, 'first_TR', False)\n            if first_tr:\n                first_tr = check2(first_tr)\n\n            last_tr = check(params_dct, subject_id, scan, 'last_TR', False)\n            if last_tr:\n                last_tr = check2(last_tr)\n\n            pe_direction = check(params_dct, subject_id, scan,\n                                 'PhaseEncodingDirection', False)\n            try:\n                effective_echo_spacing = float(\n                try_fetch_parameter(params_dct, subject_id, scan,\n                                    [\"EffectiveEchoSpacing\"]))\n            except TypeError:\n                pass\n\n        else:\n            err = \"\\n\\n[!] Could not read the format of the scan parameters \" \\\n                  \"information included in the data configuration file for \" \\\n                  f\"the participant {subject_id}.\\n\\n\"\n            raise Exception(err)\n    if first_tr == '' or first_tr is None:\n        first_tr = pipeconfig_start_indx\n\n    if last_tr == '' or last_tr is None:\n        last_tr = pipeconfig_stop_indx\n\n    unit = 's'\n\n    if 'None' in pattern or 'none' in pattern:\n        pattern = None\n\n    '''\n    if not pattern:\n        if pipeconfig_tpattern:\n            if \"Use NIFTI Header\" in pipeconfig_tpattern:\n                pattern = ''\n            else:\n                pattern = pipeconfig_tpattern\n    '''\n\n    # pattern can be one of a few keywords, a filename, or blank which\n    # indicates that the images header information should be used\n    tpattern_file = None\n\n    valid_patterns = ['alt+z', 'altplus', 'alt+z2', 'alt-z', 'altminus',\n                      'alt-z2', 'seq+z', 'seqplus', 'seq-z', 'seqminus']\n    if pattern and pattern != '' and pattern not in valid_patterns:\n\n        if isinstance(pattern, list) or \\\n                (\"[\" in pattern and \"]\" in pattern and \",\" in pattern):\n            # if we got the slice timing as a list, from a BIDS-format scan\n            # parameters JSON file\n\n            if not isinstance(pattern, list):\n                pattern = pattern.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\")\n\n            slice_timings = [float(x) for x in pattern]\n\n            # write out a tpattern file for AFNI 3dTShift\n            tpattern_file = os.path.join(os.getcwd(), \"tpattern.txt\")\n            try:\n                with open(tpattern_file, \"wt\") as f:\n                    for time in slice_timings:\n                        f.write(\"{0}\\n\".format(time).replace(\" \", \"\"))\n            except:\n                err = \"\\n[!] Could not write the slice timing file meant as \" \\\n                      \"an input for AFNI 3dTshift (slice timing correction):\" \\\n                      \"\\n{0}\\n\\n\".format(tpattern_file)\n                raise Exception(err)\n\n        elif \".txt\" in pattern and not os.path.exists(pattern):\n            # if the user provided an acquisition pattern text file for\n            # 3dTshift\n            raise Exception(\"Invalid Pattern file path {0}, Please provide \"\n                            \"the correct path\".format(pattern))\n        elif \".txt\" in pattern:\n            with open(pattern, \"r\") as f:\n                lines = f.readlines()\n            if len(lines) < 2:\n                raise Exception('Invalid slice timing file format. The file '\n                                'should contain only one value per row. Use '\n                                'new line char as delimiter')\n            tpattern_file = pattern\n            slice_timings = [float(l.rstrip('\\r\\n')) for l in lines]\n        else:\n            # this only happens if there is a non-path string set in the data\n            # config dictionary for acquisition pattern (like \"alt+z\"), except\n            # the pattern is not listed in that list\n            err = \"\\n[!] The slice timing acquisition pattern provided is \" \\\n                  \"not supported by AFNI 3dTshift:\\n\" \\\n                  \"{0}\\n\".format(str(pattern))\n            raise Exception(err)\n\n        pattern = tpattern_file\n\n        slice_timings.sort()\n        max_slice_offset = slice_timings[-1]\n\n        # checking if the unit of TR and slice timing match or not\n        # if slice timing in ms convert TR to ms as well\n        if TR and max_slice_offset > TR:\n            warnings.warn(\"TR is in seconds and slice timings are in \"\n                          \"milliseconds. Converting TR into milliseconds\")\n            TR = TR * 1000\n            print(\"New TR value {0} ms\".format(TR))\n            unit = 'ms'\n\n    else:\n        # check to see, if TR is in milliseconds, convert it into seconds\n        if TR and TR > 10:\n            warnings.warn('TR is in milliseconds, Converting it into seconds')\n            TR = TR / 1000.0\n            print(\"New TR value {0} s\".format(TR))\n            unit = 's'\n\n    # swap back in\n    if TR:\n        tr = \"{0}{1}\".format(str(TR), unit)\n    else:\n        tr = \"\"\n\n    tpattern = pattern\n    start_indx = first_tr\n    stop_indx = last_tr\n\n    return (tr if tr else None,\n            tpattern if tpattern else None,\n            template if template else None,\n            ref_slice,\n            start_indx,\n            stop_indx,\n            pe_direction,\n            effective_echo_spacing)\n",
          "data_config_scan_params": "[Undefined]",
          "subject_id": "sub-NDARINV2VY7YYNW",
          "scan": "[Undefined]",
          "pipeconfig_tr": "[Undefined]",
          "pipeconfig_tpattern": "[Undefined]",
          "pipeconfig_start_indx": "0",
          "pipeconfig_stop_indx": "None"
        },
        "outputs": {
          "tr": "[Undefined]",
          "tpattern": "[Undefined]",
          "template": "[Undefined]",
          "ref_slice": "[Undefined]",
          "start_indx": "[Undefined]",
          "stop_indx": "[Undefined]",
          "pe_direction": "[Undefined]",
          "effective_echo_spacing": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_T1w_gather_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'anat': '/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/anat/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_run-01_T1w.nii', 'creds_path': None, 'dl_dir': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options', 'img_type': 'anat', 'subject': 'sub-NDARINV2VY7YYNW'}",
          "check_for_s3": "{'function_str': 'CPAC.utils.datasource.check_for_s3'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputnode": "{'anat': None, 'creds_path': None, 'dl_dir': None, 'img_type': None, 'subject': None}",
          "check_for_s3": "{'local_path': None}",
          "outputspec": "{'anat': None, 'subject': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "subject": "sub-NDARINV2VY7YYNW",
              "anat": "/ocean/projects/med220004p/rupprech/abcd-onesubject/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1/anat/sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1_run-01_T1w.nii",
              "creds_path": "None",
              "dl_dir": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working/pipeline_cpac_fmriprep-options",
              "img_type": "anat"
            },
            "outputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_for_s3",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.utils.datasource.check_for_s3",
              "file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "img_type": "[Undefined]"
            },
            "outputs": {
              "local_path": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]"
            },
            "outputs": {
              "subject": "[Undefined]",
              "anat": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "check_for_s3"
          },
          {
            "origin": "inputnode",
            "target": "outputspec"
          },
          {
            "origin": "check_for_s3",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "anat_deoblique_0",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "deoblique": "True",
          "xorigin": "[Undefined]",
          "yorigin": "[Undefined]",
          "zorigin": "[Undefined]",
          "duporigin_file": "[Undefined]",
          "xdel": "[Undefined]",
          "ydel": "[Undefined]",
          "zdel": "[Undefined]",
          "xyzscale": "[Undefined]",
          "space": "[Undefined]",
          "atrcopy": "[Undefined]",
          "atrstring": "[Undefined]",
          "atrfloat": "[Undefined]",
          "atrint": "[Undefined]",
          "saveatr": "[Undefined]",
          "nosaveatr": "[Undefined]",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_reorient_0",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "RPI",
          "resample_mode": "[Undefined]",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_skullstrip_ants",
        "type": "workflow",
        "inputs": {
          "inputnode": "{'in_files': '[Undefined]', 'in_mask': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}",
          "truncate_images_": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '0.01 0.999 256', 'operation': 'TruncateImageIntensity', 'output_image': '[Undefined]'}",
          "copy_xform": "{}",
          "inu_n4_final_": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': True, 'shrink_factor': 4}",
          "init_aff": "{'args': '[Undefined]', 'convergence': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374bfaf80>, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'metric': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50350>, 'moving_image_mask': '[Undefined]', 'num_threads': 1, 'output_transform': 'initialization.mat', 'principal_axes': False, 'search_factor': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50270>, 'search_grid': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50200>, 'transform': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50190>, 'verbose': True}",
          "norm": "{'args': '[Undefined]', 'collapse_output_transforms': True, 'convergence_threshold': [1e-08, 1e-08, 1e-09], 'convergence_window_size': [10, 10, 15], 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'fixed_image_mask': '[Undefined]', 'float': True, 'initial_moving_transform_com': '[Undefined]', 'initialize_transforms_per_stage': False, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_initial_moving_transform': '[Undefined]', 'metric': ['MI', 'MI', ['CC', 'CC']], 'metric_item_trait': '[Undefined]', 'metric_stage_trait': '[Undefined]', 'metric_weight': [1.0, 1.0, [0.5, 0.5]], 'metric_weight_item_trait': 1.0, 'metric_weight_stage_trait': '[Undefined]', 'moving_image_mask': '[Undefined]', 'moving_image_masks': '[Undefined]', 'num_threads': 1, 'number_of_iterations': [[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]], 'output_inverse_warped_image': '[Undefined]', 'output_transform_prefix': 'anat_to_template', 'output_warped_image': True, 'radius_bins_item_trait': 5, 'radius_bins_stage_trait': '[Undefined]', 'radius_or_number_of_bins': [32, 32, [4, 4]], 'random_seed': '[Undefined]', 'restore_state': '[Undefined]', 'restrict_deformation': '[Undefined]', 'sampling_percentage': [0.25, 0.25, [1.0, 1.0]], 'sampling_percentage_item_trait': '[Undefined]', 'sampling_percentage_stage_trait': '[Undefined]', 'sampling_strategy': ['Regular', 'Regular', ['None', 'None']], 'sampling_strategy_item_trait': '[Undefined]', 'sampling_strategy_stage_trait': '[Undefined]', 'save_state': '[Undefined]', 'shrink_factors': [[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]], 'sigma_units': ['vox', 'vox', 'vox'], 'smoothing_sigmas': [[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]], 'transform_parameters': [<generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50040>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374abb990>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba490>], 'transforms': ['Rigid', 'Affine', 'SyN'], 'use_estimate_learning_rate_once': '[Undefined]', 'use_histogram_matching': True, 'verbose': True, 'winsorize_lower_quantile': 0.025, 'winsorize_upper_quantile': 0.975, 'write_composite_transform': False}",
          "map_brainmask": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': '[Undefined]', 'environ': {'NSLOTS': '1'}, 'float': True, 'input_image': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'input_image_type': '[Undefined]', 'interpolation': 'Gaussian', 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "inu_n4_": "{'args': '[Undefined]', 'bias_image': '[Undefined]', 'bspline_fitting_distance': 200.0, 'bspline_order': '[Undefined]', 'convergence_threshold': 1e-07, 'copy_header': True, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'histogram_sharpening': '[Undefined]', 'mask_image': '[Undefined]', 'n_iterations': [50, 50, 50, 50], 'num_threads': 1, 'output_image': '[Undefined]', 'rescale_intensities': False, 'save_bias': False, 'shrink_factor': 4, 'weight_image': '[Undefined]'}",
          "res_target": "{'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba5e0>, 'output_image': '[Undefined]'}",
          "res_tmpl": "{'addvox': '[Undefined]', 'apply_smoothing': True, 'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_image': '/ants_template/oasis/T_template0.nii.gz', 'nn_interp': '[Undefined]', 'num_threads': 1, 'out_spacing': <generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba2d0>, 'output_image': '[Undefined]'}",
          "thr_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'input_mask': '[Undefined]', 'inside_value': 1.0, 'mode': '[Undefined]', 'num_threads': 1, 'num_thresholds': '[Undefined]', 'output_image': '[Undefined]', 'outside_value': 0.0, 'th_high': 1.0, 'th_low': 0.5}",
          "dil_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'MD', 'output_image': '[Undefined]'}",
          "get_brainmask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
          "apply_mask_": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
          "outputnode": "{}",
          "lap_target": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}",
          "lap_tmpl": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op1': '/ants_template/oasis/T_template0.nii.gz', 'op2': '1.5 1', 'operation': 'Laplacian', 'output_image': '[Undefined]'}",
          "mrg_tmpl": "{'axis': 'vstack', 'in1': '/ants_template/oasis/T_template0.nii.gz', 'no_flatten': False, 'ravel_inputs': False}",
          "mrg_target": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "atropos_wf": "{'inputnode': {'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}, 'copy_xform': {}, '03_pad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '01_atropos': {'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': True}, 'msk_conform': {'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensures the mask headers make sense and match those of the T1w\"\"\"\\n    from pathlib import Path\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nb.load(in_reference)\\n    nii = nb.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\\'int16\\')\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \\'_maths\\' in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \\'\\'.join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\\'_maths\\')[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\\'_mask\\',\\n                               newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\\'int16\\'), ref.affine,\\n                  hdr).to_filename(out_file)\\n    return out_file\\n'}, '02_pad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '04_sel_labels': {'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [3, 2, 1]}, '05_get_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '06_get_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '07_fill_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '08_mult_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}, '09_relabel_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}, '10_me_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}, '11_add_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '12_relabel_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}, '13_add_gm_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '14_sel_labels2': {'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [2, 3]}, '15_add_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '16_me_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}, '17_comp_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}, '18_md_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}, '19_fill_7': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}, '20_add_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}, '21_md_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}, '22_me_7_2': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}, '23_depad_mask': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '24_depad_segm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '26_depad_wm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '25_depad_gm': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, '27_depad_csf': {'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}, 'merge_tpms': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'outputnode': {}}",
          "sel_wm": "{'index': [2]}"
        },
        "outputs": {
          "inputnode": "{'in_files': None, 'in_mask': None}",
          "truncate_images_": "{'output_image': None}",
          "copy_xform": "{'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None}",
          "inu_n4_final_": "{'output_image': None, 'bias_image': None}",
          "init_aff": "{'output_transform': None}",
          "norm": "{'composite_transform': None, 'elapsed_time': None, 'forward_invert_flags': None, 'forward_transforms': None, 'inverse_composite_transform': None, 'inverse_warped_image': None, 'metric_value': None, 'reverse_forward_invert_flags': None, 'reverse_forward_transforms': None, 'reverse_invert_flags': None, 'reverse_transforms': None, 'save_state': None, 'warped_image': None}",
          "map_brainmask": "{'output_image': None}",
          "inu_n4_": "{'output_image': None, 'bias_image': None}",
          "res_target": "{'output_image': None}",
          "res_tmpl": "{'output_image': None}",
          "thr_brainmask": "{'output_image': None}",
          "dil_brainmask": "{'output_image': None}",
          "get_brainmask": "{'output_image': None}",
          "apply_mask_": "{'out_file': None}",
          "outputnode": "{'bias_corrected': None, 'bias_image': None, 'out_file': None, 'out_mask': None, 'out_segm': None, 'out_tpms': None}",
          "lap_target": "{'output_image': None}",
          "lap_tmpl": "{'output_image': None}",
          "mrg_tmpl": "{'out': None}",
          "mrg_target": "{'out': None}",
          "atropos_wf": "{'inputnode': {'in_files': None, 'in_mask': None, 'in_mask_dilated': None}, 'copy_xform': {'out_mask': None, 'out_segm': None, 'out_tpms': None}, '03_pad_mask': {'output_image': None}, '01_atropos': {'classified_image': None, 'posteriors': None}, 'msk_conform': {'out': None}, '02_pad_segm': {'output_image': None}, '04_sel_labels': {'out_csf': None, 'out_gm': None, 'out_wm': None}, '05_get_wm': {'output_image': None}, '06_get_gm': {'output_image': None}, '07_fill_gm': {'output_image': None}, '08_mult_gm': {'output_product_image': None}, '09_relabel_wm': {'output_product_image': None}, '10_me_csf': {'output_image': None}, '11_add_gm': {'output_image': None}, '12_relabel_gm': {'output_product_image': None}, '13_add_gm_wm': {'output_image': None}, '14_sel_labels2': {'out_gm': None, 'out_wm': None}, '15_add_7': {'output_image': None}, '16_me_7': {'output_image': None}, '17_comp_7': {'output_image': None}, '18_md_7': {'output_image': None}, '19_fill_7': {'output_image': None}, '20_add_7_2': {'output_image': None}, '21_md_7_2': {'output_image': None}, '22_me_7_2': {'output_image': None}, '23_depad_mask': {'output_image': None}, '24_depad_segm': {'output_image': None}, '26_depad_wm': {'output_image': None}, '25_depad_gm': {'output_image': None}, '27_depad_csf': {'output_image': None}, 'merge_tpms': {'out': None}, 'outputnode': {'out_mask': None, 'out_segm': None, 'out_tpms': None}}",
          "sel_wm": "{'out': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputnode",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "in_mask": "/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz"
            },
            "outputs": {
              "in_files": "[Undefined]",
              "in_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "truncate_images_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "num_threads": "1",
              "op1": "[Undefined]",
              "op2": "0.01 0.999 256",
              "operation": "TruncateImageIntensity",
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "copy_xform",
            "type": "node",
            "inputs": {
              "hdr_file": "[Undefined]",
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inu_n4_final_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "bias_image": "[Undefined]",
              "bspline_fitting_distance": "200.0",
              "bspline_order": "[Undefined]",
              "convergence_threshold": "1e-07",
              "copy_header": "True",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "histogram_sharpening": "[Undefined]",
              "input_image": "[Undefined]",
              "mask_image": "[Undefined]",
              "n_iterations": "[50, 50, 50, 50, 50]",
              "num_threads": "1",
              "output_image": "[Undefined]",
              "rescale_intensities": "False",
              "save_bias": "True",
              "shrink_factor": "4",
              "weight_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "init_aff",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "verbose": "True",
              "fixed_image": "[Undefined]",
              "moving_image": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "moving_image_mask": "[Undefined]",
              "metric": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374b74580>",
              "transform": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374c503c0>",
              "principal_axes": "False",
              "search_factor": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374c500b0>",
              "search_grid": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374c502e0>",
              "convergence": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50040>",
              "output_transform": "initialization.mat",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_transform": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "norm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "fixed_image": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "fixed_image_masks": "[Undefined]",
              "moving_image": "[Undefined]",
              "moving_image_mask": "[Undefined]",
              "moving_image_masks": "[Undefined]",
              "save_state": "[Undefined]",
              "restore_state": "[Undefined]",
              "initial_moving_transform": "[Undefined]",
              "invert_initial_moving_transform": "[Undefined]",
              "initial_moving_transform_com": "[Undefined]",
              "metric_item_trait": "[Undefined]",
              "metric_stage_trait": "[Undefined]",
              "metric": "['MI', 'MI', ['CC', 'CC']]",
              "metric_weight_item_trait": "1.0",
              "metric_weight_stage_trait": "[Undefined]",
              "metric_weight": "[1.0, 1.0, [0.5, 0.5]]",
              "radius_bins_item_trait": "5",
              "radius_bins_stage_trait": "[Undefined]",
              "radius_or_number_of_bins": "[32, 32, [4, 4]]",
              "sampling_strategy_item_trait": "[Undefined]",
              "sampling_strategy_stage_trait": "[Undefined]",
              "sampling_strategy": "['Regular', 'Regular', ['None', 'None']]",
              "sampling_percentage_item_trait": "[Undefined]",
              "sampling_percentage_stage_trait": "[Undefined]",
              "sampling_percentage": "[0.25, 0.25, [1.0, 1.0]]",
              "use_estimate_learning_rate_once": "[Undefined]",
              "use_histogram_matching": "True",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "write_composite_transform": "False",
              "collapse_output_transforms": "True",
              "initialize_transforms_per_stage": "False",
              "float": "True",
              "transforms": "['Rigid', 'Affine', 'SyN']",
              "transform_parameters": "[<generator object _serialize_inout.<locals>.<genexpr> at 0x155374b74580>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c50040>, <generator object _serialize_inout.<locals>.<genexpr> at 0x155374c502e0>]",
              "restrict_deformation": "[Undefined]",
              "number_of_iterations": "[[1000, 500, 250, 100], [1000, 500, 250, 100], [50, 10, 0]]",
              "smoothing_sigmas": "[[4.0, 2.0, 1.0, 0.0], [4.0, 2.0, 1.0, 0.0], [2.0, 1.0, 0.0]]",
              "sigma_units": "['vox', 'vox', 'vox']",
              "shrink_factors": "[[8, 4, 2, 1], [8, 4, 2, 1], [4, 2, 1]]",
              "convergence_threshold": "[1e-08, 1e-08, 1e-09]",
              "convergence_window_size": "[10, 10, 15]",
              "output_transform_prefix": "anat_to_template",
              "output_warped_image": "True",
              "output_inverse_warped_image": "[Undefined]",
              "winsorize_upper_quantile": "0.975",
              "winsorize_lower_quantile": "0.025",
              "random_seed": "[Undefined]",
              "verbose": "True",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "forward_transforms": "[Undefined]",
              "reverse_forward_transforms": "[Undefined]",
              "reverse_transforms": "[Undefined]",
              "forward_invert_flags": "[Undefined]",
              "reverse_forward_invert_flags": "[Undefined]",
              "reverse_invert_flags": "[Undefined]",
              "composite_transform": "[Undefined]",
              "inverse_composite_transform": "[Undefined]",
              "warped_image": "[Undefined]",
              "inverse_warped_image": "[Undefined]",
              "save_state": "[Undefined]",
              "metric_value": "[Undefined]",
              "elapsed_time": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "map_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "[Undefined]",
              "input_image_type": "[Undefined]",
              "input_image": "/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Gaussian",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "True",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inu_n4_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "bias_image": "[Undefined]",
              "bspline_fitting_distance": "200.0",
              "bspline_order": "[Undefined]",
              "convergence_threshold": "1e-07",
              "copy_header": "True",
              "dimension": "3",
              "environ": "{'NSLOTS': '1'}",
              "histogram_sharpening": "[Undefined]",
              "input_image": "[Undefined]",
              "mask_image": "[Undefined]",
              "n_iterations": "[50, 50, 50, 50]",
              "num_threads": "1",
              "output_image": "[Undefined]",
              "rescale_intensities": "False",
              "save_bias": "False",
              "shrink_factor": "4",
              "weight_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]",
              "bias_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "res_target",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_spacing": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374b74580>",
              "apply_smoothing": "True",
              "addvox": "[Undefined]",
              "nn_interp": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "res_tmpl",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "/ants_template/oasis/T_template0.nii.gz",
              "output_image": "[Undefined]",
              "out_spacing": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374b74580>",
              "apply_smoothing": "True",
              "addvox": "[Undefined]",
              "nn_interp": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "thr_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "mode": "[Undefined]",
              "num_thresholds": "[Undefined]",
              "input_mask": "[Undefined]",
              "th_low": "0.5",
              "th_high": "1.0",
              "inside_value": "1.0",
              "outside_value": "0.0",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "dil_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "MD",
              "op1": "[Undefined]",
              "op2": "2",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_brainmask",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "GetLargestComponent",
              "op1": "[Undefined]",
              "op2": "[Undefined]",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_mask_",
            "type": "node",
            "inputs": {
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}",
              "in_file": "[Undefined]",
              "internal_datatype": "[Undefined]",
              "mask_file": "[Undefined]",
              "nan2zeros": "[Undefined]",
              "out_file": "[Undefined]",
              "output_datatype": "[Undefined]",
              "output_type": "NIFTI_GZ"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputnode",
            "type": "node",
            "inputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]",
              "out_segm": "[Undefined]",
              "out_tpms": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_mask": "[Undefined]",
              "bias_corrected": "[Undefined]",
              "bias_image": "[Undefined]",
              "out_segm": "[Undefined]",
              "out_tpms": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lap_target",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "Laplacian",
              "op1": "[Undefined]",
              "op2": "1.5 1",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "lap_tmpl",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "output_image": "[Undefined]",
              "operation": "Laplacian",
              "op1": "/ants_template/oasis/T_template0.nii.gz",
              "op2": "1.5 1",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "mrg_tmpl",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "/ants_template/oasis/T_template0.nii.gz",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "mrg_target",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "atropos_wf",
            "type": "workflow",
            "inputs": {
              "inputnode": "{'in_files': '[Undefined]', 'in_mask': '[Undefined]', 'in_mask_dilated': '[Undefined]'}",
              "copy_xform": "{}",
              "03_pad_mask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "01_atropos": "{'args': '[Undefined]', 'convergence_threshold': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'icm_use_synchronous_update': '[Undefined]', 'initialization': 'KMeans', 'kmeans_init_centers': '[Undefined]', 'likelihood_model': 'Gaussian', 'maximum_number_of_icm_terations': '[Undefined]', 'mrf_radius': [1, 1, 1], 'mrf_smoothing_factor': 0.1, 'n_iterations': 3, 'num_threads': 1, 'number_of_tissue_classes': 3, 'out_classified_image_name': '[Undefined]', 'output_posteriors_name_template': 'POSTERIOR_%02d.nii.gz', 'posterior_formulation': '[Undefined]', 'prior_image': '[Undefined]', 'prior_probability_threshold': '[Undefined]', 'prior_weighting': '[Undefined]', 'save_posteriors': '[Undefined]', 'use_mixture_model_proportions': '[Undefined]', 'use_random_seed': True}",
              "msk_conform": "{'function_str': 'def _conform_mask(in_mask, in_reference):\\n    \"\"\"Ensures the mask headers make sense and match those of the T1w\"\"\"\\n    from pathlib import Path\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    ref = nb.load(in_reference)\\n    nii = nb.load(in_mask)\\n    hdr = nii.header.copy()\\n    hdr.set_data_dtype(\\'int16\\')\\n    hdr.set_slope_inter(1, 0)\\n\\n    qform, qcode = ref.header.get_qform(coded=True)\\n    if qcode is not None:\\n        hdr.set_qform(qform, int(qcode))\\n\\n    sform, scode = ref.header.get_sform(coded=True)\\n    if scode is not None:\\n        hdr.set_sform(sform, int(scode))\\n\\n    if \\'_maths\\' in in_mask:  # Cut the name at first _maths occurrence\\n        ext = \\'\\'.join(Path(in_mask).suffixes)\\n        basename = Path(in_mask).name\\n        in_mask = basename.split(\\'_maths\\')[0] + ext\\n\\n    out_file = fname_presuffix(in_mask, suffix=\\'_mask\\',\\n                               newpath=str(Path()))\\n    nii.__class__(nii.get_fdata().astype(\\'int16\\'), ref.affine,\\n                  hdr).to_filename(out_file)\\n    return out_file\\n'}",
              "02_pad_segm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "04_sel_labels": "{'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [3, 2, 1]}",
              "05_get_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "06_get_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "07_fill_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}",
              "08_mult_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '08_mult_gm.nii.gz'}",
              "09_relabel_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '09_relabel_wm.nii.gz', 'second_input': 3.0}",
              "10_me_csf": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '10', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "11_add_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "12_relabel_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'output_product_image': '12_relabel_gm.nii.gz', 'second_input': 2.0}",
              "13_add_gm_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "14_sel_labels2": "{'function_str': \"def _select_labels(in_segm, labels):\\n    from os import getcwd\\n    import numpy as np\\n    import nibabel as nb\\n    from nipype.utils.filemanip import fname_presuffix\\n\\n    out_files = []\\n\\n    cwd = getcwd()\\n    nii = nb.load(in_segm)\\n    for l in labels:\\n        data = (nii.get_fdata() == l).astype(np.uint8)\\n        newnii = nii.__class__(data, nii.affine, nii.header)\\n        newnii.set_data_dtype('uint8')\\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\\n                                   newpath=cwd)\\n        newnii.to_filename(out_file)\\n        out_files.append(out_file)\\n    return out_files\\n\", 'labels': [2, 3]}",
              "15_add_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "16_me_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "17_comp_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '[Undefined]', 'operation': 'GetLargestComponent', 'output_image': '[Undefined]'}",
              "18_md_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '4', 'operation': 'MD', 'output_image': '[Undefined]'}",
              "19_fill_7": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '2', 'operation': 'FillHoles', 'output_image': '[Undefined]'}",
              "20_add_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'operation': 'addtozero', 'output_image': '[Undefined]'}",
              "21_md_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'MD', 'output_image': '[Undefined]'}",
              "22_me_7_2": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '5', 'operation': 'ME', 'output_image': '[Undefined]'}",
              "23_depad_mask": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "24_depad_segm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "26_depad_wm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "25_depad_gm": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "27_depad_csf": "{'args': '[Undefined]', 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'num_threads': 1, 'op2': '-10', 'operation': 'PadImage', 'output_image': '[Undefined]'}",
              "merge_tpms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
              "outputnode": "{}"
            },
            "outputs": {
              "inputnode": "{'in_files': None, 'in_mask': None, 'in_mask_dilated': None}",
              "copy_xform": "{'out_mask': None, 'out_segm': None, 'out_tpms': None}",
              "03_pad_mask": "{'output_image': None}",
              "01_atropos": "{'classified_image': None, 'posteriors': None}",
              "msk_conform": "{'out': None}",
              "02_pad_segm": "{'output_image': None}",
              "04_sel_labels": "{'out_csf': None, 'out_gm': None, 'out_wm': None}",
              "05_get_wm": "{'output_image': None}",
              "06_get_gm": "{'output_image': None}",
              "07_fill_gm": "{'output_image': None}",
              "08_mult_gm": "{'output_product_image': None}",
              "09_relabel_wm": "{'output_product_image': None}",
              "10_me_csf": "{'output_image': None}",
              "11_add_gm": "{'output_image': None}",
              "12_relabel_gm": "{'output_product_image': None}",
              "13_add_gm_wm": "{'output_image': None}",
              "14_sel_labels2": "{'out_gm': None, 'out_wm': None}",
              "15_add_7": "{'output_image': None}",
              "16_me_7": "{'output_image': None}",
              "17_comp_7": "{'output_image': None}",
              "18_md_7": "{'output_image': None}",
              "19_fill_7": "{'output_image': None}",
              "20_add_7_2": "{'output_image': None}",
              "21_md_7_2": "{'output_image': None}",
              "22_me_7_2": "{'output_image': None}",
              "23_depad_mask": "{'output_image': None}",
              "24_depad_segm": "{'output_image': None}",
              "26_depad_wm": "{'output_image': None}",
              "25_depad_gm": "{'output_image': None}",
              "27_depad_csf": "{'output_image': None}",
              "merge_tpms": "{'out': None}",
              "outputnode": "{'out_mask': None, 'out_segm': None, 'out_tpms': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputnode",
                "type": "node",
                "inputs": {
                  "in_files": "[Undefined]",
                  "in_mask": "[Undefined]",
                  "in_mask_dilated": "[Undefined]"
                },
                "outputs": {
                  "in_files": "[Undefined]",
                  "in_mask": "[Undefined]",
                  "in_mask_dilated": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "copy_xform",
                "type": "node",
                "inputs": {
                  "hdr_file": "[Undefined]",
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "outputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "03_pad_mask",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "01_atropos",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "intensity_images": "[Undefined]",
                  "mask_image": "[Undefined]",
                  "initialization": "KMeans",
                  "kmeans_init_centers": "[Undefined]",
                  "prior_image": "[Undefined]",
                  "number_of_tissue_classes": "3",
                  "prior_weighting": "[Undefined]",
                  "prior_probability_threshold": "[Undefined]",
                  "likelihood_model": "Gaussian",
                  "mrf_smoothing_factor": "0.1",
                  "mrf_radius": "[1, 1, 1]",
                  "icm_use_synchronous_update": "[Undefined]",
                  "maximum_number_of_icm_terations": "[Undefined]",
                  "n_iterations": "3",
                  "convergence_threshold": "0.0",
                  "posterior_formulation": "[Undefined]",
                  "use_random_seed": "True",
                  "use_mixture_model_proportions": "[Undefined]",
                  "out_classified_image_name": "[Undefined]",
                  "save_posteriors": "[Undefined]",
                  "output_posteriors_name_template": "POSTERIOR_%02d.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "classified_image": "[Undefined]",
                  "posteriors": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "msk_conform",
                "type": "node",
                "inputs": {
                  "function_str": "def _conform_mask(in_mask, in_reference):\n    \"\"\"Ensures the mask headers make sense and match those of the T1w\"\"\"\n    from pathlib import Path\n    import nibabel as nb\n    from nipype.utils.filemanip import fname_presuffix\n\n    ref = nb.load(in_reference)\n    nii = nb.load(in_mask)\n    hdr = nii.header.copy()\n    hdr.set_data_dtype('int16')\n    hdr.set_slope_inter(1, 0)\n\n    qform, qcode = ref.header.get_qform(coded=True)\n    if qcode is not None:\n        hdr.set_qform(qform, int(qcode))\n\n    sform, scode = ref.header.get_sform(coded=True)\n    if scode is not None:\n        hdr.set_sform(sform, int(scode))\n\n    if '_maths' in in_mask:  # Cut the name at first _maths occurrence\n        ext = ''.join(Path(in_mask).suffixes)\n        basename = Path(in_mask).name\n        in_mask = basename.split('_maths')[0] + ext\n\n    out_file = fname_presuffix(in_mask, suffix='_mask',\n                               newpath=str(Path()))\n    nii.__class__(nii.get_fdata().astype('int16'), ref.affine,\n                  hdr).to_filename(out_file)\n    return out_file\n",
                  "in_mask": "[Undefined]",
                  "in_reference": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "02_pad_segm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "04_sel_labels",
                "type": "node",
                "inputs": {
                  "function_str": "def _select_labels(in_segm, labels):\n    from os import getcwd\n    import numpy as np\n    import nibabel as nb\n    from nipype.utils.filemanip import fname_presuffix\n\n    out_files = []\n\n    cwd = getcwd()\n    nii = nb.load(in_segm)\n    for l in labels:\n        data = (nii.get_fdata() == l).astype(np.uint8)\n        newnii = nii.__class__(data, nii.affine, nii.header)\n        newnii.set_data_dtype('uint8')\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\n                                   newpath=cwd)\n        newnii.to_filename(out_file)\n        out_files.append(out_file)\n    return out_files\n",
                  "in_segm": "[Undefined]",
                  "labels": "[3, 2, 1]"
                },
                "outputs": {
                  "out_wm": "[Undefined]",
                  "out_gm": "[Undefined]",
                  "out_csf": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "05_get_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "06_get_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "07_fill_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "FillHoles",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "08_mult_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "[Undefined]",
                  "output_product_image": "08_mult_gm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "09_relabel_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "3.0",
                  "output_product_image": "09_relabel_wm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "10_me_csf",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "11_add_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "12_relabel_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "first_input": "[Undefined]",
                  "second_input": "2.0",
                  "output_product_image": "12_relabel_gm.nii.gz",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_product_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "13_add_gm_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "14_sel_labels2",
                "type": "node",
                "inputs": {
                  "function_str": "def _select_labels(in_segm, labels):\n    from os import getcwd\n    import numpy as np\n    import nibabel as nb\n    from nipype.utils.filemanip import fname_presuffix\n\n    out_files = []\n\n    cwd = getcwd()\n    nii = nb.load(in_segm)\n    for l in labels:\n        data = (nii.get_fdata() == l).astype(np.uint8)\n        newnii = nii.__class__(data, nii.affine, nii.header)\n        newnii.set_data_dtype('uint8')\n        out_file = fname_presuffix(in_segm, suffix='_class-%02d' % l,\n                                   newpath=cwd)\n        newnii.to_filename(out_file)\n        out_files.append(out_file)\n    return out_files\n",
                  "in_segm": "[Undefined]",
                  "labels": "[2, 3]"
                },
                "outputs": {
                  "out_gm": "[Undefined]",
                  "out_wm": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "15_add_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "16_me_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "17_comp_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "GetLargestComponent",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "18_md_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "MD",
                  "op1": "[Undefined]",
                  "op2": "4",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "19_fill_7",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "FillHoles",
                  "op1": "[Undefined]",
                  "op2": "2",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "20_add_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "addtozero",
                  "op1": "[Undefined]",
                  "op2": "[Undefined]",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "21_md_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "MD",
                  "op1": "[Undefined]",
                  "op2": "5",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "22_me_7_2",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "ME",
                  "op1": "[Undefined]",
                  "op2": "5",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "23_depad_mask",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "24_depad_segm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "26_depad_wm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "25_depad_gm",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "27_depad_csf",
                "type": "node",
                "inputs": {
                  "dimension": "3",
                  "output_image": "[Undefined]",
                  "operation": "PadImage",
                  "op1": "[Undefined]",
                  "op2": "-10",
                  "num_threads": "1",
                  "args": "[Undefined]",
                  "environ": "{'NSLOTS': '1'}"
                },
                "outputs": {
                  "output_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "merge_tpms",
                "type": "node",
                "inputs": {
                  "axis": "vstack",
                  "no_flatten": "False",
                  "ravel_inputs": "False",
                  "in1": "[Undefined]",
                  "in2": "[Undefined]",
                  "in3": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputnode",
                "type": "node",
                "inputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "outputs": {
                  "out_mask": "[Undefined]",
                  "out_segm": "[Undefined]",
                  "out_tpms": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputnode",
                "target": "copy_xform"
              },
              {
                "origin": "inputnode",
                "target": "03_pad_mask"
              },
              {
                "origin": "inputnode",
                "target": "01_atropos"
              },
              {
                "origin": "inputnode",
                "target": "msk_conform"
              },
              {
                "origin": "copy_xform",
                "target": "outputnode"
              },
              {
                "origin": "03_pad_mask",
                "target": "20_add_7_2"
              },
              {
                "origin": "01_atropos",
                "target": "02_pad_segm"
              },
              {
                "origin": "msk_conform",
                "target": "copy_xform"
              },
              {
                "origin": "02_pad_segm",
                "target": "04_sel_labels"
              },
              {
                "origin": "04_sel_labels",
                "target": "05_get_wm"
              },
              {
                "origin": "04_sel_labels",
                "target": "06_get_gm"
              },
              {
                "origin": "04_sel_labels",
                "target": "10_me_csf"
              },
              {
                "origin": "04_sel_labels",
                "target": "27_depad_csf"
              },
              {
                "origin": "05_get_wm",
                "target": "09_relabel_wm"
              },
              {
                "origin": "06_get_gm",
                "target": "07_fill_gm"
              },
              {
                "origin": "06_get_gm",
                "target": "08_mult_gm"
              },
              {
                "origin": "07_fill_gm",
                "target": "08_mult_gm"
              },
              {
                "origin": "08_mult_gm",
                "target": "11_add_gm"
              },
              {
                "origin": "09_relabel_wm",
                "target": "13_add_gm_wm"
              },
              {
                "origin": "09_relabel_wm",
                "target": "26_depad_wm"
              },
              {
                "origin": "10_me_csf",
                "target": "11_add_gm"
              },
              {
                "origin": "11_add_gm",
                "target": "12_relabel_gm"
              },
              {
                "origin": "12_relabel_gm",
                "target": "13_add_gm_wm"
              },
              {
                "origin": "12_relabel_gm",
                "target": "25_depad_gm"
              },
              {
                "origin": "13_add_gm_wm",
                "target": "14_sel_labels2"
              },
              {
                "origin": "13_add_gm_wm",
                "target": "24_depad_segm"
              },
              {
                "origin": "14_sel_labels2",
                "target": "15_add_7"
              },
              {
                "origin": "15_add_7",
                "target": "16_me_7"
              },
              {
                "origin": "16_me_7",
                "target": "17_comp_7"
              },
              {
                "origin": "17_comp_7",
                "target": "18_md_7"
              },
              {
                "origin": "18_md_7",
                "target": "19_fill_7"
              },
              {
                "origin": "19_fill_7",
                "target": "20_add_7_2"
              },
              {
                "origin": "20_add_7_2",
                "target": "21_md_7_2"
              },
              {
                "origin": "21_md_7_2",
                "target": "22_me_7_2"
              },
              {
                "origin": "22_me_7_2",
                "target": "23_depad_mask"
              },
              {
                "origin": "23_depad_mask",
                "target": "msk_conform"
              },
              {
                "origin": "24_depad_segm",
                "target": "copy_xform"
              },
              {
                "origin": "26_depad_wm",
                "target": "merge_tpms"
              },
              {
                "origin": "25_depad_gm",
                "target": "merge_tpms"
              },
              {
                "origin": "27_depad_csf",
                "target": "merge_tpms"
              },
              {
                "origin": "merge_tpms",
                "target": "copy_xform"
              }
            ]
          },
          {
            "name": "sel_wm",
            "type": "node",
            "inputs": {
              "inlist": "[Undefined]",
              "index": "[2]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputnode",
            "target": "truncate_images_"
          },
          {
            "origin": "inputnode",
            "target": "copy_xform"
          },
          {
            "origin": "inputnode",
            "target": "inu_n4_final_"
          },
          {
            "origin": "inputnode",
            "target": "init_aff"
          },
          {
            "origin": "inputnode",
            "target": "norm"
          },
          {
            "origin": "inputnode",
            "target": "map_brainmask"
          },
          {
            "origin": "truncate_images_",
            "target": "inu_n4_"
          },
          {
            "origin": "copy_xform",
            "target": "outputnode"
          },
          {
            "origin": "inu_n4_final_",
            "target": "apply_mask_"
          },
          {
            "origin": "inu_n4_final_",
            "target": "copy_xform"
          },
          {
            "origin": "init_aff",
            "target": "norm"
          },
          {
            "origin": "norm",
            "target": "map_brainmask"
          },
          {
            "origin": "map_brainmask",
            "target": "thr_brainmask"
          },
          {
            "origin": "inu_n4_",
            "target": "res_target"
          },
          {
            "origin": "inu_n4_",
            "target": "lap_target"
          },
          {
            "origin": "inu_n4_",
            "target": "mrg_target"
          },
          {
            "origin": "inu_n4_",
            "target": "atropos_wf"
          },
          {
            "origin": "res_target",
            "target": "init_aff"
          },
          {
            "origin": "res_tmpl",
            "target": "init_aff"
          },
          {
            "origin": "thr_brainmask",
            "target": "dil_brainmask"
          },
          {
            "origin": "thr_brainmask",
            "target": "atropos_wf"
          },
          {
            "origin": "dil_brainmask",
            "target": "get_brainmask"
          },
          {
            "origin": "get_brainmask",
            "target": "copy_xform"
          },
          {
            "origin": "get_brainmask",
            "target": "atropos_wf"
          },
          {
            "origin": "apply_mask_",
            "target": "copy_xform"
          },
          {
            "origin": "lap_target",
            "target": "mrg_target"
          },
          {
            "origin": "lap_tmpl",
            "target": "mrg_tmpl"
          },
          {
            "origin": "mrg_tmpl",
            "target": "norm"
          },
          {
            "origin": "mrg_target",
            "target": "norm"
          },
          {
            "origin": "atropos_wf",
            "target": "sel_wm"
          },
          {
            "origin": "atropos_wf",
            "target": "apply_mask_"
          },
          {
            "origin": "atropos_wf",
            "target": "outputnode"
          },
          {
            "origin": "sel_wm",
            "target": "inu_n4_final_"
          }
        ]
      },
      {
        "name": "brain_extraction_34",
        "type": "node",
        "inputs": {
          "in_file_a": "[Undefined]",
          "in_file_b": "[Undefined]",
          "in_file_c": "[Undefined]",
          "out_file": "[Undefined]",
          "expr": "a*step(b)",
          "start_idx": "[Undefined]",
          "stop_idx": "[Undefined]",
          "single_idx": "[Undefined]",
          "overwrite": "[Undefined]",
          "other": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "ANTS_T1_to_template_40",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_brain': '[Undefined]', 'input_head': '[Undefined]', 'input_mask': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference_brain': '[Undefined]', 'reference_head': '[Undefined]', 'reference_mask': '[Undefined]', 'transform': '[Undefined]'}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}, 'calc_ants_warp': {'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}, 'select_forward_initial': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}, 'select_forward_rigid': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}, 'select_forward_affine': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}, 'select_forward_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}, 'select_inverse_warp': {'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}, 'outputspec': {'composite_transform': '[Undefined]', 'wait': '[Undefined]'}}",
          "write_composite_linear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "write_composite_invlinear_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "inverse_transform_flags": "{'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}",
          "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-T1w_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation_parameters': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-T1w_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "check_all_inv_transforms": "{'function_str': 'def check_transforms(transform_list):\\n    transform_number = list(filter(None, transform_list))\\n    return [(transform_number[index]) for index in\\n            range(len(transform_number))], len(transform_number)\\n'}",
          "inverse_all_transform_flags": "{'function_str': \"def generate_inverse_transform_flags(transform_list):\\n    inverse_transform_flags = []\\n    for transform in transform_list:\\n        # check `blip_warp_inverse` file name and rename it\\n        if 'WARPINV' in transform:\\n            inverse_transform_flags.append(False)\\n        if 'updated_affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Initial' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Rigid' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'Affine' in transform:\\n            inverse_transform_flags.append(True)\\n        if 'InverseWarp' in transform:\\n            inverse_transform_flags.append(False)\\n    return inverse_transform_flags\\n\"}"
        },
        "outputs": {
          "inputspec": "{'input_brain': None, 'input_head': None, 'input_mask': None, 'interpolation': None, 'reference_brain': None, 'reference_head': None, 'reference_mask': None, 'transform': None}",
          "anat_mni_ants_register": "{'inputspec': {'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}, 'calc_ants_warp': {'warp_list': None, 'warped_image': None}, 'select_forward_initial': {'selected_warp': None}, 'select_forward_rigid': {'selected_warp': None}, 'select_forward_affine': {'selected_warp': None}, 'select_forward_warp': {'selected_warp': None}, 'select_inverse_warp': {'selected_warp': None}, 'outputspec': {'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}}",
          "write_composite_linear_xfm": "{'output_image': None}",
          "collect_transforms": "{'out': None}",
          "check_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_invlinear_xfm": "{'output_image': None}",
          "collect_inv_transforms": "{'out': None}",
          "check_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_transform_flags": "{'inverse_transform_flags': None}",
          "write_composite_xfm": "{'output_image': None}",
          "collect_all_transforms": "{'out': None}",
          "check_all_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "write_composite_inv_xfm": "{'output_image': None}",
          "collect_all_inv_transforms": "{'out': None}",
          "check_all_inv_transforms": "{'checked_transform_list': None, 'list_length': None}",
          "inverse_all_transform_flags": "{'inverse_transform_flags': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "LanczosWindowedSinc"
            },
            "outputs": {
              "input_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "input_head": "[Undefined]",
              "reference_head": "[Undefined]",
              "input_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "anat_mni_ants_register",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
              "calc_ants_warp": "{'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}",
              "select_forward_initial": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}",
              "select_forward_rigid": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}",
              "select_forward_affine": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}",
              "select_forward_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}",
              "select_inverse_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}",
              "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
            },
            "outputs": {
              "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
              "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
              "select_forward_initial": "{'selected_warp': None}",
              "select_forward_rigid": "{'selected_warp': None}",
              "select_forward_affine": "{'selected_warp': None}",
              "select_forward_warp": "{'selected_warp': None}",
              "select_inverse_warp": "{'selected_warp': None}",
              "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "None",
                  "ants_para": "[{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}]",
                  "interp": "[Undefined]"
                },
                "outputs": {
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "interp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "calc_ants_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def hardcoded_reg(moving_brain, reference_brain, moving_skull,\n                  reference_skull, ants_para, moving_mask=None,\n                  reference_mask=None, fixed_image_mask=None, interp=None,\n                  reg_with_skull=0):\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == 'dimensionality':\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = 'Dimensionality specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 2, 3, or 4 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--dimensionality\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'verbose':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Verbose output option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--verbose\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'float':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Float option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--float\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'collapse-output-transforms':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'collapse-output-transforms specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--collapse-output-transforms\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'winsorize-image-intensities':\n                if ants_para[para_index][para_type]['lowerQuantile'] is None or ants_para[para_index][para_type]['upperQuantile'] is None:\n                    err_msg = 'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--winsorize-image-intensities\")\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type]['lowerQuantile'],\n                        ants_para[para_index][para_type]['upperQuantile']))\n\n            elif para_type == 'initial-moving-transform':\n                if ants_para[para_index][para_type][\n                    'initializationFeature'] is None:\n                    err_msg = 'Please specifiy initializationFeature of ANTs parameters in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--initial-moving-transform\")\n                    if reg_with_skull == 1:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_skull, moving_skull,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n                    else:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_brain, moving_brain,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n\n            elif para_type == 'transforms':\n                for trans_index in range(\n                        len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][\n                        trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type == 'Rigid' or trans_type == 'Affine':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type,\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n\n                        if trans_type == 'SyN':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                SyN_para = []\n                                SyN_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'updateFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'updateFieldVarianceInVoxelSpace']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'totalFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'totalFieldVarianceInVoxelSpace']))\n                                SyN_para = ','.join([str(elem)\n                                                     for elem in SyN_para])\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type, SyN_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'MI':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric'][\n                                                'numberOfBins'] is None:\n                                err_msg = 'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                MI_para = []\n                                MI_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'numberOfBins']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                MI_para = ','.join(\n                                    [str(elem) for elem in MI_para])\n                                regcmd.append(\"--metric\")\n                                if reg_with_skull == 1:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_skull, moving_skull, MI_para))\n                                else:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_brain, moving_brain, MI_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'CC':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric']['radius'] is None:\n                                err_msg = 'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                CC_para = []\n                                CC_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'radius']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                CC_para = ','.join(\n                                    [str(elem) for elem in CC_para])\n                                regcmd.append(\"--metric\")\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\n                                    reference_skull, moving_skull, CC_para))\n\n                        if 'convergence' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            convergence_para = []\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['convergence'][\n                                'iteration'] is None:\n                                err_msg = 'Please specifiy convergence iteration of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                convergence_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'convergence']['iteration']))\n                                if 'convergenceThreshold' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceThreshold'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceThreshold']))\n                                if 'convergenceWindowSize' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceWindowSize'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceWindowSize']))\n                                convergence_para = ','.join(\n                                    [str(elem) for elem in convergence_para])\n                                regcmd.append(\"--convergence\")\n                                regcmd.append(\n                                    \"[{0}]\".format(convergence_para))\n\n                        if 'smoothing-sigmas' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'smoothing-sigmas'] is not None:\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['smoothing-sigmas']))\n\n                        if 'shrink-factors' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'shrink-factors'] is not None:\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['shrink-factors']))\n\n                        if 'use-histogram-matching' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['use-histogram-matching']:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if 'winsorize-image-intensities' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'lowerQuantile'] is not None and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'upperQuantile'] is not None:\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            regcmd.append(\"[{0},{1}]\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['winsorize-image-intensities']\n                                ['lowerQuantile'],\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type][\n                                    'winsorize-image-intensities'][\n                                    'upperQuantile']))\n\n                        if 'masks' in ants_para[para_index][para_type][trans_index][\n                            trans_type] and ants_para[para_index][para_type][\n                                trans_index][trans_type]['masks'] is not None:\n                            if ants_para[para_index][para_type][trans_index][trans_type]['masks']:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == 'masks':\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if ants_para[para_index][para_type][\n                        'fixed_image_mask'] == False and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        err_msg = 'Masks option in ANTs parameters: %d is not supported. ' \\\n                                  'Please set `fixed_image_mask` as True. ' \\\n                                  'Or set both `fixed_image_mask` and `moving_image_mask` as False' % \\\n                                  ants_para[para_index][para_type]\n                        raise Exception(err_msg)\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ',' + str(\n                            moving_mask) + ']')\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == False:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ']')\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(\"{0}\".format(interp))\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), 'command.txt')\n    with open(command_file, 'wt') as f:\n        f.write(' '.join(regcmd))\n\n    try:\n        retcode = subprocess.check_output(regcmd)\n    except Exception as e:\n        raise Exception('[!] ANTS registration did not complete successfully.'\n                        '\\n\\nError details:\\n{0}\\n{1}\\n'.format(e, e.output))\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir('.') if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        raise Exception(\"\\n\\n[!] No registration output file found. ANTS \"\n                        \"registration may not have completed \"\n                        \"successfully.\\n\\n\")\n\n    return warp_list, warped_image\n",
                  "moving_brain": "[Undefined]",
                  "reference_brain": "[Undefined]",
                  "moving_skull": "[Undefined]",
                  "reference_skull": "[Undefined]",
                  "ants_para": "[Undefined]",
                  "moving_mask": "[Undefined]",
                  "reference_mask": "[Undefined]",
                  "fixed_image_mask": "[Undefined]",
                  "interp": "[Undefined]",
                  "reg_with_skull": "[Undefined]"
                },
                "outputs": {
                  "warp_list": "[Undefined]",
                  "warped_image": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_initial",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Initial"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_rigid",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Rigid"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_affine",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Affine"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_forward_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Warp"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "select_inverse_warp",
                "type": "node",
                "inputs": {
                  "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
                  "warp_list": "[Undefined]",
                  "selection": "Inverse"
                },
                "outputs": {
                  "selected_warp": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "outputs": {
                  "ants_initial_xfm": "[Undefined]",
                  "ants_rigid_xfm": "[Undefined]",
                  "ants_affine_xfm": "[Undefined]",
                  "warp_field": "[Undefined]",
                  "inverse_warp_field": "[Undefined]",
                  "composite_transform": "[Undefined]",
                  "wait": "[Undefined]",
                  "normalized_output_brain": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "calc_ants_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_initial"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_rigid"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_affine"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_forward_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "select_inverse_warp"
              },
              {
                "origin": "calc_ants_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_initial",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_rigid",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_affine",
                "target": "outputspec"
              },
              {
                "origin": "select_forward_warp",
                "target": "outputspec"
              },
              {
                "origin": "select_inverse_warp",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "write_composite_linear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_invlinear_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if 'WARPINV' in transform:\n            inverse_transform_flags.append(False)\n        if 'updated_affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'Initial' in transform:\n            inverse_transform_flags.append(True)\n        if 'Rigid' in transform:\n            inverse_transform_flags.append(True)\n        if 'Affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'InverseWarp' in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-T1w_to-template_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_inv_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-T1w_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]",
              "in3": "[Undefined]",
              "in4": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "check_all_inv_transforms",
            "type": "node",
            "inputs": {
              "function_str": "def check_transforms(transform_list):\n    transform_number = list(filter(None, transform_list))\n    return [(transform_number[index]) for index in\n            range(len(transform_number))], len(transform_number)\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "checked_transform_list": "[Undefined]",
              "list_length": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "inverse_all_transform_flags",
            "type": "node",
            "inputs": {
              "function_str": "def generate_inverse_transform_flags(transform_list):\n    inverse_transform_flags = []\n    for transform in transform_list:\n        # check `blip_warp_inverse` file name and rename it\n        if 'WARPINV' in transform:\n            inverse_transform_flags.append(False)\n        if 'updated_affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'Initial' in transform:\n            inverse_transform_flags.append(True)\n        if 'Rigid' in transform:\n            inverse_transform_flags.append(True)\n        if 'Affine' in transform:\n            inverse_transform_flags.append(True)\n        if 'InverseWarp' in transform:\n            inverse_transform_flags.append(False)\n    return inverse_transform_flags\n",
              "transform_list": "[Undefined]"
            },
            "outputs": {
              "inverse_transform_flags": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "anat_mni_ants_register"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_xfm"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_transforms"
          },
          {
            "origin": "anat_mni_ants_register",
            "target": "collect_all_inv_transforms"
          },
          {
            "origin": "collect_transforms",
            "target": "check_transforms"
          },
          {
            "origin": "check_transforms",
            "target": "write_composite_linear_xfm"
          },
          {
            "origin": "collect_inv_transforms",
            "target": "check_inv_transforms"
          },
          {
            "origin": "check_inv_transforms",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "check_inv_transforms",
            "target": "inverse_transform_flags"
          },
          {
            "origin": "inverse_transform_flags",
            "target": "write_composite_invlinear_xfm"
          },
          {
            "origin": "collect_all_transforms",
            "target": "check_all_transforms"
          },
          {
            "origin": "check_all_transforms",
            "target": "write_composite_xfm"
          },
          {
            "origin": "collect_all_inv_transforms",
            "target": "check_all_inv_transforms"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "check_all_inv_transforms",
            "target": "inverse_all_transform_flags"
          },
          {
            "origin": "inverse_all_transform_flags",
            "target": "write_composite_inv_xfm"
          }
        ]
      },
      {
        "name": "resampled_T1w-brain-template",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz",
          "template_name": "T1w-brain-template",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-template",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "template_name": "T1w-template",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-brain-template-mask",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "1mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz",
          "template_name": "T1w-brain-template-mask",
          "tag": "resolution_for_anat"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_wholehead_T1w_to_T1template_53",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'LanczosWindowedSinc', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_wholehead_T1w_to_T1template_53": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_wholehead_T1w_to_T1template_53": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "LanczosWindowedSinc"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_wholehead_T1w_to_T1template_53",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_53"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_wholehead_T1w_to_T1template_53",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_53"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_wholehead_T1w_to_T1template_53"
          }
        ]
      },
      {
        "name": "write_composite_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-T1w_to-template_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_T1mask_to_T1template_57",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_T1mask_to_T1template_57": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_T1mask_to_T1template_57": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_T1mask_to_T1template_57",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_T1mask_to_T1template_57"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_T1mask_to_T1template_57",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_T1mask_to_T1template_57"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_T1mask_to_T1template_57"
          }
        ]
      },
      {
        "name": "segment_61",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "out_basename": "segment",
          "number_classes": "[Undefined]",
          "output_biasfield": "[Undefined]",
          "output_biascorrected": "[Undefined]",
          "img_type": "1",
          "bias_iters": "[Undefined]",
          "bias_lowpass": "[Undefined]",
          "init_seg_smooth": "[Undefined]",
          "segments": "True",
          "init_transform": "[Undefined]",
          "other_priors": "[Undefined]",
          "no_pve": "[Undefined]",
          "no_bias": "[Undefined]",
          "use_priors": "[Undefined]",
          "segment_iters": "[Undefined]",
          "mixel_smooth": "[Undefined]",
          "iters_afterbias": "[Undefined]",
          "hyper": "[Undefined]",
          "verbose": "[Undefined]",
          "manual_seg": "[Undefined]",
          "probability_maps": "True",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "tissue_class_map": "[Undefined]",
          "tissue_class_files": "[Undefined]",
          "restored_image": "[Undefined]",
          "mixeltype": "[Undefined]",
          "partial_volume_map": "[Undefined]",
          "partial_volume_files": "[Undefined]",
          "bias_field": "[Undefined]",
          "probability_maps": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_csf_61",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 0.5 -uthr 1.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_gm_61",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 1.5 -uthr 2.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_pve_wm_61",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 2.5 -uthr 3.5 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "CSF_61",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_CSF_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_CSF_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_CSF_61": "{'out_file': None}",
          "binarize_CSF_61": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_CSF_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_CSF_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_CSF_61"
          },
          {
            "origin": "threshold_segmentmap_CSF_61",
            "target": "binarize_CSF_61"
          },
          {
            "origin": "binarize_CSF_61",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "GM_61",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_GM_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_GM_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_GM_61": "{'out_file': None}",
          "binarize_GM_61": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_GM_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_GM_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_GM_61"
          },
          {
            "origin": "threshold_segmentmap_GM_61",
            "target": "binarize_GM_61"
          },
          {
            "origin": "binarize_GM_61",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "WM_61",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain': '[Undefined]', 'brain_mask': '[Undefined]', 'erosion_mm': '[Undefined]', 'erosion_prop': '[Undefined]', 'mask_erosion_mm': '[Undefined]', 'probability_tissue_map': '[Undefined]', 'template_to_T1_xfm': '[Undefined]', 'threshold': 0.95, 'tissue_class_file': '[Undefined]', 'tissue_prior': '[Undefined]'}",
          "threshold_segmentmap_WM_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "binarize_WM_61": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'op_string': '-bin ', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "outputspec": "{'probability_tissue_map': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'brain': None, 'brain_mask': None, 'erosion_mm': None, 'erosion_prop': None, 'mask_erosion_mm': None, 'probability_tissue_map': None, 'template_to_T1_xfm': None, 'threshold': None, 'tissue_class_file': None, 'tissue_prior': None}",
          "threshold_segmentmap_WM_61": "{'out_file': None}",
          "binarize_WM_61": "{'out_file': None}",
          "outputspec": "{'probability_tissue_map': None, 'segment_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "0.95",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "outputs": {
              "tissue_prior": "[Undefined]",
              "threshold": "[Undefined]",
              "erosion_prop": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "brain": "[Undefined]",
              "brain_mask": "[Undefined]",
              "tissue_class_file": "[Undefined]",
              "probability_tissue_map": "[Undefined]",
              "template_to_T1_xfm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "threshold_segmentmap_WM_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "binarize_WM_61",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "-bin ",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "outputs": {
              "segment_mask": "[Undefined]",
              "probability_tissue_map": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "threshold_segmentmap_WM_61"
          },
          {
            "origin": "threshold_segmentmap_WM_61",
            "target": "binarize_WM_61"
          },
          {
            "origin": "binarize_WM_61",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "get_csf_61",
        "type": "node",
        "inputs": {
          "function_str": "def pick_wm_prob_0(probability_maps):\n    \"\"\"Returns the csf probability map from the list of segmented\n    probability maps\n\n    Parameters\n    ----------\n\n    probability_maps : list (string)\n        List of Probability Maps\n\n    Returns\n    -------\n\n    file : string\n        Path to segment_prob_0.nii.gz is returned\n    \"\"\"\n    if isinstance(probability_maps, list):\n        if len(probability_maps) == 1:\n            probability_maps = probability_maps[0]\n        for filename in probability_maps:\n            if filename.endswith(\"prob_0.nii.gz\"):\n                return filename\n    return None\n",
          "probability_maps": "[Undefined]"
        },
        "outputs": {
          "filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_deoblique_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "deoblique": "True",
          "xorigin": "[Undefined]",
          "yorigin": "[Undefined]",
          "zorigin": "[Undefined]",
          "duporigin_file": "[Undefined]",
          "xdel": "[Undefined]",
          "ydel": "[Undefined]",
          "zdel": "[Undefined]",
          "xyzscale": "[Undefined]",
          "space": "[Undefined]",
          "atrcopy": "[Undefined]",
          "atrstring": "[Undefined]",
          "atrfloat": "[Undefined]",
          "atrint": "[Undefined]",
          "saveatr": "[Undefined]",
          "nosaveatr": "[Undefined]",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_reorient_2",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "orientation": "RPI",
          "resample_mode": "[Undefined]",
          "voxel_size": "[Undefined]",
          "master": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "edit_func_79",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'func': '[Undefined]', 'start_idx': 0, 'stop_idx': None}",
          "func_get_idx": "{'function_str': 'def get_idx(in_files, stop_idx=None, start_idx=None):\\n    \"\"\"\\n    Method to get the first and the last slice for\\n    the functional run. It verifies the user specified\\n    first and last slice. If the values are not valid, it\\n    calculates and returns the very first and the last slice\\n\\n    Parameters\\n    ----------\\n    in_file : str (nifti file)\\n       Path to input functional run\\n\\n    stop_idx : int\\n        Last volume to be considered, specified by user\\n        in the configuration file\\n\\n    stop_idx : int\\n        First volume to be considered, specified by user\\n        in the configuration file\\n\\n    Returns\\n    -------\\n    stop_idx :  int\\n        Value of first slice to consider for the functional run\\n\\n    start_idx : int\\n        Value of last slice to consider for the functional run\\n\\n    \"\"\"\\n\\n    # Import packages\\n    from nibabel import load\\n\\n    # Init variables\\n    img = load(in_files)\\n    hdr = img.header\\n    shape = hdr.get_data_shape()\\n\\n    # Check to make sure the input file is 4-dimensional\\n    if len(shape) != 4:\\n        raise TypeError(\\'Input nifti file: %s is not a 4D file\\' % in_files)\\n    # Grab the number of volumes\\n    nvols = int(hdr.get_data_shape()[3])\\n\\n    if (start_idx == None) or (int(start_idx) < 0) or (\\n        int(start_idx) > (nvols - 1)):\\n        startidx = 0\\n    else:\\n        startidx = int(start_idx)\\n\\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\\n        stopidx = nvols - 1\\n    else:\\n        stopidx = int(stop_idx)\\n\\n    return stopidx, startidx\\n'}",
          "func_drop_trs": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'func': None, 'start_idx': None, 'stop_idx': None}",
          "func_get_idx": "{'startidx': None, 'stopidx': None}",
          "func_drop_trs": "{'out_file': None}",
          "outputspec": "{'edited_func': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "start_idx": "0",
              "stop_idx": "None"
            },
            "outputs": {
              "func": "[Undefined]",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_get_idx",
            "type": "node",
            "inputs": {
              "function_str": "def get_idx(in_files, stop_idx=None, start_idx=None):\n    \"\"\"\n    Method to get the first and the last slice for\n    the functional run. It verifies the user specified\n    first and last slice. If the values are not valid, it\n    calculates and returns the very first and the last slice\n\n    Parameters\n    ----------\n    in_file : str (nifti file)\n       Path to input functional run\n\n    stop_idx : int\n        Last volume to be considered, specified by user\n        in the configuration file\n\n    stop_idx : int\n        First volume to be considered, specified by user\n        in the configuration file\n\n    Returns\n    -------\n    stop_idx :  int\n        Value of first slice to consider for the functional run\n\n    start_idx : int\n        Value of last slice to consider for the functional run\n\n    \"\"\"\n\n    # Import packages\n    from nibabel import load\n\n    # Init variables\n    img = load(in_files)\n    hdr = img.header\n    shape = hdr.get_data_shape()\n\n    # Check to make sure the input file is 4-dimensional\n    if len(shape) != 4:\n        raise TypeError('Input nifti file: %s is not a 4D file' % in_files)\n    # Grab the number of volumes\n    nvols = int(hdr.get_data_shape()[3])\n\n    if (start_idx == None) or (int(start_idx) < 0) or (\n        int(start_idx) > (nvols - 1)):\n        startidx = 0\n    else:\n        startidx = int(start_idx)\n\n    if (stop_idx in [None, \"End\"]) or (int(stop_idx) > (nvols - 1)):\n        stopidx = nvols - 1\n    else:\n        stopidx = int(stop_idx)\n\n    return stopidx, startidx\n",
              "in_files": "[Undefined]",
              "stop_idx": "[Undefined]",
              "start_idx": "[Undefined]"
            },
            "outputs": {
              "stopidx": "[Undefined]",
              "startidx": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "func_drop_trs",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "[Undefined]",
              "expr": "a",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "edited_func": "[Undefined]"
            },
            "outputs": {
              "edited_func": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "func_get_idx"
          },
          {
            "origin": "inputspec",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_get_idx",
            "target": "func_drop_trs"
          },
          {
            "origin": "func_drop_trs",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_get_fmriprep_ref_82",
        "type": "node",
        "inputs": {
          "function_str": "def estimate_reference_image(in_file):\n    \"\"\"fMRIPrep-style BOLD reference\n    Ref: https://github.com/nipreps/niworkflows/blob/maint/1.3.x/niworkflows/interfaces/registration.py#L446-L549\n    \"\"\"\n    import os\n    import numpy as np\n    import nibabel as nb\n\n    ref_input = [in_file]\n    mc_out_file = 'bold_mc.nii.gz'\n\n    # Build the nibabel spatial image we will work with\n    ref_im = []\n    for im_i in ref_input:\n        max_new_volumes = 50 - len(ref_im)\n        if max_new_volumes <= 0:\n            break\n        nib_i = nb.squeeze_image(nb.load(im_i))\n        if nib_i.dataobj.ndim == 3:\n            ref_im.append(nib_i)\n        elif nib_i.dataobj.ndim == 4:\n            ref_im += nb.four_to_three(nib_i.slicer[..., :max_new_volumes])\n    ref_im = nb.squeeze_image(nb.concat_images(ref_im))\n\n    out_file = os.path.join(os.getcwd(), \"ref_bold.nii.gz\")\n\n    # Slicing may induce inconsistencies with shape-dependent values in extensions.\n    # For now, remove all. If this turns out to be a mistake, we can select extensions\n    # that don't break pipeline stages.\n    ref_im.header.extensions.clear()\n\n    if ref_im.shape[-1] > 40:\n        ref_im = nb.Nifti1Image(\n            ref_im.dataobj[:, :, :, 20:40], ref_im.affine, ref_im.header\n        )\n\n    ref_name = os.path.join(os.getcwd(), \"slice.nii.gz\")\n    ref_im.to_filename(ref_name)\n    os.system('3dvolreg -Fourier -twopass -zpad 4 '\n              f'-prefix {mc_out_file} {ref_name}')\n\n    mc_slice_nii = nb.load(mc_out_file)\n\n    median_image_data = np.median(mc_slice_nii.get_fdata(), axis=3)\n\n    nb.Nifti1Image(median_image_data, ref_im.affine, ref_im.header\n                   ).to_filename(out_file)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_motion_correct_mcflirt_85",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "cost": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "ref_vol": "[Undefined]",
          "scaling": "[Undefined]",
          "smooth": "[Undefined]",
          "rotation": "[Undefined]",
          "stages": "[Undefined]",
          "init": "[Undefined]",
          "interpolation": "[Undefined]",
          "use_gradient": "[Undefined]",
          "use_contour": "[Undefined]",
          "mean_vol": "[Undefined]",
          "stats_imgs": "[Undefined]",
          "save_mats": "True",
          "save_plots": "True",
          "save_rms": "True",
          "ref_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "variance_img": "[Undefined]",
          "std_img": "[Undefined]",
          "mean_img": "[Undefined]",
          "par_file": "[Undefined]",
          "mat_file": "[Undefined]",
          "rms_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_motion_params_85",
        "type": "node",
        "inputs": {
          "function_str": "def normalize_motion_parameters(in_file):\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\n    import os\n    import numpy as np\n\n    motion_params = np.genfromtxt(in_file).T\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\n                               motion_params[0, :] * 180 / np.pi,\n                               -motion_params[1, :] * 180 / np.pi,\n                               motion_params[5, :],\n                               motion_params[3, :],\n                               -motion_params[4, :]))\n    motion_params = np.transpose(motion_params)\n\n    out_file = os.path.join(os.getcwd(), 'motion_params.tsv')\n    np.savetxt(out_file, motion_params)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_mcflirt_rms_abs_85",
        "type": "node",
        "inputs": {
          "function_str": "def get_mcflirt_rms_abs(rms_files):\n    for path in rms_files:\n        if 'abs.rms' in path:\n            abs_file = path\n        if 'rel.rms' in path:\n            rels_file = path\n    return abs_file, rels_file\n",
          "rms_files": "[Undefined]"
        },
        "outputs": {
          "abs_file": "[Undefined]",
          "rels_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_slice_timing_correction_92",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'func_ts': '[Undefined]', 'tpattern': '[Undefined]', 'tr': '[Undefined]'}",
          "slice_timing": "{'args': '[Undefined]', 'environ': {}, 'ignore': '[Undefined]', 'interp': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'rlt': '[Undefined]', 'rltplus': '[Undefined]', 'slice_encoding_direction': 'k', 'slice_timing': '[Undefined]', 'tslice': '[Undefined]', 'tzero': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'func_ts': None, 'tpattern': None, 'tr': None}",
          "slice_timing": "{'out_file': None, 'timing_file': None}",
          "outputspec": "{'slice_time_corrected': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func_ts": "[Undefined]",
              "tr": "[Undefined]",
              "tpattern": "[Undefined]"
            },
            "outputs": {
              "func_ts": "[Undefined]",
              "tr": "[Undefined]",
              "tpattern": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "slice_timing",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "tr": "[Undefined]",
              "tzero": "[Undefined]",
              "tslice": "[Undefined]",
              "ignore": "[Undefined]",
              "interp": "[Undefined]",
              "tpattern": "[Undefined]",
              "slice_timing": "[Undefined]",
              "slice_encoding_direction": "k",
              "rlt": "[Undefined]",
              "rltplus": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "timing_file": "[Undefined]",
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "slice_time_corrected": "[Undefined]"
            },
            "outputs": {
              "slice_time_corrected": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "slice_timing"
          },
          {
            "origin": "slice_timing",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_mean_95",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "mask": "[Undefined]",
          "options": "-mean",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_motion_correct_mcflirt_98",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "cost": "[Undefined]",
          "bins": "[Undefined]",
          "dof": "[Undefined]",
          "ref_vol": "[Undefined]",
          "scaling": "[Undefined]",
          "smooth": "[Undefined]",
          "rotation": "[Undefined]",
          "stages": "[Undefined]",
          "init": "[Undefined]",
          "interpolation": "[Undefined]",
          "use_gradient": "[Undefined]",
          "use_contour": "[Undefined]",
          "mean_vol": "[Undefined]",
          "stats_imgs": "[Undefined]",
          "save_mats": "True",
          "save_plots": "True",
          "save_rms": "True",
          "ref_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "variance_img": "[Undefined]",
          "std_img": "[Undefined]",
          "mean_img": "[Undefined]",
          "par_file": "[Undefined]",
          "mat_file": "[Undefined]",
          "rms_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_motion_params_98",
        "type": "node",
        "inputs": {
          "function_str": "def normalize_motion_parameters(in_file):\n    \"\"\"Convert FSL mcflirt motion parameters to AFNI space\"\"\"\n    import os\n    import numpy as np\n\n    motion_params = np.genfromtxt(in_file).T\n    motion_params = np.vstack((motion_params[2, :] * 180 / np.pi,\n                               motion_params[0, :] * 180 / np.pi,\n                               -motion_params[1, :] * 180 / np.pi,\n                               motion_params[5, :],\n                               motion_params[3, :],\n                               -motion_params[4, :]))\n    motion_params = np.transpose(motion_params)\n\n    out_file = os.path.join(os.getcwd(), 'motion_params.tsv')\n    np.savetxt(out_file, motion_params)\n\n    return out_file\n",
          "in_file": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_mcflirt_rms_abs_98",
        "type": "node",
        "inputs": {
          "function_str": "def get_mcflirt_rms_abs(rms_files):\n    for path in rms_files:\n        if 'abs.rms' in path:\n            abs_file = path\n        if 'rel.rms' in path:\n            rels_file = path\n    return abs_file, rels_file\n",
          "rms_files": "[Undefined]"
        },
        "outputs": {
          "abs_file": "[Undefined]",
          "rels_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-bold-ref",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "3.438mmx3.438mmx3.4mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz",
          "template_name": "FSL-AFNI-bold-ref",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "init_aff_102",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "verbose": "True",
          "fixed_image": "[Undefined]",
          "moving_image": "[Undefined]",
          "fixed_image_mask": "[Undefined]",
          "moving_image_mask": "[Undefined]",
          "metric": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374abaf10>",
          "transform": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba180>",
          "principal_axes": "False",
          "search_factor": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba110>",
          "search_grid": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba500>",
          "convergence": "<generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba340>",
          "output_transform": "initialization.mat",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-brain-mask",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "3.438mmx3.438mmx3.4mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz",
          "template_name": "FSL-AFNI-brain-mask",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "norm_102",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "fixed_image": "[Undefined]",
          "fixed_image_mask": "[Undefined]",
          "fixed_image_masks": "[Undefined]",
          "moving_image": "[Undefined]",
          "moving_image_mask": "[Undefined]",
          "moving_image_masks": "[Undefined]",
          "save_state": "[Undefined]",
          "restore_state": "[Undefined]",
          "initial_moving_transform": "[Undefined]",
          "invert_initial_moving_transform": "[Undefined]",
          "initial_moving_transform_com": "[Undefined]",
          "metric_item_trait": "[Undefined]",
          "metric_stage_trait": "[Undefined]",
          "metric": "['Mattes']",
          "metric_weight_item_trait": "1.0",
          "metric_weight_stage_trait": "[Undefined]",
          "metric_weight": "[1.0]",
          "radius_bins_item_trait": "5",
          "radius_bins_stage_trait": "[Undefined]",
          "radius_or_number_of_bins": "[64]",
          "sampling_strategy_item_trait": "[Undefined]",
          "sampling_strategy_stage_trait": "[Undefined]",
          "sampling_strategy": "['Random', 'Random']",
          "sampling_percentage_item_trait": "[Undefined]",
          "sampling_percentage_stage_trait": "[Undefined]",
          "sampling_percentage": "[0.2]",
          "use_estimate_learning_rate_once": "[Undefined]",
          "use_histogram_matching": "[True]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "write_composite_transform": "False",
          "collapse_output_transforms": "True",
          "initialize_transforms_per_stage": "False",
          "float": "True",
          "transforms": "['Affine']",
          "transform_parameters": "[<generator object _serialize_inout.<locals>.<genexpr> at 0x155374aba340>]",
          "restrict_deformation": "[Undefined]",
          "number_of_iterations": "[[200]]",
          "smoothing_sigmas": "[[2.0]]",
          "sigma_units": "['mm', 'mm', 'mm']",
          "shrink_factors": "[[2]]",
          "convergence_threshold": "[1e-09]",
          "convergence_window_size": "[10]",
          "output_transform_prefix": "transform",
          "output_warped_image": "[Undefined]",
          "output_inverse_warped_image": "[Undefined]",
          "winsorize_upper_quantile": "0.98",
          "winsorize_lower_quantile": "0.05",
          "random_seed": "[Undefined]",
          "verbose": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "forward_transforms": "[Undefined]",
          "reverse_forward_transforms": "[Undefined]",
          "reverse_transforms": "[Undefined]",
          "forward_invert_flags": "[Undefined]",
          "reverse_forward_invert_flags": "[Undefined]",
          "reverse_invert_flags": "[Undefined]",
          "composite_transform": "[Undefined]",
          "inverse_composite_transform": "[Undefined]",
          "warped_image": "[Undefined]",
          "inverse_warped_image": "[Undefined]",
          "save_state": "[Undefined]",
          "metric_value": "[Undefined]",
          "elapsed_time": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_FSL-AFNI-brain-probseg",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "3.438mmx3.438mmx3.4mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz",
          "template_name": "FSL-AFNI-brain-probseg",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "map_brainmask_102",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "BSpline",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "True",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "binarize_mask_102",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "-thr 0.85 -bin",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "pre_mask_dilate_102",
        "type": "node",
        "inputs": {
          "operation": "max",
          "kernel_shape": "sphere",
          "kernel_size": "3.0",
          "kernel_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "char",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "print_header_102",
        "type": "node",
        "inputs": {
          "image": "[Undefined]",
          "what_information": "4",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "header": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "set_direction_102",
        "type": "node",
        "inputs": {
          "infile": "[Undefined]",
          "outfile": "[Undefined]",
          "direction": "[Undefined]",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "outfile": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "n4_correct_102",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image": "[Undefined]",
          "mask_image": "[Undefined]",
          "weight_image": "[Undefined]",
          "output_image": "[Undefined]",
          "bspline_fitting_distance": "200.0",
          "bspline_order": "[Undefined]",
          "shrink_factor": "[Undefined]",
          "n_iterations": "[Undefined]",
          "convergence_threshold": "[Undefined]",
          "save_bias": "False",
          "bias_image": "[Undefined]",
          "copy_header": "True",
          "rescale_intensities": "False",
          "histogram_sharpening": "[Undefined]",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]",
          "bias_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_pass_102",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "outline": "[Undefined]",
          "mask": "True",
          "skull": "[Undefined]",
          "no_output": "[Undefined]",
          "frac": "0.2",
          "vertical_gradient": "[Undefined]",
          "radius": "[Undefined]",
          "center": "[Undefined]",
          "threshold": "[Undefined]",
          "mesh": "[Undefined]",
          "robust": "[Undefined]",
          "padding": "[Undefined]",
          "remove_eyes": "[Undefined]",
          "surfaces": "[Undefined]",
          "t2_guided": "[Undefined]",
          "functional": "False",
          "reduce_bias": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "mask_file": "[Undefined]",
          "outline_file": "[Undefined]",
          "meshfile": "[Undefined]",
          "inskull_mask_file": "[Undefined]",
          "inskull_mesh_file": "[Undefined]",
          "outskull_mask_file": "[Undefined]",
          "outskull_mesh_file": "[Undefined]",
          "outskin_mask_file": "[Undefined]",
          "outskin_mesh_file": "[Undefined]",
          "skull_mask_file": "[Undefined]",
          "skull_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_dilate_102",
        "type": "node",
        "inputs": {
          "operation": "max",
          "kernel_shape": "sphere",
          "kernel_size": "6.0",
          "kernel_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "char",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_first_mask_102",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "unifize_102",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "uni.nii.gz",
          "t2": "True",
          "gm": "[Undefined]",
          "urad": "[Undefined]",
          "scale_file": "[Undefined]",
          "no_duplo": "[Undefined]",
          "epi": "[Undefined]",
          "rbt": "[Undefined]",
          "t2_up": "[Undefined]",
          "cl_frac": "[Undefined]",
          "quiet": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "-clfrac 0.2 -rbt 18.3 65.0 90.0",
          "environ": "{}"
        },
        "outputs": {
          "scale_file": "[Undefined]",
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "skullstrip_second_pass_102",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "brain_file": "[Undefined]",
          "clfrac": "[Undefined]",
          "dilate": "1",
          "erode": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]",
          "brain_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "combine_masks_102",
        "type": "node",
        "inputs": {
          "operation": "mul",
          "operand_file": "[Undefined]",
          "operand_value": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "extract_ref_brain_bold_102",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "func_extract_brain_109",
        "type": "node",
        "inputs": {
          "in_file_a": "[Undefined]",
          "in_file_b": "[Undefined]",
          "in_file_c": "[Undefined]",
          "out_file": "[Undefined]",
          "expr": "a*b",
          "start_idx": "[Undefined]",
          "stop_idx": "[Undefined]",
          "single_idx": "[Undefined]",
          "overwrite": "[Undefined]",
          "other": "[Undefined]",
          "num_threads": "1",
          "outputtype": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "gen_motion_stats_113",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'mask': '[Undefined]', 'max_displacement': '[Undefined]', 'motion_correct': '[Undefined]', 'movement_parameters': '[Undefined]', 'rels_displacement': '[Undefined]', 'transformations': '[Undefined]'}",
          "cal_DVARS": "{'args': '[Undefined]', 'environ': {}, 'method': 'dvars', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'AFNI'}",
          "cal_DVARS_strip": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0'}",
          "outputspec": "{}",
          "calculate_FD": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P'}",
          "calculate_FDJ": "{'calc_from': 'rms', 'center': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J'}",
          "get_all_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion'}",
          "calc_motion_parameters": "{'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters', 'motion_correct_tool': 'mcflirt'}",
          "calc_power_parameters": "{'fdj': '[Undefined]', 'function_str': 'CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters', 'motion_correct_tool': 'mcflirt'}"
        },
        "outputs": {
          "inputspec": "{'mask': None, 'max_displacement': None, 'motion_correct': None, 'movement_parameters': None, 'rels_displacement': None, 'transformations': None}",
          "cal_DVARS": "{'out_file': None}",
          "cal_DVARS_strip": "{'DVARS_val': None, 'out_file': None}",
          "outputspec": "{'DVARS_1D': None, 'FDJ_1D': None, 'FDP_1D': None, 'desc-summary_motion': None, 'motion': None, 'motion_params': None, 'power_params': None}",
          "calculate_FD": "{'fd': None, 'out_file': None}",
          "calculate_FDJ": "{'fd': None, 'out_file': None}",
          "get_all_motion_parameters": "{'all_motion_val': None, 'summary_motion_power': None}",
          "calc_motion_parameters": "{'info': None, 'maxdisp': None, 'out_file': None, 'relsdisp': None}",
          "calc_power_parameters": "{'info': None, 'out_file': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "outputs": {
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "rels_displacement": "[Undefined]",
              "motion_correct": "[Undefined]",
              "mask": "[Undefined]",
              "transformations": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "out_file": "[Undefined]",
              "method": "dvars",
              "num_threads": "1",
              "outputtype": "AFNI",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "cal_DVARS_strip",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.DVARS_strip_t0",
              "file_1D": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "DVARS_val": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "outputs": {
              "FDP_1D": "[Undefined]",
              "FDJ_1D": "[Undefined]",
              "DVARS_1D": "[Undefined]",
              "power_params": "[Undefined]",
              "motion_params": "[Undefined]",
              "motion": "[Undefined]",
              "desc-summary_motion": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FD",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_P",
              "in_file": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calculate_FDJ",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.calculate_FD_J",
              "in_file": "[Undefined]",
              "calc_from": "rms",
              "center": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "fd": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "get_all_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.get_allmotion",
              "fdj": "[Undefined]",
              "fdp": "[Undefined]",
              "maxdisp": "[Undefined]",
              "motion": "[Undefined]",
              "power": "[Undefined]",
              "relsdisp": "[Undefined]",
              "dvars": "[Undefined]"
            },
            "outputs": {
              "all_motion_val": "[Undefined]",
              "summary_motion_power": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_motion_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_motion_parameters",
              "movement_parameters": "[Undefined]",
              "max_displacement": "[Undefined]",
              "motion_correct_tool": "mcflirt",
              "rels_displacement": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]",
              "maxdisp": "[Undefined]",
              "relsdisp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_power_parameters",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.generate_motion_statistics.generate_motion_statistics.gen_power_parameters",
              "fdp": "[Undefined]",
              "fdj": "[Undefined]",
              "dvars": "[Undefined]",
              "motion_correct_tool": "mcflirt"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "info": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "cal_DVARS"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FD"
          },
          {
            "origin": "inputspec",
            "target": "calculate_FDJ"
          },
          {
            "origin": "inputspec",
            "target": "calc_motion_parameters"
          },
          {
            "origin": "cal_DVARS",
            "target": "cal_DVARS_strip"
          },
          {
            "origin": "cal_DVARS",
            "target": "calc_power_parameters"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "outputspec"
          },
          {
            "origin": "cal_DVARS_strip",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FD",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calculate_FD",
            "target": "calc_power_parameters"
          },
          {
            "origin": "calculate_FDJ",
            "target": "outputspec"
          },
          {
            "origin": "calculate_FDJ",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "get_all_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_motion_parameters",
            "target": "outputspec"
          },
          {
            "origin": "calc_power_parameters",
            "target": "get_all_motion_parameters"
          },
          {
            "origin": "calc_power_parameters",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_to_anat_FLIRT_130",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat': '[Undefined]', 'dof': 6, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'interp': 'trilinear'}",
          "linear_func_to_anat": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': 'corratio', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat': None, 'dof': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'interp': None}",
          "linear_func_to_anat": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "outputspec": "{'anat_func_nobbreg': None, 'func_to_anat_linear_xfm_nobbreg': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "dof": "6",
              "interp": "trilinear",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "outputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "dof": "[Undefined]",
              "interp": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "linear_func_to_anat",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "corratio",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "trilinear",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "6",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "func_to_anat_linear_xfm_nobbreg": "[Undefined]",
              "anat_func_nobbreg": "[Undefined]"
            },
            "outputs": {
              "func_to_anat_linear_xfm_nobbreg": "[Undefined]",
              "anat_func_nobbreg": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "linear_func_to_anat"
          },
          {
            "origin": "linear_func_to_anat",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "func_to_anat_bbreg_130",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat': '[Undefined]', 'anat_wm_segmentation': '[Undefined]', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch', 'bbr_wm_mask_args': '-bin', 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'func': '[Undefined]', 'linear_reg_matrix': '[Undefined]'}",
          "wm_bb_mask": "{'args': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'in_file2': '[Undefined]', 'mask_file': '[Undefined]', 'out_data_type': '[Undefined]', 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'suffix': '[Undefined]'}",
          "bbreg_func_to_anat": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': 6, 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat': None, 'anat_wm_segmentation': None, 'bbr_schedule': None, 'bbr_wm_mask_args': None, 'fieldmap': None, 'fieldmapmask': None, 'func': None, 'linear_reg_matrix': None}",
          "wm_bb_mask": "{'out_file': None}",
          "bbreg_func_to_anat": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "outputspec": "{'anat_func': None, 'func_to_anat_linear_xfm': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "linear_reg_matrix": "[Undefined]",
              "anat_wm_segmentation": "[Undefined]",
              "bbr_schedule": "/usr/share/fsl/6.0/etc/flirtsch/bbr.sch",
              "bbr_wm_mask_args": "-bin",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "outputs": {
              "func": "[Undefined]",
              "anat": "[Undefined]",
              "linear_reg_matrix": "[Undefined]",
              "anat_wm_segmentation": "[Undefined]",
              "bbr_schedule": "[Undefined]",
              "bbr_wm_mask_args": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "wm_bb_mask",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "mask_file": "[Undefined]",
              "out_file": "[Undefined]",
              "op_string": "[Undefined]",
              "suffix": "[Undefined]",
              "out_data_type": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "bbreg_func_to_anat",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "6",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "func_to_anat_linear_xfm": "[Undefined]",
              "anat_func": "[Undefined]"
            },
            "outputs": {
              "func_to_anat_linear_xfm": "[Undefined]",
              "anat_func": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "wm_bb_mask"
          },
          {
            "origin": "inputspec",
            "target": "bbreg_func_to_anat"
          },
          {
            "origin": "wm_bb_mask",
            "target": "bbreg_func_to_anat"
          },
          {
            "origin": "bbreg_func_to_anat",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "create_func_to_T1wtemplate_xfm_139",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'T1w-brain-template_funcreg': '[Undefined]', 'T1w_to_template_xfm': '[Undefined]', 'blip_warp': '[Undefined]', 'coreg_xfm': '[Undefined]', 'input_brain': '[Undefined]', 'mean_bold': '[Undefined]', 'template_to_T1w_xfm': '[Undefined]'}",
          "fsl_reg_2_itk": "{'args': '[Undefined]', 'environ': {}, 'fsl2ras': True, 'itk_transform': True}",
          "change_transform_type": "{'function_str': 'def change_itk_transform_type(input_affine_file):\\n    \"\"\"\\n    this function takes in the affine.txt produced by the c3d_affine_tool\\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\\n\\n    it then modifies the \\'Transform Type\\' of this affine.txt so that it is\\n    compatible with the antsApplyTransforms tool and produces a new affine\\n    file titled \\'updated_affine.txt\\'\\n    \"\"\"\\n\\n    new_file_lines = []\\n\\n    with open(input_affine_file) as f:\\n        for line in f:\\n            if \\'Transform:\\' in line:\\n                if \\'MatrixOffsetTransformBase_double_3_3\\' in line:\\n                    transform_line = \\'Transform: AffineTransform_double_3_3\\\\n\\'\\n                    new_file_lines.append(transform_line)\\n            else:\\n                new_file_lines.append(line)\\n\\n    updated_affine_file = os.path.join(os.getcwd(), \\'updated_affine.txt\\')\\n\\n    with open(updated_affine_file, \\'wt\\') as f:\\n        for line in new_file_lines:\\n            f.write(line)\\n\\n    return updated_affine_file\\n'}",
          "write_composite_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-bold_to-template_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_all_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "write_composite_inv_xfm": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': 0, 'interpolation': 'LanczosWindowedSinc', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': [True, False], 'num_threads': 1, 'out_postfix': '_trans', 'output_image': 'from-template_to-bold_mode-image_xfm.nii.gz', 'print_out_composite_warp_file': True}",
          "collect_inv_transforms": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}"
        },
        "outputs": {
          "inputspec": "{'T1w-brain-template_funcreg': None, 'T1w_to_template_xfm': None, 'blip_warp': None, 'coreg_xfm': None, 'input_brain': None, 'mean_bold': None, 'template_to_T1w_xfm': None}",
          "fsl_reg_2_itk": "{'itk_transform': None}",
          "change_transform_type": "{'updated_affine_file': None}",
          "write_composite_xfm": "{'output_image': None}",
          "collect_all_transforms": "{'out': None}",
          "write_composite_inv_xfm": "{'output_image': None}",
          "collect_inv_transforms": "{'out': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_brain": "[Undefined]",
              "mean_bold": "[Undefined]",
              "coreg_xfm": "[Undefined]",
              "T1w-brain-template_funcreg": "[Undefined]",
              "T1w_to_template_xfm": "[Undefined]",
              "template_to_T1w_xfm": "[Undefined]",
              "blip_warp": "[Undefined]"
            },
            "outputs": {
              "input_brain": "[Undefined]",
              "mean_bold": "[Undefined]",
              "coreg_xfm": "[Undefined]",
              "T1w-brain-template_funcreg": "[Undefined]",
              "T1w_to_template_xfm": "[Undefined]",
              "template_to_T1w_xfm": "[Undefined]",
              "blip_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "fsl_reg_2_itk",
            "type": "node",
            "inputs": {
              "reference_file": "[Undefined]",
              "source_file": "[Undefined]",
              "transform_file": "[Undefined]",
              "itk_transform": "True",
              "fsl2ras": "True",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "itk_transform": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "change_transform_type",
            "type": "node",
            "inputs": {
              "function_str": "def change_itk_transform_type(input_affine_file):\n    \"\"\"\n    this function takes in the affine.txt produced by the c3d_affine_tool\n    (which converted an FSL FLIRT affine.mat into the affine.txt)\n\n    it then modifies the 'Transform Type' of this affine.txt so that it is\n    compatible with the antsApplyTransforms tool and produces a new affine\n    file titled 'updated_affine.txt'\n    \"\"\"\n\n    new_file_lines = []\n\n    with open(input_affine_file) as f:\n        for line in f:\n            if 'Transform:' in line:\n                if 'MatrixOffsetTransformBase_double_3_3' in line:\n                    transform_line = 'Transform: AffineTransform_double_3_3\\n'\n                    new_file_lines.append(transform_line)\n            else:\n                new_file_lines.append(line)\n\n    updated_affine_file = os.path.join(os.getcwd(), 'updated_affine.txt')\n\n    with open(updated_affine_file, 'wt') as f:\n        for line in new_file_lines:\n            f.write(line)\n\n    return updated_affine_file\n",
              "input_affine_file": "[Undefined]"
            },
            "outputs": {
              "updated_affine_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-bold_to-template_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_all_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "write_composite_inv_xfm",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "0",
              "input_image": "[Undefined]",
              "output_image": "from-template_to-bold_mode-image_xfm.nii.gz",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "LanczosWindowedSinc",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[True, False]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "True",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "collect_inv_transforms",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "fsl_reg_2_itk"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_xfm"
          },
          {
            "origin": "inputspec",
            "target": "collect_all_transforms"
          },
          {
            "origin": "inputspec",
            "target": "write_composite_inv_xfm"
          },
          {
            "origin": "inputspec",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "fsl_reg_2_itk",
            "target": "change_transform_type"
          },
          {
            "origin": "change_transform_type",
            "target": "collect_all_transforms"
          },
          {
            "origin": "change_transform_type",
            "target": "collect_inv_transforms"
          },
          {
            "origin": "collect_all_transforms",
            "target": "write_composite_xfm"
          },
          {
            "origin": "collect_inv_transforms",
            "target": "write_composite_inv_xfm"
          }
        ]
      },
      {
        "name": "resampled_T1w-brain-template-funcreg",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "3.438mmx3.438mmx3.4mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "template_name": "T1w-brain-template-funcreg",
          "tag": "func_preproc_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_inv_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-T1w_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "erode_T1w_mask_147",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': '[Undefined]', 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "None",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "30"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\n                 mask_erosion_prop=None):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\n\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n\n    Parameters\n    ----------\n\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    roi_mask_img = nb.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\n                                         affine=roi_mask_img.affine)\n    output_roi_mask = os.path.join(os.getcwd(),\n                                   'segment_tissue_eroded_mask.nii.gz')\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nb.Nifti1Image(\n        skullstrip_mask_data, header=hdr,\n        affine=skullstrip_mask_img.affine)\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\n                                          'eroded_skullstrip_mask.nii.gz')\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "erode_CSF_mask_150",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': None, 'mask': '[Undefined]', 'mask_erode_mm': 30}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "erode_mask": "{'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \\'segment_tissue_mask.nii.gz\\')\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "erode_mask": "{'eroded_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "None",
              "erode_prop": "None",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "30"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\n                 mask_erosion_prop=None):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\n\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n\n    Parameters\n    ----------\n\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    roi_mask_img = nb.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\n                                         affine=roi_mask_img.affine)\n    output_roi_mask = os.path.join(os.getcwd(),\n                                   'segment_tissue_eroded_mask.nii.gz')\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nb.Nifti1Image(\n        skullstrip_mask_data, header=hdr,\n        affine=skullstrip_mask_img.affine)\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\n                                          'eroded_skullstrip_mask.nii.gz')\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_mask",
            "type": "node",
            "inputs": {
              "function_str": "def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\n    \"\"\"Returns eroded tissue segment mask\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment (ROI) mask\n\n    erosion_prop : float\n        Target volume ratio for erosion segment mask\n\n    Returns\n    -------\n    eroded_roi_mask : string\n        Path to eroded segment mask\n    \"\"\"\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\n\n    hdr = roi_mask_img.header\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\n                                affine=roi_mask_img.affine)\n    eroded_roi_mask = os.path.join(os.getcwd(), 'segment_tissue_mask.nii.gz')\n\n    output_img.to_filename(eroded_roi_mask)\n\n    return eroded_roi_mask\n",
              "roi_mask": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "erosion_prop": "[Undefined]"
            },
            "outputs": {
              "eroded_roi_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "inputspec",
            "target": "erode_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "erode_mask"
          },
          {
            "origin": "erode_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "erode_WM_mask_153",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'brain_mask': '[Undefined]', 'erode_mm': None, 'erode_prop': 0.6, 'mask': '[Undefined]', 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'function_str': 'def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\\n                 mask_erosion_prop=None):\\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\\n\\n    # This functionality is adapted from poldracklab/niworkflows:\\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\\n    #   https://fmriprep.readthedocs.io/\\n    #   https://poldracklab.stanford.edu/\\n    # We are temporarily maintaining our own copy for more granular control.\\n\\n    Parameters\\n    ----------\\n\\n    roi_mask : string\\n        Path to binarized segment mask\\n\\n    skullstrip_mask : string\\n        Path to skull-stripped brain mask\\n\\n    mask_erosion_prop : float\\n        Target volume ratio for skull-stripped brain mask\\n\\n    Returns\\n    -------\\n\\n    output_roi_mask : string\\n        Path to eroded segment mask\\n\\n    eroded_skullstrip_mask : string\\n        Path to eroded skull-stripped brain mask\\n    \"\"\"\\n    roi_mask_img = nb.load(roi_mask)\\n    roi_mask_data = roi_mask_img.get_fdata()\\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\\n\\n    if erode_in:\\n        # pylint: disable=invalid-unary-operand-type\\n        roi_mask_data[~skullstrip_mask_data] = 0\\n\\n    hdr = roi_mask_img.header\\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                         affine=roi_mask_img.affine)\\n    output_roi_mask = os.path.join(os.getcwd(),\\n                                   \\'segment_tissue_eroded_mask.nii.gz\\')\\n    output_roi_mask_img.to_filename(output_roi_mask)\\n\\n    hdr = skullstrip_mask_img.header\\n    output_skullstrip_mask_img = nb.Nifti1Image(\\n        skullstrip_mask_data, header=hdr,\\n        affine=skullstrip_mask_img.affine)\\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\\n                                          \\'eroded_skullstrip_mask.nii.gz\\')\\n\\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\\n\\n    return output_roi_mask, eroded_skullstrip_mask\\n'}",
          "erode_mask": "{'function_str': 'def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\\n    \"\"\"Returns eroded tissue segment mask\\n\\n    Parameters\\n    ----------\\n    roi_mask : string\\n        Path to binarized segment (ROI) mask\\n\\n    erosion_prop : float\\n        Target volume ratio for erosion segment mask\\n\\n    Returns\\n    -------\\n    eroded_roi_mask : string\\n        Path to eroded segment mask\\n    \"\"\"\\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\\n\\n    hdr = roi_mask_img.header\\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\\n                                affine=roi_mask_img.affine)\\n    eroded_roi_mask = os.path.join(os.getcwd(), \\'segment_tissue_mask.nii.gz\\')\\n\\n    output_img.to_filename(eroded_roi_mask)\\n\\n    return eroded_roi_mask\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'brain_mask': None, 'erode_mm': None, 'erode_prop': None, 'mask': None, 'mask_erode_mm': None}",
          "erode_skullstrip_mask": "{'eroded_skullstrip_mask': None, 'output_roi_mask': None}",
          "erode_mask": "{'eroded_roi_mask': None}",
          "outputspec": "{'eroded_mask': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "mask": "[Undefined]",
              "erode_mm": "None",
              "erode_prop": "0.6",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "None"
            },
            "outputs": {
              "mask": "[Undefined]",
              "erode_mm": "[Undefined]",
              "erode_prop": "[Undefined]",
              "brain_mask": "[Undefined]",
              "mask_erode_mm": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_skullstrip_mask",
            "type": "node",
            "inputs": {
              "function_str": "def mask_erosion(roi_mask=None, skullstrip_mask=None, mask_erosion_mm=None,\n                 mask_erosion_prop=None):\n    \"\"\"Returns eroded segment mask and skull-stripped brain mask\n\n    # This functionality is adapted from poldracklab/niworkflows:\n    #   https://github.com/poldracklab/niworkflows/blob/master/niworkflows/interfaces/utils.py\n    #   https://fmriprep.readthedocs.io/\n    #   https://poldracklab.stanford.edu/\n    # We are temporarily maintaining our own copy for more granular control.\n\n    Parameters\n    ----------\n\n    roi_mask : string\n        Path to binarized segment mask\n\n    skullstrip_mask : string\n        Path to skull-stripped brain mask\n\n    mask_erosion_prop : float\n        Target volume ratio for skull-stripped brain mask\n\n    Returns\n    -------\n\n    output_roi_mask : string\n        Path to eroded segment mask\n\n    eroded_skullstrip_mask : string\n        Path to eroded skull-stripped brain mask\n    \"\"\"\n    roi_mask_img = nb.load(roi_mask)\n    roi_mask_data = roi_mask_img.get_fdata()\n    skullstrip_mask_img, erode_in, skullstrip_mask_data = _erode(\n        skullstrip_mask, mask_erosion_mm, mask_erosion_prop)\n\n    if erode_in:\n        # pylint: disable=invalid-unary-operand-type\n        roi_mask_data[~skullstrip_mask_data] = 0\n\n    hdr = roi_mask_img.header\n    output_roi_mask_img = nb.Nifti1Image(roi_mask_data, header=hdr,\n                                         affine=roi_mask_img.affine)\n    output_roi_mask = os.path.join(os.getcwd(),\n                                   'segment_tissue_eroded_mask.nii.gz')\n    output_roi_mask_img.to_filename(output_roi_mask)\n\n    hdr = skullstrip_mask_img.header\n    output_skullstrip_mask_img = nb.Nifti1Image(\n        skullstrip_mask_data, header=hdr,\n        affine=skullstrip_mask_img.affine)\n    eroded_skullstrip_mask = os.path.join(os.getcwd(),\n                                          'eroded_skullstrip_mask.nii.gz')\n\n    output_skullstrip_mask_img.to_filename(eroded_skullstrip_mask)\n\n    return output_roi_mask, eroded_skullstrip_mask\n",
              "roi_mask": "[Undefined]",
              "skullstrip_mask": "[Undefined]",
              "mask_erosion_mm": "[Undefined]",
              "mask_erosion_prop": "[Undefined]"
            },
            "outputs": {
              "output_roi_mask": "[Undefined]",
              "eroded_skullstrip_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "erode_mask",
            "type": "node",
            "inputs": {
              "function_str": "def erosion(roi_mask=None, erosion_mm=None, erosion_prop=None):\n    \"\"\"Returns eroded tissue segment mask\n\n    Parameters\n    ----------\n    roi_mask : string\n        Path to binarized segment (ROI) mask\n\n    erosion_prop : float\n        Target volume ratio for erosion segment mask\n\n    Returns\n    -------\n    eroded_roi_mask : string\n        Path to eroded segment mask\n    \"\"\"\n    roi_mask_img, _, roi_mask_data = _erode(roi_mask, erosion_mm, erosion_prop)\n\n    hdr = roi_mask_img.header\n    output_img = nb.Nifti1Image(roi_mask_data, header=hdr,\n                                affine=roi_mask_img.affine)\n    eroded_roi_mask = os.path.join(os.getcwd(), 'segment_tissue_mask.nii.gz')\n\n    output_img.to_filename(eroded_roi_mask)\n\n    return eroded_roi_mask\n",
              "roi_mask": "[Undefined]",
              "erosion_mm": "[Undefined]",
              "erosion_prop": "[Undefined]"
            },
            "outputs": {
              "eroded_roi_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "eroded_mask": "[Undefined]"
            },
            "outputs": {
              "eroded_mask": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "erode_skullstrip_mask"
          },
          {
            "origin": "inputspec",
            "target": "erode_mask"
          },
          {
            "origin": "erode_skullstrip_mask",
            "target": "erode_mask"
          },
          {
            "origin": "erode_mask",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "nuisance_regressors_Regressor_1_156",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': '[Undefined]', 'anat_to_mni_linear_xfm_file_path': '[Undefined]', 'anatomical_eroded_brain_mask_file_path': '[Undefined]', 'anatomical_file_path': '[Undefined]', 'creds_path': '[Undefined]', 'csf_mask_file_path': '[Undefined]', 'dl_dir': '[Undefined]', 'dvars_file_path': '[Undefined]', 'fd_j_file_path': '[Undefined]', 'fd_p_file_path': '[Undefined]', 'func_to_anat_linear_xfm_file_path': '[Undefined]', 'functional_brain_mask_file_path': '[Undefined]', 'functional_file_path': '[Undefined]', 'gm_mask_file_path': '[Undefined]', 'lat_ventricles_mask_file_path': '[Undefined]', 'mni_to_anat_linear_xfm_file_path': '[Undefined]', 'motion_parameters_file_path': '[Undefined]', 'selector': '[Undefined]', 'tr': '[Undefined]', 'wm_mask_file_path': '[Undefined]'}",
          "functional_mean": "{'args': '[Undefined]', 'environ': {}, 'mask': '[Undefined]', 'num_threads': 1, 'options': '-mean', 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ'}",
          "Anatomical_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "Functional_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': '[Undefined]', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "WhiteMatter_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "WhiteMatter_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "WhiteMatter_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "CerebrospinalFluid_2mm_flirt": "{'angle_rep': '[Undefined]', 'apply_isoxfm': 2.0, 'apply_xfm': '[Undefined]', 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_matrix_file': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "CerebrospinalFluid_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "CerebrospinalFluid_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "CerebrospinalFluid_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "aCompCor_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "aCompCor_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "aCompCor_cosine_filter": "{'function_str': 'def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode=\\'error\\'):\\n    \"\"\"\\n    input_image_path: string\\n            Bold image to be filtered.\\n    timestep: float\\n            \\'Repetition time (TR) of series (in sec) - derived from image header if unspecified\\'\\n    period_cut: float\\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\\n\\n    \"\"\"\\n\\n    from CPAC.nuisance.utils.compcor import _full_rank\\n    from CPAC.nuisance.utils.compcor import _cosine_drift\\n\\n    input_img = nb.load(input_image_path)\\n    input_data = input_img.get_fdata()\\n\\n    datashape = input_data.shape\\n    timepoints = datashape[axis]\\n    if datashape[0] == 0 and failure_mode != \\'error\\':\\n        return input_data, np.array([])\\n\\n    input_data = input_data.reshape((-1, timepoints))\\n\\n    frametimes = timestep * np.arange(timepoints)\\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\\n\\n    betas = np.linalg.lstsq(X, input_data.T)[0]\\n\\n    if not remove_mean:\\n        X = X[:, :-1]\\n        betas = betas[:-1]\\n\\n    residuals = input_data - X.dot(betas).T\\n\\n    output_data = residuals.reshape(datashape)\\n\\n    hdr = input_img.header\\n    output_img = nb.Nifti1Image(output_data, header=hdr,\\n                                affine=input_img.affine)\\n\\n    file_name = input_image_path[input_image_path.rindex(\\'/\\')+1:]\\n\\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\\n\\n    output_img.to_filename(cosfiltered_img)\\n\\n    return cosfiltered_img\\n'}",
          "aCompCor_tr_string2float": "{'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}",
          "aCompCor_std": "{'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}",
          "aCompCor_standardized": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a/b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
          "aCompCor_pc": "{'args': '-vmean -nscale', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'pcs': 5, 'pcs_file': '[Undefined]'}",
          "tcompcor": "{'inputspec': {'functional_file_path': '[Undefined]', 'mask_file_path': '[Undefined]'}, 'detrend': {'args': '-polort 2', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'std': {'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}, 'var': {'args': '[Undefined]', 'environ': {}, 'expr': 'a*a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}, 'slice_mapper_list': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'slice_mask_mapper_list': {'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}, 'slice_mapper': {}, 'threshold_value_': {'function_str': 'CPAC.nuisance.utils.compute_pct_threshold', 'threshold_pct': 5.0}, 'threshold_': {'args': '-bin', 'direction': 'below', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ', 'use_nonzero_voxels': '[Undefined]', 'use_robust_range': '[Undefined]'}, 'merge_slice_masks': {'args': '[Undefined]', 'dimension': 'z', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}, 'outputspec': {}}",
          "anat_to_func_linear_xfm": "{'args': '[Undefined]', 'concat_xfm': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fix_scale_skew': '[Undefined]', 'in_file2': '[Undefined]', 'invert_xfm': True, 'out_file': '[Undefined]', 'output_type': 'NIFTI_GZ'}",
          "Functional_eroded_mask": "{'angle_rep': '[Undefined]', 'apply_isoxfm': '[Undefined]', 'apply_xfm': True, 'args': '[Undefined]', 'bbrslope': '[Undefined]', 'bbrtype': '[Undefined]', 'bgvalue': '[Undefined]', 'bins': '[Undefined]', 'coarse_search': '[Undefined]', 'cost': '[Undefined]', 'cost_func': '[Undefined]', 'datatype': '[Undefined]', 'display_init': '[Undefined]', 'dof': '[Undefined]', 'echospacing': '[Undefined]', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'fieldmap': '[Undefined]', 'fieldmapmask': '[Undefined]', 'fine_search': '[Undefined]', 'force_scaling': '[Undefined]', 'in_weight': '[Undefined]', 'interp': 'nearestneighbour', 'min_sampling': '[Undefined]', 'no_clamp': '[Undefined]', 'no_resample': '[Undefined]', 'no_resample_blur': '[Undefined]', 'no_search': '[Undefined]', 'out_file': '[Undefined]', 'out_log': '[Undefined]', 'out_matrix_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'padding_size': '[Undefined]', 'pedir': '[Undefined]', 'ref_weight': '[Undefined]', 'rigid2D': '[Undefined]', 'save_log': '[Undefined]', 'schedule': '[Undefined]', 'searchr_x': '[Undefined]', 'searchr_y': '[Undefined]', 'searchr_z': '[Undefined]', 'sinc_width': '[Undefined]', 'sinc_window': '[Undefined]', 'uses_qform': '[Undefined]', 'verbose': '[Undefined]', 'wm_seg': '[Undefined]', 'wmcoords': '[Undefined]', 'wmnorms': '[Undefined]'}",
          "tCompCor_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "tCompCor_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "tCompCor_cosine_filter": "{'function_str': 'def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode=\\'error\\'):\\n    \"\"\"\\n    input_image_path: string\\n            Bold image to be filtered.\\n    timestep: float\\n            \\'Repetition time (TR) of series (in sec) - derived from image header if unspecified\\'\\n    period_cut: float\\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\\n\\n    \"\"\"\\n\\n    from CPAC.nuisance.utils.compcor import _full_rank\\n    from CPAC.nuisance.utils.compcor import _cosine_drift\\n\\n    input_img = nb.load(input_image_path)\\n    input_data = input_img.get_fdata()\\n\\n    datashape = input_data.shape\\n    timepoints = datashape[axis]\\n    if datashape[0] == 0 and failure_mode != \\'error\\':\\n        return input_data, np.array([])\\n\\n    input_data = input_data.reshape((-1, timepoints))\\n\\n    frametimes = timestep * np.arange(timepoints)\\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\\n\\n    betas = np.linalg.lstsq(X, input_data.T)[0]\\n\\n    if not remove_mean:\\n        X = X[:, :-1]\\n        betas = betas[:-1]\\n\\n    residuals = input_data - X.dot(betas).T\\n\\n    output_data = residuals.reshape(datashape)\\n\\n    hdr = input_img.header\\n    output_img = nb.Nifti1Image(output_data, header=hdr,\\n                                affine=input_img.affine)\\n\\n    file_name = input_image_path[input_image_path.rindex(\\'/\\')+1:]\\n\\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\\n\\n    output_img.to_filename(cosfiltered_img)\\n\\n    return cosfiltered_img\\n'}",
          "tCompCor_tr_string2float": "{'function_str': 'def TR_string_to_float(tr):\\n    \"\"\"\\n    Convert TR string to seconds (float). Suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Parameters\\n    ----------\\n    tr : TR string representation. May use suffixes \\'s\\' or \\'ms\\' to indicate\\n    seconds or milliseconds.\\n\\n    Returns\\n    -------\\n    tr in seconds (float)\\n    \"\"\"\\n    if not isinstance(tr, str):\\n        raise TypeError(f\\'Improper type for TR_string_to_float ({tr}).\\')\\n\\n    tr_str = tr.replace(\\' \\', \\'\\')\\n\\n    try:\\n        if tr_str.endswith(\\'ms\\'):\\n            tr_numeric = float(tr_str[:-2]) * 0.001\\n        elif tr.endswith(\\'s\\'):\\n            tr_numeric = float(tr_str[:-1])\\n        else:\\n            tr_numeric = float(tr_str)\\n    except Exception as exc:\\n        raise ValueError(f\\'Can not convert TR string to float: \"{tr}\".\\') from exc\\n\\n    return tr_numeric\\n'}",
          "tCompCor_std": "{'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}",
          "tCompCor_standardized": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a/b', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
          "tCompCor_pc": "{'args': '-vmean -nscale', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'pcs': 5, 'pcs_file': '[Undefined]'}",
          "GlobalSignal_merge_masks": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
          "GlobalSignal_union_masks": "{'args': '[Undefined]', 'count': '[Undefined]', 'datum': '[Undefined]', 'dilate_inputs': '[Undefined]', 'dilate_results': '[Undefined]', 'environ': {}, 'fill_dirs': '[Undefined]', 'fill_holes': '[Undefined]', 'frac': '[Undefined]', 'inter': '[Undefined]', 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI_GZ', 'union': '[Undefined]', 'verbose': '[Undefined]'}",
          "GlobalSignal_mean": "{'args': '-1Dformat', 'debug': '[Undefined]', 'environ': {}, 'format1D': '[Undefined]', 'format1DR': '[Undefined]', 'mask': '[Undefined]', 'mask_f2short': '[Undefined]', 'nobriklab': '[Undefined]', 'nomeanout': '[Undefined]', 'num_roi': '[Undefined]', 'out_file': '[Undefined]', 'quiet': False, 'roisel': '[Undefined]', 'stat': '[Undefined]', 'zerofill': '[Undefined]'}",
          "build_nuisance_regressors": "{'censor_file_path': '[Undefined]', 'custom_file_paths': '[Undefined]', 'function_str': 'CPAC.nuisance.nuisance.gather_nuisance', 'grey_matter_summary_file_path': '[Undefined]', 'selector': {'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT', 'by_slice': False}}}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'anat_to_func_linear_xfm_file_path': None, 'anat_to_mni_linear_xfm_file_path': None, 'anatomical_eroded_brain_mask_file_path': None, 'anatomical_file_path': None, 'creds_path': None, 'csf_mask_file_path': None, 'dl_dir': None, 'dvars_file_path': None, 'fd_j_file_path': None, 'fd_p_file_path': None, 'func_to_anat_linear_xfm_file_path': None, 'functional_brain_mask_file_path': None, 'functional_file_path': None, 'gm_mask_file_path': None, 'lat_ventricles_mask_file_path': None, 'mni_to_anat_linear_xfm_file_path': None, 'motion_parameters_file_path': None, 'selector': None, 'tr': None, 'wm_mask_file_path': None}",
          "functional_mean": "{'out_file': None}",
          "Anatomical_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "Functional_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "WhiteMatter_merge_masks": "{'out': None}",
          "WhiteMatter_union_masks": "{'out_file': None}",
          "WhiteMatter_mean": "{'out_file': None}",
          "CerebrospinalFluid_2mm_flirt": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "CerebrospinalFluid_merge_masks": "{'out': None}",
          "CerebrospinalFluid_union_masks": "{'out_file': None}",
          "CerebrospinalFluid_mean": "{'out_file': None}",
          "aCompCor_merge_masks": "{'out': None}",
          "aCompCor_union_masks": "{'out_file': None}",
          "aCompCor_cosine_filter": "{'cosfiltered_img': None}",
          "aCompCor_tr_string2float": "{'tr_float': None}",
          "aCompCor_std": "{'out_file': None}",
          "aCompCor_standardized": "{'out_file': None}",
          "aCompCor_pc": "{'out_file': None, 'pcs_file': None}",
          "tcompcor": "{'inputspec': {'functional_file_path': None, 'mask_file_path': None}, 'detrend': {'out_file': None}, 'std': {'out_file': None}, 'var': {'out_file': None}, 'slice_mapper_list': {'out': None}, 'slice_mask_mapper_list': {'out': None}, 'slice_mapper': {'mask_file': None, 'out_file': None}, 'threshold_value_': {'threshold': None}, 'threshold_': {'out_file': None}, 'merge_slice_masks': {'merged_file': None}, 'outputspec': {'mask': None}}",
          "anat_to_func_linear_xfm": "{'out_file': None}",
          "Functional_eroded_mask": "{'out_file': None, 'out_log': None, 'out_matrix_file': None}",
          "tCompCor_merge_masks": "{'out': None}",
          "tCompCor_union_masks": "{'out_file': None}",
          "tCompCor_cosine_filter": "{'cosfiltered_img': None}",
          "tCompCor_tr_string2float": "{'tr_float': None}",
          "tCompCor_std": "{'out_file': None}",
          "tCompCor_standardized": "{'out_file': None}",
          "tCompCor_pc": "{'out_file': None, 'pcs_file': None}",
          "GlobalSignal_merge_masks": "{'out': None}",
          "GlobalSignal_union_masks": "{'out_file': None}",
          "GlobalSignal_mean": "{'out_file': None}",
          "build_nuisance_regressors": "{'censor_indices': None, 'out_file': None}",
          "outputspec": "{'censor_indices': None, 'regressors_file_path': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "outputs": {
              "selector": "[Undefined]",
              "functional_file_path": "[Undefined]",
              "anatomical_file_path": "[Undefined]",
              "anatomical_eroded_brain_mask_file_path": "[Undefined]",
              "gm_mask_file_path": "[Undefined]",
              "wm_mask_file_path": "[Undefined]",
              "csf_mask_file_path": "[Undefined]",
              "lat_ventricles_mask_file_path": "[Undefined]",
              "functional_brain_mask_file_path": "[Undefined]",
              "func_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_func_linear_xfm_file_path": "[Undefined]",
              "mni_to_anat_linear_xfm_file_path": "[Undefined]",
              "anat_to_mni_linear_xfm_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "fd_j_file_path": "[Undefined]",
              "fd_p_file_path": "[Undefined]",
              "dvars_file_path": "[Undefined]",
              "creds_path": "[Undefined]",
              "dl_dir": "[Undefined]",
              "tr": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "functional_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "-mean",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Anatomical_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Functional_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "True",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "[Undefined]",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "WhiteMatter_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_2mm_flirt",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "[Undefined]",
              "apply_isoxfm": "2.0",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "CerebrospinalFluid_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]",
              "in2": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_cosine_filter",
            "type": "node",
            "inputs": {
              "function_str": "def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode='error'):\n    \"\"\"\n    input_image_path: string\n            Bold image to be filtered.\n    timestep: float\n            'Repetition time (TR) of series (in sec) - derived from image header if unspecified'\n    period_cut: float\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\n\n    \"\"\"\n\n    from CPAC.nuisance.utils.compcor import _full_rank\n    from CPAC.nuisance.utils.compcor import _cosine_drift\n\n    input_img = nb.load(input_image_path)\n    input_data = input_img.get_fdata()\n\n    datashape = input_data.shape\n    timepoints = datashape[axis]\n    if datashape[0] == 0 and failure_mode != 'error':\n        return input_data, np.array([])\n\n    input_data = input_data.reshape((-1, timepoints))\n\n    frametimes = timestep * np.arange(timepoints)\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\n\n    betas = np.linalg.lstsq(X, input_data.T)[0]\n\n    if not remove_mean:\n        X = X[:, :-1]\n        betas = betas[:-1]\n\n    residuals = input_data - X.dot(betas).T\n\n    output_data = residuals.reshape(datashape)\n\n    hdr = input_img.header\n    output_img = nb.Nifti1Image(output_data, header=hdr,\n                                affine=input_img.affine)\n\n    file_name = input_image_path[input_image_path.rindex('/')+1:]\n\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\n\n    output_img.to_filename(cosfiltered_img)\n\n    return cosfiltered_img\n",
              "input_image_path": "[Undefined]",
              "timestep": "[Undefined]"
            },
            "outputs": {
              "cosfiltered_img": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_tr_string2float",
            "type": "node",
            "inputs": {
              "function_str": "def TR_string_to_float(tr):\n    \"\"\"\n    Convert TR string to seconds (float). Suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Parameters\n    ----------\n    tr : TR string representation. May use suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Returns\n    -------\n    tr in seconds (float)\n    \"\"\"\n    if not isinstance(tr, str):\n        raise TypeError(f'Improper type for TR_string_to_float ({tr}).')\n\n    tr_str = tr.replace(' ', '')\n\n    try:\n        if tr_str.endswith('ms'):\n            tr_numeric = float(tr_str[:-2]) * 0.001\n        elif tr.endswith('s'):\n            tr_numeric = float(tr_str[:-1])\n        else:\n            tr_numeric = float(tr_str)\n    except Exception as exc:\n        raise ValueError(f'Can not convert TR string to float: \"{tr}\".') from exc\n\n    return tr_numeric\n",
              "tr": "[Undefined]"
            },
            "outputs": {
              "tr_float": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_std",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI",
              "args": "-nzstdev",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_standardized",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "[Undefined]",
              "expr": "a/b",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "aCompCor_pc",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "pcs_file": "[Undefined]",
              "pcs": "5",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "-vmean -nscale",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "pcs_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tcompcor",
            "type": "workflow",
            "inputs": {
              "inputspec": "{'functional_file_path': '[Undefined]', 'mask_file_path': '[Undefined]'}",
              "detrend": "{'args': '-polort 2', 'environ': {}, 'num_threads': 1, 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}",
              "std": "{'args': '-nzstdev', 'environ': {}, 'num_threads': 1, 'options': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI'}",
              "var": "{'args': '[Undefined]', 'environ': {}, 'expr': 'a*a', 'in_file_b': '[Undefined]', 'in_file_c': '[Undefined]', 'num_threads': 1, 'other': '[Undefined]', 'out_file': '[Undefined]', 'outputtype': 'NIFTI', 'overwrite': '[Undefined]', 'single_idx': '[Undefined]', 'start_idx': '[Undefined]', 'stop_idx': '[Undefined]'}",
              "slice_mapper_list": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
              "slice_mask_mapper_list": "{'axis': 'vstack', 'no_flatten': False, 'ravel_inputs': False}",
              "slice_mapper": "{}",
              "threshold_value_": "{'function_str': 'CPAC.nuisance.utils.compute_pct_threshold', 'threshold_pct': 5.0}",
              "threshold_": "{'args': '-bin', 'direction': 'below', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'internal_datatype': '[Undefined]', 'nan2zeros': '[Undefined]', 'out_file': '[Undefined]', 'output_datatype': '[Undefined]', 'output_type': 'NIFTI_GZ', 'use_nonzero_voxels': '[Undefined]', 'use_robust_range': '[Undefined]'}",
              "merge_slice_masks": "{'args': '[Undefined]', 'dimension': 'z', 'environ': {'FSLOUTPUTTYPE': 'NIFTI_GZ'}, 'merged_file': '[Undefined]', 'output_type': 'NIFTI_GZ', 'tr': '[Undefined]'}",
              "outputspec": "{}"
            },
            "outputs": {
              "inputspec": "{'functional_file_path': None, 'mask_file_path': None}",
              "detrend": "{'out_file': None}",
              "std": "{'out_file': None}",
              "var": "{'out_file': None}",
              "slice_mapper_list": "{'out': None}",
              "slice_mask_mapper_list": "{'out': None}",
              "slice_mapper": "{'mask_file': None, 'out_file': None}",
              "threshold_value_": "{'threshold': None}",
              "threshold_": "{'out_file': None}",
              "merge_slice_masks": "{'merged_file': None}",
              "outputspec": "{'mask': None}"
            },
            "result": null,
            "nodes": [
              {
                "name": "inputspec",
                "type": "node",
                "inputs": {
                  "functional_file_path": "[Undefined]",
                  "mask_file_path": "[Undefined]"
                },
                "outputs": {
                  "functional_file_path": "[Undefined]",
                  "mask_file_path": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "detrend",
                "type": "node",
                "inputs": {
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "num_threads": "1",
                  "outputtype": "NIFTI",
                  "args": "-polort 2",
                  "environ": "{}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "std",
                "type": "node",
                "inputs": {
                  "in_file": "[Undefined]",
                  "out_file": "[Undefined]",
                  "mask": "[Undefined]",
                  "options": "[Undefined]",
                  "num_threads": "1",
                  "outputtype": "NIFTI",
                  "args": "-nzstdev",
                  "environ": "{}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "var",
                "type": "node",
                "inputs": {
                  "in_file_a": "[Undefined]",
                  "in_file_b": "[Undefined]",
                  "in_file_c": "[Undefined]",
                  "out_file": "[Undefined]",
                  "expr": "a*a",
                  "start_idx": "[Undefined]",
                  "stop_idx": "[Undefined]",
                  "single_idx": "[Undefined]",
                  "overwrite": "[Undefined]",
                  "other": "[Undefined]",
                  "num_threads": "1",
                  "outputtype": "NIFTI",
                  "args": "[Undefined]",
                  "environ": "{}"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "slice_mapper_list",
                "type": "node",
                "inputs": {
                  "axis": "vstack",
                  "no_flatten": "False",
                  "ravel_inputs": "False",
                  "in1": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "slice_mask_mapper_list",
                "type": "node",
                "inputs": {
                  "axis": "vstack",
                  "no_flatten": "False",
                  "ravel_inputs": "False",
                  "in1": "[Undefined]"
                },
                "outputs": {
                  "out": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "slice_mapper",
                "type": "node",
                "inputs": {
                  "out_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "outputs": {
                  "out_file": "[Undefined]",
                  "mask_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "threshold_value_",
                "type": "node",
                "inputs": {
                  "function_str": "CPAC.nuisance.utils.compute_pct_threshold",
                  "in_file": "[Undefined]",
                  "mask": "[Undefined]",
                  "threshold_pct": "5.0"
                },
                "outputs": {
                  "threshold": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "threshold_",
                "type": "node",
                "inputs": {
                  "args": "-bin",
                  "direction": "below",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}",
                  "in_file": "[Undefined]",
                  "internal_datatype": "[Undefined]",
                  "nan2zeros": "[Undefined]",
                  "out_file": "[Undefined]",
                  "output_datatype": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "thresh": "[Undefined]",
                  "use_nonzero_voxels": "[Undefined]",
                  "use_robust_range": "[Undefined]"
                },
                "outputs": {
                  "out_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "merge_slice_masks",
                "type": "node",
                "inputs": {
                  "in_files": "[Undefined]",
                  "dimension": "z",
                  "tr": "[Undefined]",
                  "merged_file": "[Undefined]",
                  "output_type": "NIFTI_GZ",
                  "args": "[Undefined]",
                  "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
                },
                "outputs": {
                  "merged_file": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              },
              {
                "name": "outputspec",
                "type": "node",
                "inputs": {
                  "mask": "[Undefined]"
                },
                "outputs": {
                  "mask": "[Undefined]"
                },
                "result": null,
                "nodes": [],
                "edges": []
              }
            ],
            "edges": [
              {
                "origin": "inputspec",
                "target": "detrend"
              },
              {
                "origin": "inputspec",
                "target": "std"
              },
              {
                "origin": "inputspec",
                "target": "slice_mask_mapper_list"
              },
              {
                "origin": "detrend",
                "target": "std"
              },
              {
                "origin": "std",
                "target": "var"
              },
              {
                "origin": "var",
                "target": "slice_mapper_list"
              },
              {
                "origin": "slice_mapper_list",
                "target": "slice_mapper"
              },
              {
                "origin": "slice_mask_mapper_list",
                "target": "slice_mapper"
              },
              {
                "origin": "slice_mapper",
                "target": "threshold_value_"
              },
              {
                "origin": "slice_mapper",
                "target": "threshold_"
              },
              {
                "origin": "threshold_value_",
                "target": "threshold_"
              },
              {
                "origin": "threshold_",
                "target": "merge_slice_masks"
              },
              {
                "origin": "merge_slice_masks",
                "target": "outputspec"
              }
            ]
          },
          {
            "name": "anat_to_func_linear_xfm",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "in_file2": "[Undefined]",
              "invert_xfm": "True",
              "concat_xfm": "[Undefined]",
              "fix_scale_skew": "[Undefined]",
              "out_file": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "Functional_eroded_mask",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "reference": "[Undefined]",
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]",
              "in_matrix_file": "[Undefined]",
              "apply_xfm": "True",
              "apply_isoxfm": "[Undefined]",
              "datatype": "[Undefined]",
              "cost": "[Undefined]",
              "cost_func": "[Undefined]",
              "uses_qform": "[Undefined]",
              "display_init": "[Undefined]",
              "angle_rep": "[Undefined]",
              "interp": "nearestneighbour",
              "sinc_width": "[Undefined]",
              "sinc_window": "[Undefined]",
              "bins": "[Undefined]",
              "dof": "[Undefined]",
              "no_resample": "[Undefined]",
              "force_scaling": "[Undefined]",
              "min_sampling": "[Undefined]",
              "padding_size": "[Undefined]",
              "searchr_x": "[Undefined]",
              "searchr_y": "[Undefined]",
              "searchr_z": "[Undefined]",
              "no_search": "[Undefined]",
              "coarse_search": "[Undefined]",
              "fine_search": "[Undefined]",
              "schedule": "[Undefined]",
              "ref_weight": "[Undefined]",
              "in_weight": "[Undefined]",
              "no_clamp": "[Undefined]",
              "no_resample_blur": "[Undefined]",
              "rigid2D": "[Undefined]",
              "save_log": "[Undefined]",
              "verbose": "[Undefined]",
              "bgvalue": "[Undefined]",
              "wm_seg": "[Undefined]",
              "wmcoords": "[Undefined]",
              "wmnorms": "[Undefined]",
              "fieldmap": "[Undefined]",
              "fieldmapmask": "[Undefined]",
              "pedir": "[Undefined]",
              "echospacing": "[Undefined]",
              "bbrtype": "[Undefined]",
              "bbrslope": "[Undefined]",
              "output_type": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "out_matrix_file": "[Undefined]",
              "out_log": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_cosine_filter",
            "type": "node",
            "inputs": {
              "function_str": "def cosine_filter(input_image_path, timestep, period_cut=128, remove_mean=True, axis=-1, failure_mode='error'):\n    \"\"\"\n    input_image_path: string\n            Bold image to be filtered.\n    timestep: float\n            'Repetition time (TR) of series (in sec) - derived from image header if unspecified'\n    period_cut: float\n            Minimum period (in sec) for DCT high-pass filter, nipype default value: 128\n\n    \"\"\"\n\n    from CPAC.nuisance.utils.compcor import _full_rank\n    from CPAC.nuisance.utils.compcor import _cosine_drift\n\n    input_img = nb.load(input_image_path)\n    input_data = input_img.get_fdata()\n\n    datashape = input_data.shape\n    timepoints = datashape[axis]\n    if datashape[0] == 0 and failure_mode != 'error':\n        return input_data, np.array([])\n\n    input_data = input_data.reshape((-1, timepoints))\n\n    frametimes = timestep * np.arange(timepoints)\n    X = _full_rank(_cosine_drift(period_cut, frametimes))[0]\n    non_constant_regressors = X[:, :-1] if X.shape[1] > 1 else np.array([])\n\n    betas = np.linalg.lstsq(X, input_data.T)[0]\n\n    if not remove_mean:\n        X = X[:, :-1]\n        betas = betas[:-1]\n\n    residuals = input_data - X.dot(betas).T\n\n    output_data = residuals.reshape(datashape)\n\n    hdr = input_img.header\n    output_img = nb.Nifti1Image(output_data, header=hdr,\n                                affine=input_img.affine)\n\n    file_name = input_image_path[input_image_path.rindex('/')+1:]\n\n    cosfiltered_img = os.path.join(os.getcwd(), file_name)\n\n    output_img.to_filename(cosfiltered_img)\n\n    return cosfiltered_img\n",
              "input_image_path": "[Undefined]",
              "timestep": "[Undefined]"
            },
            "outputs": {
              "cosfiltered_img": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_tr_string2float",
            "type": "node",
            "inputs": {
              "function_str": "def TR_string_to_float(tr):\n    \"\"\"\n    Convert TR string to seconds (float). Suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Parameters\n    ----------\n    tr : TR string representation. May use suffixes 's' or 'ms' to indicate\n    seconds or milliseconds.\n\n    Returns\n    -------\n    tr in seconds (float)\n    \"\"\"\n    if not isinstance(tr, str):\n        raise TypeError(f'Improper type for TR_string_to_float ({tr}).')\n\n    tr_str = tr.replace(' ', '')\n\n    try:\n        if tr_str.endswith('ms'):\n            tr_numeric = float(tr_str[:-2]) * 0.001\n        elif tr.endswith('s'):\n            tr_numeric = float(tr_str[:-1])\n        else:\n            tr_numeric = float(tr_str)\n    except Exception as exc:\n        raise ValueError(f'Can not convert TR string to float: \"{tr}\".') from exc\n\n    return tr_numeric\n",
              "tr": "[Undefined]"
            },
            "outputs": {
              "tr_float": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_std",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "options": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI",
              "args": "-nzstdev",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_standardized",
            "type": "node",
            "inputs": {
              "in_file_a": "[Undefined]",
              "in_file_b": "[Undefined]",
              "in_file_c": "[Undefined]",
              "out_file": "[Undefined]",
              "expr": "a/b",
              "start_idx": "[Undefined]",
              "stop_idx": "[Undefined]",
              "single_idx": "[Undefined]",
              "overwrite": "[Undefined]",
              "other": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "tCompCor_pc",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "out_file": "[Undefined]",
              "mask": "[Undefined]",
              "pcs_file": "[Undefined]",
              "pcs": "5",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "-vmean -nscale",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "pcs_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_merge_masks",
            "type": "node",
            "inputs": {
              "axis": "vstack",
              "no_flatten": "False",
              "ravel_inputs": "False",
              "in1": "[Undefined]"
            },
            "outputs": {
              "out": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_union_masks",
            "type": "node",
            "inputs": {
              "in_files": "[Undefined]",
              "out_file": "[Undefined]",
              "count": "[Undefined]",
              "datum": "[Undefined]",
              "dilate_inputs": "[Undefined]",
              "dilate_results": "[Undefined]",
              "frac": "[Undefined]",
              "inter": "[Undefined]",
              "union": "[Undefined]",
              "fill_holes": "[Undefined]",
              "fill_dirs": "[Undefined]",
              "verbose": "[Undefined]",
              "num_threads": "1",
              "outputtype": "NIFTI_GZ",
              "args": "[Undefined]",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "GlobalSignal_mean",
            "type": "node",
            "inputs": {
              "in_file": "[Undefined]",
              "mask": "[Undefined]",
              "mask_file": "[Undefined]",
              "mask_f2short": "[Undefined]",
              "num_roi": "[Undefined]",
              "zerofill": "[Undefined]",
              "roisel": "[Undefined]",
              "debug": "[Undefined]",
              "quiet": "False",
              "nomeanout": "[Undefined]",
              "nobriklab": "[Undefined]",
              "format1D": "[Undefined]",
              "format1DR": "[Undefined]",
              "stat": "[Undefined]",
              "out_file": "[Undefined]",
              "args": "-1Dformat",
              "environ": "{}"
            },
            "outputs": {
              "out_file": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "build_nuisance_regressors",
            "type": "node",
            "inputs": {
              "function_str": "CPAC.nuisance.nuisance.gather_nuisance",
              "functional_file_path": "[Undefined]",
              "selector": "{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'GlobalSignal': {'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': {'filter': 'Mean', 'method': 'Mean'}}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT', 'by_slice': False}}",
              "grey_matter_summary_file_path": "[Undefined]",
              "white_matter_summary_file_path": "[Undefined]",
              "csf_summary_file_path": "[Undefined]",
              "acompcor_file_path": "[Undefined]",
              "tcompcor_file_path": "[Undefined]",
              "global_summary_file_path": "[Undefined]",
              "motion_parameters_file_path": "[Undefined]",
              "custom_file_paths": "[Undefined]",
              "censor_file_path": "[Undefined]"
            },
            "outputs": {
              "out_file": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "outputs": {
              "regressors_file_path": "[Undefined]",
              "censor_indices": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "functional_mean"
          },
          {
            "origin": "inputspec",
            "target": "Anatomical_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "inputspec",
            "target": "aCompCor_tr_string2float"
          },
          {
            "origin": "inputspec",
            "target": "tcompcor"
          },
          {
            "origin": "inputspec",
            "target": "anat_to_func_linear_xfm"
          },
          {
            "origin": "inputspec",
            "target": "Functional_eroded_mask"
          },
          {
            "origin": "inputspec",
            "target": "tCompCor_cosine_filter"
          },
          {
            "origin": "inputspec",
            "target": "tCompCor_tr_string2float"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_merge_masks"
          },
          {
            "origin": "inputspec",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "inputspec",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "Functional_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "WhiteMatter_2mm_flirt"
          },
          {
            "origin": "Anatomical_2mm_flirt",
            "target": "CerebrospinalFluid_2mm_flirt"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "Functional_2mm_flirt",
            "target": "aCompCor_cosine_filter"
          },
          {
            "origin": "WhiteMatter_2mm_flirt",
            "target": "WhiteMatter_merge_masks"
          },
          {
            "origin": "WhiteMatter_2mm_flirt",
            "target": "aCompCor_merge_masks"
          },
          {
            "origin": "WhiteMatter_merge_masks",
            "target": "WhiteMatter_union_masks"
          },
          {
            "origin": "WhiteMatter_union_masks",
            "target": "WhiteMatter_mean"
          },
          {
            "origin": "WhiteMatter_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "CerebrospinalFluid_2mm_flirt",
            "target": "CerebrospinalFluid_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_2mm_flirt",
            "target": "aCompCor_merge_masks"
          },
          {
            "origin": "CerebrospinalFluid_merge_masks",
            "target": "CerebrospinalFluid_union_masks"
          },
          {
            "origin": "CerebrospinalFluid_union_masks",
            "target": "CerebrospinalFluid_mean"
          },
          {
            "origin": "CerebrospinalFluid_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "aCompCor_merge_masks",
            "target": "aCompCor_union_masks"
          },
          {
            "origin": "aCompCor_union_masks",
            "target": "aCompCor_std"
          },
          {
            "origin": "aCompCor_union_masks",
            "target": "aCompCor_pc"
          },
          {
            "origin": "aCompCor_cosine_filter",
            "target": "aCompCor_std"
          },
          {
            "origin": "aCompCor_cosine_filter",
            "target": "aCompCor_standardized"
          },
          {
            "origin": "aCompCor_tr_string2float",
            "target": "aCompCor_cosine_filter"
          },
          {
            "origin": "aCompCor_std",
            "target": "aCompCor_standardized"
          },
          {
            "origin": "aCompCor_standardized",
            "target": "aCompCor_pc"
          },
          {
            "origin": "aCompCor_pc",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "tcompcor",
            "target": "tCompCor_merge_masks"
          },
          {
            "origin": "anat_to_func_linear_xfm",
            "target": "Functional_eroded_mask"
          },
          {
            "origin": "Functional_eroded_mask",
            "target": "tcompcor"
          },
          {
            "origin": "tCompCor_merge_masks",
            "target": "tCompCor_union_masks"
          },
          {
            "origin": "tCompCor_union_masks",
            "target": "tCompCor_std"
          },
          {
            "origin": "tCompCor_union_masks",
            "target": "tCompCor_pc"
          },
          {
            "origin": "tCompCor_cosine_filter",
            "target": "tCompCor_std"
          },
          {
            "origin": "tCompCor_cosine_filter",
            "target": "tCompCor_standardized"
          },
          {
            "origin": "tCompCor_tr_string2float",
            "target": "tCompCor_cosine_filter"
          },
          {
            "origin": "tCompCor_std",
            "target": "tCompCor_standardized"
          },
          {
            "origin": "tCompCor_standardized",
            "target": "tCompCor_pc"
          },
          {
            "origin": "tCompCor_pc",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "GlobalSignal_merge_masks",
            "target": "GlobalSignal_union_masks"
          },
          {
            "origin": "GlobalSignal_union_masks",
            "target": "GlobalSignal_mean"
          },
          {
            "origin": "GlobalSignal_mean",
            "target": "build_nuisance_regressors"
          },
          {
            "origin": "build_nuisance_regressors",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "anat_to_func_linear_xfm_Regressor_1_156",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "in_file2": "[Undefined]",
          "invert_xfm": "True",
          "concat_xfm": "[Undefined]",
          "fix_scale_skew": "[Undefined]",
          "out_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_invlinear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-T1w_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_linear_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-T1w_to-template_mode-image_desc-linear_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "Linear",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "convert_bbr2itk_186",
        "type": "node",
        "inputs": {
          "function_str": "def run_c3d(reference_file, source_file, transform_file):\n\n    import os\n    import subprocess\n\n    itk_transform = os.path.join(os.getcwd(), 'affine.txt')\n\n    cmd = ['c3d_affine_tool', '-ref', reference_file, '-src',\n            source_file, transform_file, '-fsl2ras', '-oitk', itk_transform]\n    retcode = subprocess.check_output(cmd)\n\n    return itk_transform\n",
          "reference_file": "[Undefined]",
          "source_file": "[Undefined]",
          "transform_file": "[Undefined]"
        },
        "outputs": {
          "itk_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "split_func_186",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "out_base_name": "[Undefined]",
          "dimension": "t",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_files": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "convert_motionxfm2itk_186_",
        "type": "node",
        "inputs": {
          "function_str": "def run_c3d(reference_file, source_file, transform_file):\n\n    import os\n    import subprocess\n\n    itk_transform = os.path.join(os.getcwd(), 'affine.txt')\n\n    cmd = ['c3d_affine_tool', '-ref', reference_file, '-src',\n            source_file, transform_file, '-fsl2ras', '-oitk', itk_transform]\n    retcode = subprocess.check_output(cmd)\n\n    return itk_transform\n",
          "reference_file": "[Undefined]",
          "source_file": "[Undefined]",
          "transform_file": "[Undefined]"
        },
        "outputs": {
          "itk_transform": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_func_to_standard_186_",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "in1": "[Undefined]",
          "in2": "[Undefined]",
          "in3": "identity",
          "in4": "[Undefined]",
          "no_flatten": "False",
          "ravel_inputs": "False"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_func_to_standard_186_",
        "type": "node",
        "inputs": {
          "args": "[Undefined]",
          "default_value": "0.0",
          "dimension": "[Undefined]",
          "environ": "{'NSLOTS': '1'}",
          "float": "True",
          "input_image": "[Undefined]",
          "input_image_type": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "num_threads": "1",
          "out_postfix": "_trans",
          "output_image": "[Undefined]",
          "print_out_composite_warp_file": "[Undefined]",
          "reference_image": "[Undefined]",
          "transforms": "[Undefined]"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_derivfunc_to_standard_186_",
        "type": "node",
        "inputs": {
          "args": "[Undefined]",
          "default_value": "0.0",
          "dimension": "[Undefined]",
          "environ": "{'NSLOTS': '1'}",
          "float": "True",
          "input_image": "[Undefined]",
          "input_image_type": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "num_threads": "1",
          "out_postfix": "_trans",
          "output_image": "[Undefined]",
          "print_out_composite_warp_file": "[Undefined]",
          "reference_image": "[Undefined]",
          "transforms": "[Undefined]"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "resampled_T1w-brain-template-deriv",
        "type": "node",
        "inputs": {
          "function_str": "CPAC.utils.datasource.resolve_resolution",
          "resolution": "3.438mmx3.438mmx3.4mm",
          "template": "/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "template_name": "T1w-brain-template-deriv",
          "tag": "func_derivative_outputs"
        },
        "outputs": {
          "resampled_template": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "merge_func_to_standard_186",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "dimension": "t",
          "tr": "[Undefined]",
          "merged_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "merged_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "merge_derivfunc_to_standard_186",
        "type": "node",
        "inputs": {
          "in_files": "[Undefined]",
          "dimension": "t",
          "tr": "[Undefined]",
          "merged_file": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "merged_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_func_mask_to_standard_186",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "MultiLabel",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_func_mask_to_standard_186",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "no_flatten": "False",
          "ravel_inputs": "False",
          "in1": "[Undefined]",
          "in2": "[Undefined]"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "applyxfm_deriv_mask_to_standard_186",
        "type": "node",
        "inputs": {
          "dimension": "[Undefined]",
          "input_image_type": "[Undefined]",
          "input_image": "[Undefined]",
          "output_image": "[Undefined]",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "MultiLabel",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "[Undefined]",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "collectxfm_deriv_mask_to_standard_186",
        "type": "node",
        "inputs": {
          "axis": "vstack",
          "no_flatten": "False",
          "ravel_inputs": "False",
          "in1": "[Undefined]",
          "in2": "[Undefined]"
        },
        "outputs": {
          "out": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "get_func_brain_to_standard_186",
        "type": "node",
        "inputs": {
          "mask_file": "[Undefined]",
          "in_file": "[Undefined]",
          "out_file": "[Undefined]",
          "internal_datatype": "[Undefined]",
          "output_datatype": "[Undefined]",
          "nan2zeros": "[Undefined]",
          "output_type": "NIFTI_GZ",
          "args": "[Undefined]",
          "environ": "{'FSLOUTPUTTYPE': 'NIFTI_GZ'}"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "warp_funcreg-sbref_to_T1wtemplate_204",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'input_image': '[Undefined]', 'interpolation': 'NearestNeighbor', 'reference': '[Undefined]', 'transform': '[Undefined]'}",
          "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204": "{'args': '[Undefined]', 'default_value': 0.0, 'dimension': 3, 'environ': {'NSLOTS': '1'}, 'float': False, 'input_image_type': '[Undefined]', 'interpolation_parameters': '[Undefined]', 'invert_transform_flags': '[Undefined]', 'num_threads': 1, 'out_postfix': '_trans', 'output_image': '[Undefined]', 'print_out_composite_warp_file': '[Undefined]'}",
          "interp_string": "{'function_str': \"def interpolation_string(interpolation, reg_tool):\\n    if reg_tool == 'ants':\\n        pass\\n    elif reg_tool == 'fsl':\\n        # translate to FSL\\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\\n        #          in C-PAC are now converted to .nii.gz\\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\\n    return interpolation\\n\", 'reg_tool': 'ants'}",
          "single_ants_xfm_to_list": "{'function_str': 'def single_ants_xfm_to_list(transform):\\n    transform_list = [transform]\\n    return transform_list\\n'}",
          "outputspec": "{}"
        },
        "outputs": {
          "inputspec": "{'input_image': None, 'interpolation': None, 'reference': None, 'transform': None}",
          "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204": "{'output_image': None}",
          "interp_string": "{'interpolation': None}",
          "single_ants_xfm_to_list": "{'transform_list': None}",
          "outputspec": "{'output_image': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "NearestNeighbor"
            },
            "outputs": {
              "input_image": "[Undefined]",
              "reference": "[Undefined]",
              "transform": "[Undefined]",
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204",
            "type": "node",
            "inputs": {
              "dimension": "3",
              "input_image_type": "[Undefined]",
              "input_image": "[Undefined]",
              "output_image": "[Undefined]",
              "out_postfix": "_trans",
              "reference_image": "[Undefined]",
              "interpolation": "Linear",
              "interpolation_parameters": "[Undefined]",
              "transforms": "[Undefined]",
              "invert_transform_flags": "[Undefined]",
              "default_value": "0.0",
              "print_out_composite_warp_file": "[Undefined]",
              "float": "False",
              "num_threads": "1",
              "args": "[Undefined]",
              "environ": "{'NSLOTS': '1'}"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "interp_string",
            "type": "node",
            "inputs": {
              "function_str": "def interpolation_string(interpolation, reg_tool):\n    if reg_tool == 'ants':\n        pass\n    elif reg_tool == 'fsl':\n        # translate to FSL\n        # warning: flirt requires 'nearestneighbour', but FSL applywarp uses\n        #          'nn', so this is designed for applywarp, as all FSL xfm's\n        #          in C-PAC are now converted to .nii.gz\n        interpolation = interpolation.replace('NearestNeighbor', 'nn')\n    return interpolation\n",
              "interpolation": "[Undefined]",
              "reg_tool": "ants"
            },
            "outputs": {
              "interpolation": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "single_ants_xfm_to_list",
            "type": "node",
            "inputs": {
              "function_str": "def single_ants_xfm_to_list(transform):\n    transform_list = [transform]\n    return transform_list\n",
              "transform": "[Undefined]"
            },
            "outputs": {
              "transform_list": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "output_image": "[Undefined]"
            },
            "outputs": {
              "output_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204"
          },
          {
            "origin": "inputspec",
            "target": "interp_string"
          },
          {
            "origin": "inputspec",
            "target": "single_ants_xfm_to_list"
          },
          {
            "origin": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204",
            "target": "outputspec"
          },
          {
            "origin": "interp_string",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204"
          },
          {
            "origin": "single_ants_xfm_to_list",
            "target": "apply_warp_warp_funcreg-sbref_to_T1wtemplate_204"
          }
        ]
      },
      {
        "name": "write_composite_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-bold_to-template_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[Undefined]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-preproc_T1w_37",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-preproc_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-preproc_T1w_37",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-preproc_T1w_37",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], 'Sources': ['desc-head_T1w', 'desc-preproc_T1w', 'space-T1w_desc-brain_mask'], 'SkullStripped': 'True', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-preproc_T1w_37",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-head_T1w_39",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-head_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-head_T1w_39",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-head_T1w_39",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'Sources': ['desc-head_T1w', 'desc-preproc_T1w', 'space-T1w_desc-brain_mask'], 'SkullStripped': 'False', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-head_T1w_39",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_desc-brain_mask_32",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-T1w_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_desc-brain_mask_32",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_desc-brain_mask_32",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'RawSources': ['T1w'], 'CpacProvenance': ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'Sources': ['desc-preproc_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_desc-brain_mask_32",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-preproc_T1w_46",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-preproc_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-preproc_T1w_46",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "anat_mni_ants_register",
        "type": "workflow",
        "inputs": {
          "inputspec": "{'ants_para': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'fixed_image_mask': None, 'interp': '[Undefined]', 'moving_brain': '[Undefined]', 'moving_mask': '[Undefined]', 'moving_skull': '[Undefined]', 'reference_brain': '[Undefined]', 'reference_mask': '[Undefined]', 'reference_skull': '[Undefined]'}",
          "calc_ants_warp": "{'function_str': 'def hardcoded_reg(moving_brain, reference_brain, moving_skull,\\n                  reference_skull, ants_para, moving_mask=None,\\n                  reference_mask=None, fixed_image_mask=None, interp=None,\\n                  reg_with_skull=0):\\n    # TODO: expand transforms to cover all in ANTs para\\n\\n    regcmd = [\"antsRegistration\"]\\n    for para_index in range(len(ants_para)):\\n        for para_type in ants_para[para_index]:\\n            if para_type == \\'dimensionality\\':\\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\\n                    err_msg = \\'Dimensionality specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 2, 3, or 4 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--dimensionality\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'verbose\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Verbose output option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--verbose\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'float\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'Float option in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--float\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'collapse-output-transforms\\':\\n                if ants_para[para_index][para_type] not in [0, 1]:\\n                    err_msg = \\'collapse-output-transforms specified in ANTs parameters: %d, is not supported. \\' \\\\\\n                              \\'Change to 0 or 1 and try again\\' % \\\\\\n                              ants_para[para_index][para_type]\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--collapse-output-transforms\")\\n                    regcmd.append(str(ants_para[para_index][para_type]))\\n\\n            elif para_type == \\'winsorize-image-intensities\\':\\n                if ants_para[para_index][para_type][\\'lowerQuantile\\'] is None or ants_para[para_index][para_type][\\'upperQuantile\\'] is None:\\n                    err_msg = \\'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--winsorize-image-intensities\")\\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type][\\'lowerQuantile\\'],\\n                        ants_para[para_index][para_type][\\'upperQuantile\\']))\\n\\n            elif para_type == \\'initial-moving-transform\\':\\n                if ants_para[para_index][para_type][\\n                    \\'initializationFeature\\'] is None:\\n                    err_msg = \\'Please specifiy initializationFeature of ANTs parameters in pipeline config. \\'\\n                    raise Exception(err_msg)\\n                else:\\n                    regcmd.append(\"--initial-moving-transform\")\\n                    if reg_with_skull == 1:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_skull, moving_skull,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n                    else:\\n                        regcmd.append(\"[{0},{1},{2}]\".format(\\n                            reference_brain, moving_brain,\\n                            ants_para[para_index][para_type][\\n                                \\'initializationFeature\\']))\\n\\n            elif para_type == \\'transforms\\':\\n                for trans_index in range(\\n                        len(ants_para[para_index][para_type])):\\n                    for trans_type in ants_para[para_index][para_type][\\n                        trans_index]:\\n                        regcmd.append(\"--transform\")\\n                        if trans_type == \\'Rigid\\' or trans_type == \\'Affine\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type,\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n\\n                        if trans_type == \\'SyN\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'gradientStep\\'] is None:\\n                                err_msg = \\'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. \\' % trans_type\\n                                raise Exception(err_msg)\\n                            else:\\n                                SyN_para = []\\n                                SyN_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'gradientStep\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'updateFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'updateFieldVarianceInVoxelSpace\\']))\\n                                if ants_para[para_index][para_type][\\n                                    trans_index][trans_type][\\n                                    \\'totalFieldVarianceInVoxelSpace\\'] is not None:\\n                                    SyN_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'totalFieldVarianceInVoxelSpace\\']))\\n                                SyN_para = \\',\\'.join([str(elem)\\n                                                     for elem in SyN_para])\\n                                regcmd.append(\"{0}[{1}]\".format(\\n                                    trans_type, SyN_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'MI\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\n                                                \\'numberOfBins\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                MI_para = []\\n                                MI_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'numberOfBins\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    MI_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                MI_para = \\',\\'.join(\\n                                    [str(elem) for elem in MI_para])\\n                                regcmd.append(\"--metric\")\\n                                if reg_with_skull == 1:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_skull, moving_skull, MI_para))\\n                                else:\\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\\n                                        reference_brain, moving_brain, MI_para))\\n\\n                        if ants_para[para_index][para_type][trans_index][\\n                            trans_type][\\'metric\\'][\\'type\\'] == \\'CC\\':\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'metric\\'][\\n                                \\'metricWeight\\'] is None or \\\\\\n                                            ants_para[para_index][para_type][\\n                                                trans_index][trans_type][\\n                                                \\'metric\\'][\\'radius\\'] is None:\\n                                err_msg = \\'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                CC_para = []\\n                                CC_para.append(\"{0},{1}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\']\\n                                    [\\'metricWeight\\'],\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\'metric\\'][\\n                                        \\'radius\\']))\\n                                if \\'samplingStrategy\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingStrategy\\'] in [\\n                                            \\'None\\', \\'Regular\\', \\'Random\\']:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingStrategy\\']))\\n                                if \\'samplingPercentage\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\'metric\\'][\\n                                                    \\'samplingPercentage\\'] is not None:\\n                                    CC_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'metric\\'][\\'samplingPercentage\\']))\\n                                CC_para = \\',\\'.join(\\n                                    [str(elem) for elem in CC_para])\\n                                regcmd.append(\"--metric\")\\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\\n                                    reference_skull, moving_skull, CC_para))\\n\\n                        if \\'convergence\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            convergence_para = []\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'convergence\\'][\\n                                \\'iteration\\'] is None:\\n                                err_msg = \\'Please specifiy convergence iteration of ANTs parameters in pipeline config.\\'\\n                                raise Exception(err_msg)\\n                            else:\\n                                convergence_para.append(\"{0}\".format(\\n                                    ants_para[para_index][para_type][\\n                                        trans_index][trans_type][\\n                                        \\'convergence\\'][\\'iteration\\']))\\n                                if \\'convergenceThreshold\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceThreshold\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceThreshold\\']))\\n                                if \\'convergenceWindowSize\\' in \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'] and \\\\\\n                                                ants_para[para_index][\\n                                                    para_type][trans_index][\\n                                                    trans_type][\\n                                                    \\'convergence\\'][\\n                                                    \\'convergenceWindowSize\\'] is not None:\\n                                    convergence_para.append(\"{0}\".format(\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'convergence\\'][\\n                                            \\'convergenceWindowSize\\']))\\n                                convergence_para = \\',\\'.join(\\n                                    [str(elem) for elem in convergence_para])\\n                                regcmd.append(\"--convergence\")\\n                                regcmd.append(\\n                                    \"[{0}]\".format(convergence_para))\\n\\n                        if \\'smoothing-sigmas\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'smoothing-sigmas\\'] is not None:\\n                            regcmd.append(\"--smoothing-sigmas\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'smoothing-sigmas\\']))\\n\\n                        if \\'shrink-factors\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'shrink-factors\\'] is not None:\\n                            regcmd.append(\"--shrink-factors\")\\n                            regcmd.append(\"{0}\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'shrink-factors\\']))\\n\\n                        if \\'use-histogram-matching\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type]:\\n                            if ants_para[para_index][para_type][trans_index][\\n                                trans_type][\\'use-histogram-matching\\']:\\n                                regcmd.append(\"--use-histogram-matching\")\\n                                regcmd.append(\"1\")\\n\\n                        if \\'winsorize-image-intensities\\' in \\\\\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type] and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'lowerQuantile\\'] is not None and \\\\\\n                                        ants_para[para_index][para_type][\\n                                            trans_index][trans_type][\\n                                            \\'winsorize-image-intensities\\'][\\n                                            \\'upperQuantile\\'] is not None:\\n                            regcmd.append(\"--winsorize-image-intensities\")\\n                            regcmd.append(\"[{0},{1}]\".format(\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\'winsorize-image-intensities\\']\\n                                [\\'lowerQuantile\\'],\\n                                ants_para[para_index][para_type][trans_index][\\n                                    trans_type][\\n                                    \\'winsorize-image-intensities\\'][\\n                                    \\'upperQuantile\\']))\\n\\n                        if \\'masks\\' in ants_para[para_index][para_type][trans_index][\\n                            trans_type] and ants_para[para_index][para_type][\\n                                trans_index][trans_type][\\'masks\\'] is not None:\\n                            if ants_para[para_index][para_type][trans_index][trans_type][\\'masks\\']:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\\n                            else:\\n                                regcmd.append(\"--masks\")\\n                                regcmd.append(\"[NULL,NULL]\")\\n\\n            elif para_type == \\'masks\\':\\n                # lesion preproc has\\n                if fixed_image_mask is not None:\\n                    regcmd.append(\"--masks\")\\n                    regcmd.append(str(fixed_image_mask))\\n                else:\\n                    if ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == False and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        err_msg = \\'Masks option in ANTs parameters: %d is not supported. \\' \\\\\\n                                  \\'Please set `fixed_image_mask` as True. \\' \\\\\\n                                  \\'Or set both `fixed_image_mask` and `moving_image_mask` as False\\' % \\\\\\n                                  ants_para[para_index][para_type]\\n                        raise Exception(err_msg)\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == True:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\',\\' + str(\\n                            moving_mask) + \\']\\')\\n                    elif ants_para[para_index][para_type][\\n                        \\'fixed_image_mask\\'] == True and \\\\\\n                                    ants_para[para_index][para_type][\\n                                        \\'moving_image_mask\\'] == False:\\n                        regcmd.append(\"--masks\")\\n                        regcmd.append(\\'[\\' + str(reference_mask) + \\']\\')\\n                    else:\\n                        continue\\n\\n    if interp is not None:\\n        regcmd.append(\"--interpolation\")\\n        regcmd.append(\"{0}\".format(interp))\\n\\n    regcmd.append(\"--output\")\\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\\n\\n    # write out the actual command-line entry for testing/validation later\\n    command_file = os.path.join(os.getcwd(), \\'command.txt\\')\\n    with open(command_file, \\'wt\\') as f:\\n        f.write(\\' \\'.join(regcmd))\\n\\n    try:\\n        retcode = subprocess.check_output(regcmd)\\n    except Exception as e:\\n        raise Exception(\\'[!] ANTS registration did not complete successfully.\\'\\n                        \\'\\\\n\\\\nError details:\\\\n{0}\\\\n{1}\\\\n\\'.format(e, e.output))\\n\\n    warp_list = []\\n    warped_image = None\\n\\n    files = [f for f in os.listdir(\\'.\\') if os.path.isfile(f)]\\n\\n    for f in files:\\n        if (\"transform\" in f) and (\"Warped\" not in f):\\n            warp_list.append(os.getcwd() + \"/\" + f)\\n        if \"Warped\" in f:\\n            warped_image = os.getcwd() + \"/\" + f\\n\\n    if not warped_image:\\n        raise Exception(\"\\\\n\\\\n[!] No registration output file found. ANTS \"\\n                        \"registration may not have completed \"\\n                        \"successfully.\\\\n\\\\n\")\\n\\n    return warp_list, warped_image\\n', 'reg_with_skull': '[Undefined]'}",
          "select_forward_initial": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Initial'}",
          "select_forward_rigid": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Rigid'}",
          "select_forward_affine": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Affine'}",
          "select_forward_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Warp'}",
          "select_inverse_warp": "{'function_str': \"def seperate_warps_list(warp_list, selection):\\n    selected_warp = None\\n    for warp in warp_list:\\n        if selection == 'Warp':\\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\\n                selected_warp = warp\\n        else:\\n            if selection in warp:\\n                selected_warp = warp\\n    return selected_warp\\n\", 'selection': 'Inverse'}",
          "outputspec": "{'composite_transform': '[Undefined]', 'wait': '[Undefined]'}"
        },
        "outputs": {
          "inputspec": "{'ants_para': None, 'fixed_image_mask': None, 'interp': None, 'moving_brain': None, 'moving_mask': None, 'moving_skull': None, 'reference_brain': None, 'reference_mask': None, 'reference_skull': None}",
          "calc_ants_warp": "{'warp_list': None, 'warped_image': None}",
          "select_forward_initial": "{'selected_warp': None}",
          "select_forward_rigid": "{'selected_warp': None}",
          "select_forward_affine": "{'selected_warp': None}",
          "select_forward_warp": "{'selected_warp': None}",
          "select_inverse_warp": "{'selected_warp': None}",
          "outputspec": "{'ants_affine_xfm': None, 'ants_initial_xfm': None, 'ants_rigid_xfm': None, 'composite_transform': None, 'inverse_warp_field': None, 'normalized_output_brain': None, 'wait': None, 'warp_field': None}"
        },
        "result": null,
        "nodes": [
          {
            "name": "inputspec",
            "type": "node",
            "inputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "None",
              "ants_para": "[{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}]",
              "interp": "[Undefined]"
            },
            "outputs": {
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "reference_mask": "[Undefined]",
              "moving_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "ants_para": "[Undefined]",
              "interp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "calc_ants_warp",
            "type": "node",
            "inputs": {
              "function_str": "def hardcoded_reg(moving_brain, reference_brain, moving_skull,\n                  reference_skull, ants_para, moving_mask=None,\n                  reference_mask=None, fixed_image_mask=None, interp=None,\n                  reg_with_skull=0):\n    # TODO: expand transforms to cover all in ANTs para\n\n    regcmd = [\"antsRegistration\"]\n    for para_index in range(len(ants_para)):\n        for para_type in ants_para[para_index]:\n            if para_type == 'dimensionality':\n                if ants_para[para_index][para_type] not in [2, 3, 4]:\n                    err_msg = 'Dimensionality specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 2, 3, or 4 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--dimensionality\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'verbose':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Verbose output option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--verbose\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'float':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'Float option in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--float\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'collapse-output-transforms':\n                if ants_para[para_index][para_type] not in [0, 1]:\n                    err_msg = 'collapse-output-transforms specified in ANTs parameters: %d, is not supported. ' \\\n                              'Change to 0 or 1 and try again' % \\\n                              ants_para[para_index][para_type]\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--collapse-output-transforms\")\n                    regcmd.append(str(ants_para[para_index][para_type]))\n\n            elif para_type == 'winsorize-image-intensities':\n                if ants_para[para_index][para_type]['lowerQuantile'] is None or ants_para[para_index][para_type]['upperQuantile'] is None:\n                    err_msg = 'Please specifiy lowerQuantile and upperQuantile of ANTs parameters --winsorize-image-intensities in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--winsorize-image-intensities\")\n                    regcmd.append(\"[{0},{1}]\".format(ants_para[para_index][para_type]['lowerQuantile'],\n                        ants_para[para_index][para_type]['upperQuantile']))\n\n            elif para_type == 'initial-moving-transform':\n                if ants_para[para_index][para_type][\n                    'initializationFeature'] is None:\n                    err_msg = 'Please specifiy initializationFeature of ANTs parameters in pipeline config. '\n                    raise Exception(err_msg)\n                else:\n                    regcmd.append(\"--initial-moving-transform\")\n                    if reg_with_skull == 1:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_skull, moving_skull,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n                    else:\n                        regcmd.append(\"[{0},{1},{2}]\".format(\n                            reference_brain, moving_brain,\n                            ants_para[para_index][para_type][\n                                'initializationFeature']))\n\n            elif para_type == 'transforms':\n                for trans_index in range(\n                        len(ants_para[para_index][para_type])):\n                    for trans_type in ants_para[para_index][para_type][\n                        trans_index]:\n                        regcmd.append(\"--transform\")\n                        if trans_type == 'Rigid' or trans_type == 'Affine':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type,\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n\n                        if trans_type == 'SyN':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['gradientStep'] is None:\n                                err_msg = 'Please specifiy % s Gradient Step of ANTs parameters in pipeline config. ' % trans_type\n                                raise Exception(err_msg)\n                            else:\n                                SyN_para = []\n                                SyN_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'gradientStep']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'updateFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'updateFieldVarianceInVoxelSpace']))\n                                if ants_para[para_index][para_type][\n                                    trans_index][trans_type][\n                                    'totalFieldVarianceInVoxelSpace'] is not None:\n                                    SyN_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'totalFieldVarianceInVoxelSpace']))\n                                SyN_para = ','.join([str(elem)\n                                                     for elem in SyN_para])\n                                regcmd.append(\"{0}[{1}]\".format(\n                                    trans_type, SyN_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'MI':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric'][\n                                                'numberOfBins'] is None:\n                                err_msg = 'Please specifiy metricWeight and numberOfBins for metric MI of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                MI_para = []\n                                MI_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'numberOfBins']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    MI_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                MI_para = ','.join(\n                                    [str(elem) for elem in MI_para])\n                                regcmd.append(\"--metric\")\n                                if reg_with_skull == 1:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_skull, moving_skull, MI_para))\n                                else:\n                                    regcmd.append(\"MI[{0},{1},{2}]\".format(\n                                        reference_brain, moving_brain, MI_para))\n\n                        if ants_para[para_index][para_type][trans_index][\n                            trans_type]['metric']['type'] == 'CC':\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['metric'][\n                                'metricWeight'] is None or \\\n                                            ants_para[para_index][para_type][\n                                                trans_index][trans_type][\n                                                'metric']['radius'] is None:\n                                err_msg = 'Please specifiy metricWeight and radius for metric CC of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                CC_para = []\n                                CC_para.append(\"{0},{1}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric']\n                                    ['metricWeight'],\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type]['metric'][\n                                        'radius']))\n                                if 'samplingStrategy' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingStrategy'] in [\n                                            'None', 'Regular', 'Random']:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingStrategy']))\n                                if 'samplingPercentage' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type]['metric'][\n                                                    'samplingPercentage'] is not None:\n                                    CC_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'metric']['samplingPercentage']))\n                                CC_para = ','.join(\n                                    [str(elem) for elem in CC_para])\n                                regcmd.append(\"--metric\")\n                                regcmd.append(\"CC[{0},{1},{2}]\".format(\n                                    reference_skull, moving_skull, CC_para))\n\n                        if 'convergence' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            convergence_para = []\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['convergence'][\n                                'iteration'] is None:\n                                err_msg = 'Please specifiy convergence iteration of ANTs parameters in pipeline config.'\n                                raise Exception(err_msg)\n                            else:\n                                convergence_para.append(\"{0}\".format(\n                                    ants_para[para_index][para_type][\n                                        trans_index][trans_type][\n                                        'convergence']['iteration']))\n                                if 'convergenceThreshold' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceThreshold'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceThreshold']))\n                                if 'convergenceWindowSize' in \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'] and \\\n                                                ants_para[para_index][\n                                                    para_type][trans_index][\n                                                    trans_type][\n                                                    'convergence'][\n                                                    'convergenceWindowSize'] is not None:\n                                    convergence_para.append(\"{0}\".format(\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'convergence'][\n                                            'convergenceWindowSize']))\n                                convergence_para = ','.join(\n                                    [str(elem) for elem in convergence_para])\n                                regcmd.append(\"--convergence\")\n                                regcmd.append(\n                                    \"[{0}]\".format(convergence_para))\n\n                        if 'smoothing-sigmas' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'smoothing-sigmas'] is not None:\n                            regcmd.append(\"--smoothing-sigmas\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['smoothing-sigmas']))\n\n                        if 'shrink-factors' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'shrink-factors'] is not None:\n                            regcmd.append(\"--shrink-factors\")\n                            regcmd.append(\"{0}\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['shrink-factors']))\n\n                        if 'use-histogram-matching' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]:\n                            if ants_para[para_index][para_type][trans_index][\n                                trans_type]['use-histogram-matching']:\n                                regcmd.append(\"--use-histogram-matching\")\n                                regcmd.append(\"1\")\n\n                        if 'winsorize-image-intensities' in \\\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type] and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'lowerQuantile'] is not None and \\\n                                        ants_para[para_index][para_type][\n                                            trans_index][trans_type][\n                                            'winsorize-image-intensities'][\n                                            'upperQuantile'] is not None:\n                            regcmd.append(\"--winsorize-image-intensities\")\n                            regcmd.append(\"[{0},{1}]\".format(\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type]['winsorize-image-intensities']\n                                ['lowerQuantile'],\n                                ants_para[para_index][para_type][trans_index][\n                                    trans_type][\n                                    'winsorize-image-intensities'][\n                                    'upperQuantile']))\n\n                        if 'masks' in ants_para[para_index][para_type][trans_index][\n                            trans_type] and ants_para[para_index][para_type][\n                                trans_index][trans_type]['masks'] is not None:\n                            if ants_para[para_index][para_type][trans_index][trans_type]['masks']:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[{0},{1}]\".format(reference_mask, moving_mask))\n                            else:\n                                regcmd.append(\"--masks\")\n                                regcmd.append(\"[NULL,NULL]\")\n\n            elif para_type == 'masks':\n                # lesion preproc has\n                if fixed_image_mask is not None:\n                    regcmd.append(\"--masks\")\n                    regcmd.append(str(fixed_image_mask))\n                else:\n                    if ants_para[para_index][para_type][\n                        'fixed_image_mask'] == False and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        err_msg = 'Masks option in ANTs parameters: %d is not supported. ' \\\n                                  'Please set `fixed_image_mask` as True. ' \\\n                                  'Or set both `fixed_image_mask` and `moving_image_mask` as False' % \\\n                                  ants_para[para_index][para_type]\n                        raise Exception(err_msg)\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == True:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ',' + str(\n                            moving_mask) + ']')\n                    elif ants_para[para_index][para_type][\n                        'fixed_image_mask'] == True and \\\n                                    ants_para[para_index][para_type][\n                                        'moving_image_mask'] == False:\n                        regcmd.append(\"--masks\")\n                        regcmd.append('[' + str(reference_mask) + ']')\n                    else:\n                        continue\n\n    if interp is not None:\n        regcmd.append(\"--interpolation\")\n        regcmd.append(\"{0}\".format(interp))\n\n    regcmd.append(\"--output\")\n    regcmd.append(\"[transform,transform_Warped.nii.gz]\")\n\n    # write out the actual command-line entry for testing/validation later\n    command_file = os.path.join(os.getcwd(), 'command.txt')\n    with open(command_file, 'wt') as f:\n        f.write(' '.join(regcmd))\n\n    try:\n        retcode = subprocess.check_output(regcmd)\n    except Exception as e:\n        raise Exception('[!] ANTS registration did not complete successfully.'\n                        '\\n\\nError details:\\n{0}\\n{1}\\n'.format(e, e.output))\n\n    warp_list = []\n    warped_image = None\n\n    files = [f for f in os.listdir('.') if os.path.isfile(f)]\n\n    for f in files:\n        if (\"transform\" in f) and (\"Warped\" not in f):\n            warp_list.append(os.getcwd() + \"/\" + f)\n        if \"Warped\" in f:\n            warped_image = os.getcwd() + \"/\" + f\n\n    if not warped_image:\n        raise Exception(\"\\n\\n[!] No registration output file found. ANTS \"\n                        \"registration may not have completed \"\n                        \"successfully.\\n\\n\")\n\n    return warp_list, warped_image\n",
              "moving_brain": "[Undefined]",
              "reference_brain": "[Undefined]",
              "moving_skull": "[Undefined]",
              "reference_skull": "[Undefined]",
              "ants_para": "[Undefined]",
              "moving_mask": "[Undefined]",
              "reference_mask": "[Undefined]",
              "fixed_image_mask": "[Undefined]",
              "interp": "[Undefined]",
              "reg_with_skull": "[Undefined]"
            },
            "outputs": {
              "warp_list": "[Undefined]",
              "warped_image": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_initial",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Initial"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_rigid",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Rigid"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_affine",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Affine"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_forward_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Warp"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "select_inverse_warp",
            "type": "node",
            "inputs": {
              "function_str": "def seperate_warps_list(warp_list, selection):\n    selected_warp = None\n    for warp in warp_list:\n        if selection == 'Warp':\n            if '3Warp' in warp or '2Warp' in warp or '1Warp' in warp:\n                selected_warp = warp\n        else:\n            if selection in warp:\n                selected_warp = warp\n    return selected_warp\n",
              "warp_list": "[Undefined]",
              "selection": "Inverse"
            },
            "outputs": {
              "selected_warp": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          },
          {
            "name": "outputspec",
            "type": "node",
            "inputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "outputs": {
              "ants_initial_xfm": "[Undefined]",
              "ants_rigid_xfm": "[Undefined]",
              "ants_affine_xfm": "[Undefined]",
              "warp_field": "[Undefined]",
              "inverse_warp_field": "[Undefined]",
              "composite_transform": "[Undefined]",
              "wait": "[Undefined]",
              "normalized_output_brain": "[Undefined]"
            },
            "result": null,
            "nodes": [],
            "edges": []
          }
        ],
        "edges": [
          {
            "origin": "inputspec",
            "target": "calc_ants_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_initial"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_rigid"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_affine"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_forward_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "select_inverse_warp"
          },
          {
            "origin": "calc_ants_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_initial",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_rigid",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_affine",
            "target": "outputspec"
          },
          {
            "origin": "select_forward_warp",
            "target": "outputspec"
          },
          {
            "origin": "select_inverse_warp",
            "target": "outputspec"
          }
        ]
      },
      {
        "name": "json_space-template_desc-preproc_T1w_46",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'space-template_desc-preproc_T1w:register_ANTs_anat_to_template'], 'SkullStripped': 'False', 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'The preprocessed T1w brain transformed to template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-preproc_T1w_46",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_xfm_47",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-T1w_to-template_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_xfm_47",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_xfm_47",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Composite (affine + warp field) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_xfm_47",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_xfm_48",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-template_to-T1w_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_xfm_48",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_xfm_48",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Composite (affine + warp field) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_xfm_48",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-T1w_to-template_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Linear (affine) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-template_to-T1w_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Linear (affine) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-T1w_to-template_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-nonlinear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Nonlinear (warp field) transform from T1w native space to T1w-template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-template_to-T1w_mode-image_desc-nonlinear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-nonlinear_xfm:register_ANTs_anat_to_template'], 'Sources': ['desc-preproc_T1w', 'space-T1w_desc-brain_mask', 'desc-head_T1w', 'T1w-template', 'T1w-brain-template', 'T1w-brain-template-mask'], 'Description': 'Nonlinear (warp field) transform from T1w-template space to T1w native space.', 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-head_T1w_56",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-head_T1w",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-head_T1w_56",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-head_T1w_56",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], ['T1w-template:template_resample'], 'space-template_desc-head_T1w:transform_whole_head_T1w_to_T1template'], 'SkullStripped': 'False', 'Sources': ['desc-head_T1w', 'from-T1w_to-template_mode-image_xfm', 'T1w-template'], 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-head_T1w_56",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], ['T1w-template:template_resample'], 'space-template_desc-brain_mask:transform_T1mask_to_T1template'], 'Sources': ['space-T1w_desc-brain_mask', 'from-T1w_to-template_mode-image_xfm', 'T1w-template'], 'Template': 'MNI152NLin2009cAsym - T1w-based whole-head template - /code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'Resolution': '1mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-brain_mask_60",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_probseg_67",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-CSF_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_probseg_67",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_probseg_67",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_probseg_67",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_probseg_68",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-GM_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_probseg_68",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_probseg_68",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_probseg_68",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_probseg_69",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-WM_probseg",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_probseg_69",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_probseg_69",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_probseg_69",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_mask_70",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-CSF_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_mask_70",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_mask_70",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_mask_70",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_mask_71",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-GM_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_mask_71",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_mask_71",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_mask_71",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_mask_72",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-WM_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_mask_72",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_mask_72",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_mask_72",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_desc-preproc_mask_73",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-CSF_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_desc-preproc_mask_73",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_desc-preproc_mask_73",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_desc-preproc_mask_73",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-GM_desc-preproc_mask_74",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-GM_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-GM_desc-preproc_mask_74",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-GM_desc-preproc_mask_74",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-GM_desc-preproc_mask_74",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-WM_desc-preproc_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], 'Sources': ['desc-brain_T1w', 'space-T1w_desc-brain_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'CSF-path', 'GM-path', 'WM-path'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_desc-preproc_mask_75",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-preproc_bold_185",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-preproc_bold_185",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-preproc_bold_185",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], ['bold:func_ingress'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], ['pe-direction:func_metadata_ingress'], 'desc-preproc_bold:apply_phasediff_to_timeseries_separately_single_step_resampling_from_stc'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], ['bold:func_ingress'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], 'desc-preproc_bold:apply_blip_to_timeseries_separately_single_step_resampling_from_stc'], 'CpacVariant': {'bold': ['apply_phasediff_to_timeseries_separately_single_step_resampling_from_stc', 'apply_blip_to_timeseries_separately_single_step_resampling_from_stc']}, 'SkullStripped': True, 'Sources': ['sbref', 'desc-preproc_bold', 'desc-stc_bold', 'bold', 'from-bold_to-template_mode-image_xfm'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-preproc_bold_185",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-movementParameters_motion_90",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-movementParameters_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-movementParameters_motion_90",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-movementParameters_motion_90",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], 'Sources': ['desc-preproc_bold', 'motion-basefile'], 'Description': \"Each line contains for one timepoint a 6-DOF rigid transform parameters in the format defined by AFNI's 3dvolreg: [roll, pitch, yaw, superior displacement, left displacement, posterior displacement]. Rotation parameters are in degrees counterclockwise, and translation parameters are in millimeters.\", 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-movementParameters_motion_90",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-mean_bold_97",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-mean_bold",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-mean_bold_97",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-mean_bold_97",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time', 'desc-mean_bold:func_mean'], 'Sources': ['desc-preproc_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-mean_bold_97",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-bold_desc-brain_mask_107",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-bold_desc-brain_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-bold_desc-brain_mask_107",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-bold_desc-brain_mask_107",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'Sources': ['motion-basefile', 'desc-preproc_bold', 'FSL-AFNI-bold-ref', 'FSL-AFNI-brain-mask', 'FSL-AFNI-brain-probseg'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-bold_desc-brain_mask_107",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_motion_127",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_motion_127",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_motion_127",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_motion_127",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-summary_motion_128",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-summary_motion",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-summary_motion_128",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-summary_motion_128",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'desc-summary_motion:calc_motion_stats'], 'Sources': ['desc-preproc_bold', 'space-bold_desc-brain_mask', 'desc-movementParameters_motion', 'max-displacement', 'rels-displacement', 'filtered-coordinate-transformation', 'coordinate-transformation', 'subject', 'scan'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-summary_motion_128",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_sbref_129",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "sbref",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_sbref_129",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_sbref_129",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], 'Sources': ['desc-ref_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_sbref_129",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_sbref_137",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-T1w_sbref",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_sbref_137",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_sbref_137",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'space-T1w_sbref:coregistration'], 'Sources': ['sbref', 'desc-motion_bold', 'pe-direction', 'desc-preproc_T1w', 'label-WM_probseg', 'label-WM_pveseg', 'desc-head_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_sbref_137",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-bold_to-T1w_mode-image_desc-linear_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], 'Sources': ['sbref', 'desc-motion_bold', 'pe-direction', 'desc-preproc_T1w', 'label-WM_probseg', 'label-WM_pveseg', 'desc-head_T1w'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-bold_to-template_mode-image_xfm_145",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-bold_to-template_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-bold_to-template_mode-image_xfm_145",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-bold_to-template_mode-image_xfm_145",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], 'Sources': ['sbref', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_xfm', 'from-template_to-T1w_mode-image_xfm', 'desc-brain_T1w', 'T1w-brain-template-funcreg'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-bold_to-template_mode-image_xfm_145",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_from-template_to-bold_mode-image_xfm_146",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "from-template_to-bold_mode-image_xfm",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_from-template_to-bold_mode-image_xfm_146",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "write_composite_inv_xfm",
        "type": "node",
        "inputs": {
          "dimension": "3",
          "input_image_type": "0",
          "input_image": "[Undefined]",
          "output_image": "from-template_to-bold_mode-image_xfm.nii.gz",
          "out_postfix": "_trans",
          "reference_image": "[Undefined]",
          "interpolation": "LanczosWindowedSinc",
          "interpolation_parameters": "[Undefined]",
          "transforms": "[Undefined]",
          "invert_transform_flags": "[True, False]",
          "default_value": "0.0",
          "print_out_composite_warp_file": "True",
          "float": "False",
          "num_threads": "1",
          "args": "[Undefined]",
          "environ": "{'NSLOTS': '1'}"
        },
        "outputs": {
          "output_image": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_from-template_to-bold_mode-image_xfm_146",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-template_to-bold_mode-image_xfm:create_func_to_T1template_xfm'], 'Sources': ['sbref', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_xfm', 'from-template_to-T1w_mode-image_xfm', 'desc-brain_T1w', 'T1w-brain-template-funcreg'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_from-template_to-bold_mode-image_xfm_146",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-T1w_desc-eroded_mask_149",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-T1w_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-T1w_desc-eroded_mask_149",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-T1w_desc-eroded_mask_149",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'space-T1w_desc-eroded_mask:erode_mask_T1w'], 'Sources': ['space-T1w_desc-brain_mask', 'label-CSF_desc-preproc_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-T1w_desc-eroded_mask_149",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-CSF_desc-eroded_mask_152",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-CSF_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-CSF_desc-eroded_mask_152",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-CSF_desc-eroded_mask_152",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-CSF_desc-eroded_mask:erode_mask_CSF'], 'Sources': ['label-CSF_desc-preproc_mask', 'space-T1w_desc-brain_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-CSF_desc-eroded_mask_152",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_label-WM_desc-eroded_mask_155",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "label-WM_desc-eroded_mask",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "anat"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_label-WM_desc-eroded_mask_155",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_label-WM_desc-eroded_mask_155",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-WM_desc-eroded_mask:erode_mask_WM'], 'Sources': ['label-WM_desc-preproc_mask', 'space-T1w_desc-brain_mask'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_label-WM_desc-eroded_mask_155",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_desc-confounds_timeseries_171",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "desc-confounds_timeseries",
          "scan_id": "[Undefined]",
          "template_desc": "[Undefined]",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_desc-confounds_timeseries_171",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_desc-confounds_timeseries_171",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [['TR:func_metadata_ingress'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-jenkinson:calc_motion_stats'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'framewise-displacement-power:calc_motion_stats'], [[[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], 'desc-preproc_bold:bold_masking'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-movementParameters_motion:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'max-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'rels-displacement:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'filtered-coordinate-transformation:motion_estimates_mcflirt'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], ['subject:func_ingress'], ['scan:func_ingress'], 'dvars:calc_motion_stats'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], [['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], 'space-T1w_desc-eroded_mask:erode_mask_T1w'], [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-CSF_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-CSF_desc-eroded_mask:erode_mask_CSF'], [[[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_desc-preproc_mask:tissue_seg_fsl_fast'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'label-WM_desc-eroded_mask:erode_mask_WM'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-GM_desc-preproc_mask:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], 'desc-confounds_timeseries:nuisance_regressors_generation_T1w_Regressor_1'], 'Sources': ['TR', 'space-bold_desc-brain_mask', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'desc-movementParameters_motion', 'framewise-displacement-jenkinson', 'framewise-displacement-power', 'dvars', 'desc-brain_T1w', 'space-T1w_desc-eroded_mask', 'label-CSF_desc-eroded_mask', 'label-WM_desc-eroded_mask', 'label-GM_desc-preproc_mask', 'from-template_to-T1w_mode-image_desc-linear_xfm', 'from-T1w_to-template_mode-image_desc-linear_xfm', 'desc-stc_bold'], 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_desc-confounds_timeseries_171",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-head_bold_198",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-head_bold",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-head_bold_198",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-head_bold_198",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-head_bold:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_bold': ['single_step_resample_stc_timeseries_to_T1template']}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-head_bold_198",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-preproc_bold_200",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-preproc_bold",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-preproc_bold_200",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-preproc_bold_200",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-preproc_bold:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_bold': ['single_step_resample_stc_timeseries_to_T1template']}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-preproc_bold_200",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_desc-bold_mask_201",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_desc-bold_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_desc-bold_mask_201",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_desc-bold_mask_201",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_desc-bold_mask:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_mask': ['single_step_resample_stc_timeseries_to_T1template']}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_desc-bold_mask_201",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_res-derivative_desc-bold_mask_203",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_res-derivative_desc-bold_mask",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_res-derivative_desc-bold_mask_203",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_res-derivative_desc-bold_mask_203",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-stc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'space-bold_desc-brain_mask:bold_mask_fsl_afni'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'coordinate-transformation:motion_estimates_mcflirt'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w:anat_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], ['T1w-brain-template-deriv:template_resample'], 'space-template_res-derivative_desc-bold_mask:single_step_resample_stc_timeseries_to_T1template'], 'Sources': ['sbref', 'desc-stc_bold', 'motion-basefile', 'space-bold_desc-brain_mask', 'coordinate-transformation', 'from-T1w_to-template_mode-image_xfm', 'from-bold_to-T1w_mode-image_desc-linear_xfm', 'from-bold_to-template_mode-image_xfm', 'T1w', 'desc-preproc_T1w', 'T1w-brain-template-funcreg', 'T1w-brain-template-deriv'], 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired functional derivative resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}, 'CpacVariant': {'space-template_res-derivative_mask': ['single_step_resample_stc_timeseries_to_T1template']}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_res-derivative_desc-bold_mask_203",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "id_string_space-template_sbref_207",
        "type": "node",
        "inputs": {
          "function_str": "def create_id_string(cfg, unique_id, resource, scan_id=None,\n                     template_desc=None, atlas_id=None, fwhm=None,\n                     subdir=None):\n    \"\"\"Create the unique key-value identifier string for BIDS-Derivatives\n    compliant file names.\n\n    This is used in the file renaming performed during the Datasink\n    connections.\n\n    Example\n    -------\n    >>> from CPAC.utils.configuration import Configuration\n    >>> create_id_string(Configuration(), 'sub-1_ses-1',\n    ...                  'res-derivative_desc-Mean-1_timeseries',\n    ...                  scan_id='rest', atlas_id='Yeo_desc-7')\n    'sub-1_ses-1_task-rest_atlas-Yeo7_res-3mm_desc-Mean1_timeseries'\n    \"\"\"\n    import re\n    from CPAC.utils.bids_utils import combine_multiple_entity_instances, \\\n                                      res_in_filename\n    if atlas_id:\n        if '_desc-' in atlas_id:\n            atlas, desc = atlas_id.split('_desc-')\n            if not re.match(r'.*[0-9]$', atlas) and re.match(r'[a-z].*', desc):\n                atlas_id = f'{atlas}{desc[0].upper()}{desc[1:]}'\n            else:\n                atlas_id = atlas_id.replace('_desc-', '')\n        resource = f'atlas-{atlas_id}_{resource}'\n\n    part_id = unique_id.split('_')[0]\n    ses_id = unique_id.split('_')[1]\n    if 'sub-' not in part_id:\n        part_id = f'sub-{part_id}'\n    if 'ses-' not in ses_id:\n        ses_id = f'ses-{ses_id}'\n    if scan_id:\n        out_filename = f'{part_id}_{ses_id}_task-{scan_id}_{resource}'\n    else:\n        out_filename = f'{part_id}_{ses_id}_{resource}'\n\n    template_tag = template_desc.split(' -')[0] if template_desc else '*'\n    for prefix in ['space-', 'from-', 'to-']:\n        for bidstag in out_filename.split('_'):\n            if prefix in bidstag and 'template' in bidstag:\n                out_filename = out_filename.replace(\n                    bidstag, f'{prefix}{template_tag}')\n\n    if fwhm:\n        for tag in resource.split('_'):\n            if 'desc-' in tag and '-sm' in tag:\n                newtag = tag.replace('-sm', f'-sm{fwhm}')\n                out_filename = out_filename.replace(tag, newtag)\n                break\n        else:\n            raise Exception('\\n[!] FWHM provided but no desc-sm?\\n')\n\n    # drop space- entities from from native-space filenames\n    if subdir == 'anat':\n        out_filename = out_filename.replace('_space-T1w_', '_')\n    if subdir == 'func':\n        out_filename = out_filename.replace('_space-bold_', '_')\n    return combine_multiple_entity_instances(\n        res_in_filename(cfg, out_filename))\n",
          "cfg": "C-PAC Configuration ('cpac_fmriprep-options')",
          "unique_id": "sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
          "resource": "space-template_sbref",
          "scan_id": "[Undefined]",
          "template_desc": "MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz",
          "atlas_id": "[Undefined]",
          "fwhm": "[Undefined]",
          "subdir": "func"
        },
        "outputs": {
          "out_filename": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "nii_space-template_sbref_207",
        "type": "node",
        "inputs": {
          "in_file": "[Undefined]",
          "keep_ext": "True",
          "format_string": "[Undefined]",
          "parse_string": "[Undefined]",
          "use_fullpath": "False"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "json_space-template_sbref_207",
        "type": "node",
        "inputs": {
          "function_str": "def write_output_json(json_data, filename, indent=3, basedir=None):\n    if not basedir:\n        basedir = os.getcwd()\n    if '.json' not in filename:\n        filename = f'{filename}.json'\n    json_file = os.path.join(basedir, filename)\n    json_data = json.dumps(json_data, indent=indent, sort_keys=True)\n    with open(json_file, 'wt') as f:\n        f.write(json_data)\n    return json_file\n",
          "json_data": "{'CpacProvenance': [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-preproc_bold:motion_correction_only_mcflirt'], ['FSL-AFNI-bold-ref:template_resample'], ['FSL-AFNI-brain-mask:template_resample'], ['FSL-AFNI-brain-probseg:template_resample'], 'desc-ref_bold:bold_mask_fsl_afni', 'sbref:coregistration_prep_fmriprep'], [[['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['TR:func_metadata_ingress'], ['tpattern:func_metadata_ingress'], 'desc-preproc_bold:func_slice_time'], [['bold:func_ingress', 'desc-preproc_bold:func_reorient', 'desc-preproc_bold:func_truncate'], ['bold:func_ingress', 'desc-reorient_bold:func_reorient'], 'motion-basefile:get_motion_ref_fmriprep_reference'], 'desc-motion_bold:motion_correction_only_mcflirt'], ['pe-direction:func_metadata_ingress'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_probseg:tissue_seg_fsl_fast'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_desc-linear_xfm:register_ANTs_anat_to_template'], ['CSF-path:CSF-path_config_ingress'], ['GM-path:GM-path_config_ingress'], ['WM-path:WM-path_config_ingress'], 'label-WM_pveseg:tissue_seg_fsl_fast'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], 'from-bold_to-T1w_mode-image_desc-linear_xfm:coregistration'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-T1w_to-template_mode-image_xfm:register_ANTs_anat_to_template'], [[['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-preproc_T1w:brain_extraction'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-head_T1w:brain_extraction'], ['T1w-template:template_resample'], ['T1w-brain-template:template_resample'], ['T1w-brain-template-mask:template_resample'], 'from-template_to-T1w_mode-image_xfm:register_ANTs_anat_to_template'], [['T1w:anat_ingress', 'desc-head_T1w:anatomical_init'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'desc-preproc_T1w:brain_mask_niworkflows_ants'], ['T1w:anat_ingress', 'desc-preproc_T1w:anatomical_init', 'space-T1w_desc-brain_mask:brain_mask_niworkflows_ants'], 'desc-brain_T1w:brain_extraction'], ['T1w-brain-template-funcreg:template_resample'], 'from-bold_to-template_mode-image_xfm:create_func_to_T1template_xfm'], ['T1w-brain-template-funcreg:template_resample'], 'space-template_sbref:transform_sbref_to_T1template'], 'Sources': ['sbref', 'from-bold_to-template_mode-image_xfm', 'T1w-brain-template-funcreg'], 'Description': 'Single-volume sbref of the BOLD time-series transformed to template space.', 'Template': 'MNI152NLin2009cAsym - T1w-based skull-stripped template resampled to the desired preprocessed-functional resolution - /code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'Resolution': '3.438mmx3.438mmx3.4mm', 'CpacConfigHash': '531d4ec49f53bc5d28868fa9bd1956a9c2761371', 'CpacConfig': {'pipeline_setup': {'pipeline_name': 'cpac_fmriprep-options', 'output_directory': {'quality_control': {'generate_xcpqc_files': False, 'generate_quality_control_images': False}, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output', 'source_outputs_dir': None, 'pull_source_once': True, 'write_func_outputs': False, 'write_debugging_outputs': False, 'output_tree': 'default'}, 'system_config': {'fail_fast': False, 'random_seed': None, 'raise_insufficient': True, 'observed_usage': {'callback_log': None, 'buffer': 10}, 'on_grid': {'run': False, 'resource_manager': 'SGE', 'SGE': {'parallel_environment': 'cpac', 'queue': 'all.q'}}, 'maximum_memory_per_participant': 23.0, 'max_cores_per_participant': 11, 'num_ants_threads': 1, 'num_OMP_threads': 1, 'num_participants_at_once': 1, 'FSLDIR': 'FSLDIR'}, 'working_directory': {'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/working', 'remove_working_dir': True}, 'log_directory': {'run_logging': True, 'path': '/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/log', 'graphviz': {'entire_workflow': {'generate': False, 'graph2use': [], 'format': [], 'simple_form': True}}}, 'crash_log_directory': {'path': '/outputs/crash'}, 'outdir_ingress': {'run': False}, 'Amazon-AWS': {'aws_output_bucket_credentials': None, 's3_encryption': True}, 'Debugging': {'verbose': False}}, 'surface_analysis': {'abcd_prefreesurfer_prep': {'run': False}, 'freesurfer': {'run_reconall': False, 'reconall_args': None, 'ingress_reconall': False}, 'post_freesurfer': {'run': False, 'subcortical_gray_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt', 'freesurfer_labels': '/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt', 'surf_atlas_dir': '/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases', 'gray_ordinates_dir': '/opt/dcan-tools/pipeline/global/templates/Greyordinates', 'gray_ordinates_res': 2, 'high_res_mesh': 164, 'low_res_mesh': 32, 'fmri_res': 2, 'smooth_fwhm': 2}}, 'anatomical_preproc': {'run': True, 'acpc_alignment': {'T1w_brain_ACPC_template': None, 'FOV_crop': 'robustfov', 'align_brain_mask': False, 'T2w_ACPC_template': None, 'T2w_brain_ACPC_template': None, 'run': False, 'run_before_preproc': True, 'brain_size': 150, 'acpc_target': 'whole-head', 'T1w_ACPC_template': None}, 'brain_extraction': {'run': True, 'FreeSurfer-BET': {'T1w_brain_template_mask_ccs': None}, 'using': ['niworkflows-ants'], 'AFNI-3dSkullStrip': {'mask_vol': False, 'shrink_factor': 0.6, 'var_shrink_fac': True, 'shrink_factor_bot_lim': 0.4, 'avoid_vent': True, 'n_iterations': 250, 'pushout': True, 'touchup': True, 'fill_hole': 10, 'NN_smooth': 72, 'smooth_final': 20, 'avoid_eyes': True, 'use_edge': True, 'exp_frac': 0.1, 'push_to_edge': False, 'use_skull': False, 'perc_int': 0, 'max_inter_iter': 4, 'fac': 1, 'blur_fwhm': 0, 'monkey': False}, 'FSL-BET': {'frac': 0.5, 'mask_boolean': False, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'UNet': {'unet_model': 's3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model'}, 'niworkflows-ants': {'template_path': '/ants_template/oasis/T_template0.nii.gz', 'mask_path': '/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz', 'regmask_path': '/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz'}}, 'run_t2': False, 't1t2_bias_field_correction': {'run': False, 'BiasFieldSmoothingSigma': 5}, 'non_local_means_filtering': {'run': [False], 'noise_model': 'Gaussian'}, 'n4_bias_field_correction': {'run': [False], 'shrink_factor': 2}}, 'segmentation': {'run': True, 'tissue_segmentation': {'using': ['FSL-FAST'], 'FSL-FAST': {'thresholding': {'use': 'Custom', 'Custom': {'CSF_threshold_value': 0.95, 'WM_threshold_value': 0.95, 'GM_threshold_value': 0.95}}, 'use_priors': {'run': False, 'priors_path': None, 'WM_path': '$priors_path/avg152T1_white_bin.nii.gz', 'GM_path': '$priors_path/avg152T1_gray_bin.nii.gz', 'CSF_path': '$priors_path/avg152T1_csf_bin.nii.gz'}}, 'Template_Based': {'template_for_segmentation': [], 'WHITE': None, 'GRAY': None, 'CSF': None}, 'ANTs_Prior_Based': {'template_brain_list': None, 'template_segmentation_list': None, 'GM_label': [], 'WM_label': [], 'CSF_label': []}, 'FreeSurfer': {'erode': None, 'CSF_label': [], 'GM_label': [], 'WM_label': []}}}, 'registration_workflows': {'anatomical_registration': {'run': True, 'registration': {'FSL-FNIRT': {'ref_resolution': '2mm', 'FNIRT_T1w_brain_template': None, 'FNIRT_T1w_template': None, 'ref_mask_res-2': None, 'T1w_template_res-2': None, 'fnirt_config': 'T1_2_MNI152_2mm', 'ref_mask': None, 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}, 'using': ['ANTS'], 'ANTs': {'use_lesion_mask': False, 'T1_registration': [{'collapse-output-transforms': 1}, {'dimensionality': 3}, {'initial-moving-transform': {'initializationFeature': 0}}, {'transforms': [{'Rigid': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.05, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '2.0x1.0vox', 'use-histogram-matching': True}}, {'Affine': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 20, 'iteration': '100x100'}, 'gradientStep': 0.08, 'metric': {'metricWeight': 1, 'numberOfBins': 32, 'samplingPercentage': 0.25, 'samplingStrategy': 'Regular', 'type': 'MI'}, 'shrink-factors': '2x1', 'smoothing-sigmas': '1.0x0.0vox', 'use-histogram-matching': True}}, {'SyN': {'convergence': {'convergenceThreshold': '1e-06', 'convergenceWindowSize': 10, 'iteration': '100x70x50x20'}, 'gradientStep': 0.1, 'metric': {'metricWeight': 1, 'radius': 4, 'type': 'CC'}, 'shrink-factors': '8x4x2x1', 'smoothing-sigmas': '3.0x2.0x1.0x0.0vox', 'totalFieldVarianceInVoxelSpace': 0.0, 'updateFieldVarianceInVoxelSpace': 3.0, 'use-histogram-matching': True, 'winsorize-image-intensities': {'lowerQuantile': 0.005, 'upperQuantile': 0.995}}}]}], 'interpolation': 'LanczosWindowedSinc'}}, 'overwrite_transform': {'run': False, 'using': 'FSL'}, 'resolution_for_anat': '1mm', 'T1w_brain_template': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz', 'T1w_template': '/code/CPAC/resources/templates/mni_icbm152_t1_tal_nlin_asym_09c.nii', 'T1w_brain_template_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'reg_with_skull': False}, 'functional_registration': {'coregistration': {'run': True, 'func_input_prep': {'reg_with_skull': False, 'input': ['fmriprep_reference'], 'Mean Functional': {'n4_correct_func': False}, 'Selected Functional Volume': {'func_reg_input_volume': 0}}, 'boundary_based_registration': {'run': [True], 'reference': 'brain', 'bbr_wm_map': 'partial_volume_map', 'bbr_wm_mask_args': '-bin', 'bbr_schedule': '/usr/share/fsl/6.0/etc/flirtsch/bbr.sch'}, 'reference': 'brain', 'using': 'FSL', 'input': 'brain', 'interpolation': 'trilinear', 'cost': 'corratio', 'dof': 6, 'arguments': None}, 'func_registration_to_template': {'run': True, 'run_EPI': False, 'apply_transform': {'using': 'single_step_resampling_from_stc'}, 'output_resolution': {'func_preproc_outputs': '3.438mmx3.438mmx3.4mm', 'func_derivative_outputs': '3.438mmx3.438mmx3.4mm'}, 'target_template': {'using': ['T1_template'], 'T1_template': {'T1w_brain_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_template_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_T1w_reference.nii.gz', 'T1w_brain_template_mask_funcreg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_mask.nii.gz', 'T1w_template_for_resample': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_desc-brain_T1w.nii.gz'}, 'EPI_template': {'EPI_template_funcreg': None, 'EPI_template_mask_funcreg': None, 'EPI_template_for_resample': None}}, 'ANTs_pipelines': {'interpolation': 'LanczosWindowedSinc'}, 'FNIRT_pipelines': {'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}, 'EPI_registration': {'run': False, 'using': ['ANTS'], 'EPI_template': 's3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz', 'EPI_template_mask': None, 'ANTs': {'parameters': None, 'interpolation': 'LanczosWindowedSinc'}, 'FSL-FNIRT': {'fnirt_config': 'T1_2_MNI152_2mm', 'interpolation': 'sinc', 'identity_matrix': '/usr/share/fsl/6.0/etc/flirtsch/ident.mat'}}}}, 'functional_preproc': {'run': True, 'update_header': {'run': True}, 'slice_timing_correction': {'run': [True], 'tpattern': None, 'tzero': None}, 'motion_estimates_and_correction': {'run': True, 'motion_estimates': {'calculate_motion_first': True, 'calculate_motion_after': True}, 'motion_correction': {'using': ['mcflirt'], 'AFNI-3dvolreg': {'functional_volreg_twopass': True}, 'motion_correction_reference': ['fmriprep_reference'], 'motion_correction_reference_volume': 0}, 'motion_estimate_filter': {'run': [False], 'filters': []}}, 'distortion_correction': {'run': [True], 'Blip-FSL-TOPUP': {'warpres': 10, 'subsamp': 1, 'fwhm': 8, 'miter': 5, 'lambda': 1, 'ssqlambda': 1, 'regmod': 'bending_energy', 'estmov': 1, 'minmet': 0, 'splineorder': 3, 'numprec': 'double', 'interp': 'spline', 'scale': 0, 'regrid': 1}, 'using': ['PhaseDiff', 'Blip'], 'PhaseDiff': {'fmap_skullstrip_option': 'BET', 'fmap_skullstrip_BET_frac': 0.5, 'fmap_skullstrip_AFNI_threshold': 0.6}}, 'func_masking': {'run': True, 'FSL-BET': {'functional_mean_thr': {'run': False, 'threshold_value': 98}, 'functional_mean_bias_correction': False, 'functional_mean_boolean': False, 'frac': 0.3, 'mesh_boolean': False, 'outline': False, 'padding': False, 'radius': 0, 'reduce_bias': False, 'remove_eyes': False, 'robust': False, 'skull': False, 'surfaces': False, 'threshold': False, 'vertical_gradient': 0.0}, 'FSL_AFNI': {'bold_ref': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-fMRIPrep_boldref.nii.gz', 'brain_mask': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-02_desc-brain_mask.nii.gz', 'brain_probseg': '/code/CPAC/resources/templates/tpl-MNI152NLin2009cAsym_res-01_label-brain_probseg.nii.gz'}, 'apply_func_mask_in_native_space': True, 'using': ['FSL_AFNI'], 'Anatomical_Refined': {'anatomical_mask_dilation': False}}, 'generate_func_mean': {'run': True}, 'normalize_func': {'run': False}, 'truncation': {'start_tr': 0, 'stop_tr': None}, 'scaling': {'run': False, 'scaling_factor': 10}, 'despiking': {'run': [False], 'space': 'native'}, 'coreg_prep': {'run': True}}, 'nuisance_corrections': {'2-nuisance_regression': {'run': [False], 'Regressors': [{'Name': 'Regressor_1', 'Bandpass': {'bottom_frequency': 0.01, 'top_frequency': 0.1}, 'CerebrospinalFluid': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'GlobalSignal': {'summary': 'Mean'}, 'Motion': {'include_delayed': True, 'include_delayed_squared': True, 'include_squared': True}, 'PolyOrt': {'degree': 2}, 'WhiteMatter': {'erode_mask': False, 'extraction_resolution': 2, 'summary': 'Mean'}, 'aCompCor': {'extraction_resolution': 2, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'tissues': ['WhiteMatter', 'CerebrospinalFluid']}, 'tCompCor': {'degree': 2, 'erode_mask_mm': True, 'summary': {'components': 5, 'filter': 'cosine', 'method': 'PC'}, 'threshold': '5PCT'}}], 'regressor_masks': {'erode_anatomical_brain_mask': {'brain_mask_erosion_mm': 30, 'run': True, 'brain_mask_erosion_prop': None, 'brain_erosion_mm': None}, 'erode_csf': {'csf_mask_erosion_mm': 30, 'run': True, 'csf_erosion_prop': None, 'csf_erosion_mm': None}, 'erode_wm': {'wm_erosion_prop': 0.6, 'run': True, 'wm_mask_erosion_mm': None, 'wm_erosion_mm': None}, 'erode_gm': {'gm_erosion_prop': 0.6, 'run': False, 'gm_mask_erosion_mm': None, 'gm_erosion_mm': None}}, 'space': 'template', 'ingress_regressors': {'run': False, 'Regressors': {'Name': 'default', 'Columns': ['global_signal']}}, 'create_regressors': True, 'lateral_ventricles_mask': None, 'bandpass_filtering_order': 'After'}, '1-ICA-AROMA': {'run': [False], 'denoising_type': 'nonaggr'}}, 'timeseries_extraction': {'run': False, 'connectivity_matrix': {'using': ['Nilearn', 'ndmg'], 'measure': ['Pearson', 'Partial']}, 'tse_roi_paths': {'/cpac_templates/CC400.nii.gz': 'Avg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg', '/cpac_templates/CC200.nii.gz': 'Avg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg', '/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'SpatialReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg', '/cpac_templates/rois_3mm.nii.gz': 'Avg', '/ndmg_atlases/label/Human/AAL_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/CAPRSC_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DKT_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/DesikanKlein_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordcort-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/HarvardOxfordsub-maxprob-thr25_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Juelich_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/MICCAI_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-1000Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-200Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-300Parcels17NetworksOrder.nii.gz': 'Avg', '/cpac_templates/Schaefer2018_space-FSLMNI152_res-2mm_desc-400Parcels17NetworksOrder.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Talairach_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Brodmann_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Desikan_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Glasser_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Slab907_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-17_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7-liberal_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg', '/ndmg_atlases/label/Human/Yeo-7_space-MNI152NLin6_res-1x1x1.nii.gz': 'Avg'}, 'realignment': 'ROI_to_func'}, 'amplitude_low_frequency_fluctuation': {'run': False, 'target_space': ['Native'], 'highpass_cutoff': [0.01], 'lowpass_cutoff': [0.1]}, 'regional_homogeneity': {'run': False, 'target_space': ['Native'], 'cluster_size': 27}, 'voxel_mirrored_homotopic_connectivity': {'run': False, 'symmetric_registration': {'T1w_brain_template_symmetric': None, 'T1w_brain_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz', 'T1w_brain_template_symmetric_for_resample': None, 'T1w_template_symmetric': None, 'T1w_template_symmetric_funcreg': '/usr/share/fsl/6.0/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz', 'T1w_template_symmetric_for_resample': None, 'dilated_symmetric_brain_mask': None, 'dilated_symmetric_brain_mask_for_resample': None}}, 'network_centrality': {'run': False, 'memory_allocation': 3.0, 'template_specification_file': None, 'degree_centrality': {'weight_options': [], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'eigenvector_centrality': {'weight_options': ['Binarized', 'Weighted'], 'correlation_threshold_option': 'Sparsity threshold', 'correlation_threshold': 0.001}, 'local_functional_connectivity_density': {'weight_options': [], 'correlation_threshold_option': 'Significance threshold', 'correlation_threshold': 0.001}}, 'longitudinal_template_generation': {'run': False, 'average_method': 'median', 'dof': 12, 'interp': 'trilinear', 'cost': 'corratio', 'thread_pool': 2, 'convergence_threshold': -1}, 'post_processing': {'spatial_smoothing': {'run': True, 'output': ['smoothed'], 'smoothing_method': ['FSL'], 'fwhm': [4]}, 'z-scoring': {'run': True, 'output': ['z-scored']}}, 'seed_based_correlation_analysis': {'run': False, 'sca_roi_paths': {'/cpac_templates/PNAS_Smith09_rsn10.nii.gz': 'DualReg', '/cpac_templates/CC400.nii.gz': 'Avg, MultReg', '/cpac_templates/ez_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/aal_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/CC200.nii.gz': 'Avg, MultReg', '/cpac_templates/tt_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/ho_mask_pad.nii.gz': 'Avg, MultReg', '/cpac_templates/rois_3mm.nii.gz': 'Avg, MultReg'}, 'norm_timeseries_for_DR': True}, 'PyPEER': {'run': False, 'eye_scan_names': [], 'data_scan_names': [], 'eye_mask_path': None, 'stimulus_path': None, 'minimal_nuisance_correction': {'peer_gsr': True, 'peer_scrub': False, 'scrub_thresh': 0.2}}}}",
          "filename": "[Undefined]"
        },
        "outputs": {
          "json_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      },
      {
        "name": "sinker_space-template_sbref_207",
        "type": "node",
        "inputs": {
          "base_directory": "/ocean/projects/med220004p/rupprech/ecpac_runs/all_test/fmriprep-options/sub-NDARINV2VY7YYNW/output/output",
          "container": "pipeline_cpac_fmriprep-options/sub-NDARINV2VY7YYNW/ses-baselineYear1Arm1",
          "parameterization": "False",
          "strip_dir": "[Undefined]",
          "substitutions": "[Undefined]",
          "regexp_substitutions": "[Undefined]",
          "_outputs": "{}",
          "remove_dest_dir": "False",
          "creds_path": "[Undefined]",
          "encrypt_bucket_keys": "True",
          "bucket": "[Undefined]",
          "local_copy": "[Undefined]"
        },
        "outputs": {
          "out_file": "[Undefined]"
        },
        "result": null,
        "nodes": [],
        "edges": []
      }
    ],
    "edges": [
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "func_deoblique_2"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-preproc_bold_185"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-movementParameters_motion_90"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-mean_bold_97"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_motion_127"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-summary_motion_128"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_sbref_129"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-T1w_sbref_137"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_desc-confounds_timeseries_171"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-head_bold_198"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_desc-bold_mask_201"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "func_ingress_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "id_string_space-template_sbref_207"
      },
      {
        "origin": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "func_slice_timing_correction_92"
      },
      {
        "origin": "bold_scan_params_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "anat_T1w_gather_sub-NDARINV2VY7YYNW_ses-baselineYear1Arm1",
        "target": "anat_deoblique_0"
      },
      {
        "origin": "anat_deoblique_0",
        "target": "anat_reorient_0"
      },
      {
        "origin": "anat_reorient_0",
        "target": "anat_skullstrip_ants"
      },
      {
        "origin": "anat_reorient_0",
        "target": "brain_extraction_34"
      },
      {
        "origin": "anat_reorient_0",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "anat_reorient_0",
        "target": "warp_wholehead_T1w_to_T1template_53"
      },
      {
        "origin": "anat_reorient_0",
        "target": "nii_desc-head_T1w_39"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "brain_extraction_34"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "warp_T1mask_to_T1template_57"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "CSF_61"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "GM_61"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "WM_61"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_T1w_mask_147"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_CSF_mask_150"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "erode_WM_mask_153"
      },
      {
        "origin": "anat_skullstrip_ants",
        "target": "nii_space-T1w_desc-brain_mask_32"
      },
      {
        "origin": "brain_extraction_34",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "brain_extraction_34",
        "target": "segment_61"
      },
      {
        "origin": "brain_extraction_34",
        "target": "CSF_61"
      },
      {
        "origin": "brain_extraction_34",
        "target": "GM_61"
      },
      {
        "origin": "brain_extraction_34",
        "target": "WM_61"
      },
      {
        "origin": "brain_extraction_34",
        "target": "func_to_anat_FLIRT_130"
      },
      {
        "origin": "brain_extraction_34",
        "target": "func_to_anat_bbreg_130"
      },
      {
        "origin": "brain_extraction_34",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "brain_extraction_34",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "brain_extraction_34",
        "target": "convert_bbr2itk_186"
      },
      {
        "origin": "brain_extraction_34",
        "target": "nii_desc-preproc_T1w_37"
      },
      {
        "origin": "resampled_T1w-brain-template",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "warp_wholehead_T1w_to_T1template_53"
      },
      {
        "origin": "resampled_T1w-template",
        "target": "warp_T1mask_to_T1template_57"
      },
      {
        "origin": "resampled_T1w-brain-template-mask",
        "target": "ANTS_T1_to_template_40"
      },
      {
        "origin": "warp_wholehead_T1w_to_T1template_53",
        "target": "nii_space-template_desc-head_T1w_56"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_wholehead_T1w_to_T1template_53"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_T1mask_to_T1template_57"
      },
      {
        "origin": "write_composite_xfm",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_func_to_standard_186_"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_func_mask_to_standard_186"
      },
      {
        "origin": "write_composite_xfm",
        "target": "collectxfm_deriv_mask_to_standard_186"
      },
      {
        "origin": "write_composite_xfm",
        "target": "nii_from-T1w_to-template_mode-image_xfm_47"
      },
      {
        "origin": "warp_T1mask_to_T1template_57",
        "target": "nii_space-template_desc-brain_mask_60"
      },
      {
        "origin": "segment_61",
        "target": "get_pve_csf_61"
      },
      {
        "origin": "segment_61",
        "target": "get_pve_gm_61"
      },
      {
        "origin": "segment_61",
        "target": "get_pve_wm_61"
      },
      {
        "origin": "segment_61",
        "target": "CSF_61"
      },
      {
        "origin": "segment_61",
        "target": "GM_61"
      },
      {
        "origin": "segment_61",
        "target": "WM_61"
      },
      {
        "origin": "segment_61",
        "target": "get_csf_61"
      },
      {
        "origin": "segment_61",
        "target": "nii_label-GM_probseg_68"
      },
      {
        "origin": "segment_61",
        "target": "nii_label-WM_probseg_69"
      },
      {
        "origin": "segment_61",
        "target": "nii_label-CSF_mask_70"
      },
      {
        "origin": "segment_61",
        "target": "nii_label-GM_mask_71"
      },
      {
        "origin": "segment_61",
        "target": "nii_label-WM_mask_72"
      },
      {
        "origin": "get_pve_wm_61",
        "target": "func_to_anat_bbreg_130"
      },
      {
        "origin": "CSF_61",
        "target": "erode_T1w_mask_147"
      },
      {
        "origin": "CSF_61",
        "target": "erode_CSF_mask_150"
      },
      {
        "origin": "CSF_61",
        "target": "nii_label-CSF_desc-preproc_mask_73"
      },
      {
        "origin": "GM_61",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "GM_61",
        "target": "nii_label-GM_desc-preproc_mask_74"
      },
      {
        "origin": "WM_61",
        "target": "erode_WM_mask_153"
      },
      {
        "origin": "WM_61",
        "target": "nii_label-WM_desc-preproc_mask_75"
      },
      {
        "origin": "get_csf_61",
        "target": "nii_label-CSF_probseg_67"
      },
      {
        "origin": "func_deoblique_2",
        "target": "func_reorient_2"
      },
      {
        "origin": "func_reorient_2",
        "target": "edit_func_79"
      },
      {
        "origin": "func_reorient_2",
        "target": "func_get_fmriprep_ref_82"
      },
      {
        "origin": "edit_func_79",
        "target": "func_motion_correct_mcflirt_85"
      },
      {
        "origin": "edit_func_79",
        "target": "func_slice_timing_correction_92"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "func_motion_correct_mcflirt_85"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "func_motion_correct_mcflirt_98"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "init_aff_102"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "map_brainmask_102"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "norm_102"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "set_direction_102"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "n4_correct_102"
      },
      {
        "origin": "func_get_fmriprep_ref_82",
        "target": "convert_motionxfm2itk_186_"
      },
      {
        "origin": "func_motion_correct_mcflirt_85",
        "target": "norm_motion_params_85"
      },
      {
        "origin": "func_motion_correct_mcflirt_85",
        "target": "get_mcflirt_rms_abs_85"
      },
      {
        "origin": "func_motion_correct_mcflirt_85",
        "target": "gen_motion_stats_113"
      },
      {
        "origin": "func_motion_correct_mcflirt_85",
        "target": "convert_motionxfm2itk_186_"
      },
      {
        "origin": "norm_motion_params_85",
        "target": "gen_motion_stats_113"
      },
      {
        "origin": "norm_motion_params_85",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "norm_motion_params_85",
        "target": "nii_desc-movementParameters_motion_90"
      },
      {
        "origin": "get_mcflirt_rms_abs_85",
        "target": "gen_motion_stats_113"
      },
      {
        "origin": "func_slice_timing_correction_92",
        "target": "func_mean_95"
      },
      {
        "origin": "func_slice_timing_correction_92",
        "target": "func_motion_correct_mcflirt_98"
      },
      {
        "origin": "func_slice_timing_correction_92",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "func_slice_timing_correction_92",
        "target": "split_func_186"
      },
      {
        "origin": "func_mean_95",
        "target": "nii_desc-mean_bold_97"
      },
      {
        "origin": "func_motion_correct_mcflirt_98",
        "target": "norm_motion_params_98"
      },
      {
        "origin": "func_motion_correct_mcflirt_98",
        "target": "get_mcflirt_rms_abs_98"
      },
      {
        "origin": "func_motion_correct_mcflirt_98",
        "target": "func_extract_brain_109"
      },
      {
        "origin": "resampled_FSL-AFNI-bold-ref",
        "target": "init_aff_102"
      },
      {
        "origin": "resampled_FSL-AFNI-bold-ref",
        "target": "norm_102"
      },
      {
        "origin": "init_aff_102",
        "target": "norm_102"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-mask",
        "target": "init_aff_102"
      },
      {
        "origin": "norm_102",
        "target": "map_brainmask_102"
      },
      {
        "origin": "resampled_FSL-AFNI-brain-probseg",
        "target": "map_brainmask_102"
      },
      {
        "origin": "map_brainmask_102",
        "target": "binarize_mask_102"
      },
      {
        "origin": "binarize_mask_102",
        "target": "pre_mask_dilate_102"
      },
      {
        "origin": "pre_mask_dilate_102",
        "target": "print_header_102"
      },
      {
        "origin": "print_header_102",
        "target": "set_direction_102"
      },
      {
        "origin": "set_direction_102",
        "target": "n4_correct_102"
      },
      {
        "origin": "n4_correct_102",
        "target": "skullstrip_first_pass_102"
      },
      {
        "origin": "skullstrip_first_pass_102",
        "target": "skullstrip_first_dilate_102"
      },
      {
        "origin": "skullstrip_first_pass_102",
        "target": "skullstrip_first_mask_102"
      },
      {
        "origin": "skullstrip_first_pass_102",
        "target": "combine_masks_102"
      },
      {
        "origin": "skullstrip_first_dilate_102",
        "target": "skullstrip_first_mask_102"
      },
      {
        "origin": "skullstrip_first_mask_102",
        "target": "unifize_102"
      },
      {
        "origin": "unifize_102",
        "target": "skullstrip_second_pass_102"
      },
      {
        "origin": "unifize_102",
        "target": "extract_ref_brain_bold_102"
      },
      {
        "origin": "skullstrip_second_pass_102",
        "target": "combine_masks_102"
      },
      {
        "origin": "combine_masks_102",
        "target": "extract_ref_brain_bold_102"
      },
      {
        "origin": "combine_masks_102",
        "target": "func_extract_brain_109"
      },
      {
        "origin": "combine_masks_102",
        "target": "gen_motion_stats_113"
      },
      {
        "origin": "combine_masks_102",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "combine_masks_102",
        "target": "applyxfm_func_mask_to_standard_186"
      },
      {
        "origin": "combine_masks_102",
        "target": "applyxfm_deriv_mask_to_standard_186"
      },
      {
        "origin": "combine_masks_102",
        "target": "nii_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "func_to_anat_FLIRT_130"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "func_to_anat_bbreg_130"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "convert_bbr2itk_186"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "warp_funcreg-sbref_to_T1wtemplate_204"
      },
      {
        "origin": "extract_ref_brain_bold_102",
        "target": "nii_sbref_129"
      },
      {
        "origin": "func_extract_brain_109",
        "target": "gen_motion_stats_113"
      },
      {
        "origin": "func_extract_brain_109",
        "target": "nii_desc-preproc_bold_185"
      },
      {
        "origin": "gen_motion_stats_113",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "gen_motion_stats_113",
        "target": "nii_motion_127"
      },
      {
        "origin": "gen_motion_stats_113",
        "target": "nii_desc-summary_motion_128"
      },
      {
        "origin": "func_to_anat_FLIRT_130",
        "target": "func_to_anat_bbreg_130"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "anat_to_func_linear_xfm_Regressor_1_156"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "convert_bbr2itk_186"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "nii_space-T1w_sbref_137"
      },
      {
        "origin": "func_to_anat_bbreg_130",
        "target": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "applyxfm_func_to_standard_186_"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "applyxfm_func_mask_to_standard_186"
      },
      {
        "origin": "resampled_T1w-brain-template-funcreg",
        "target": "warp_funcreg-sbref_to_T1wtemplate_204"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "create_func_to_T1wtemplate_xfm_139"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "nii_from-template_to-T1w_mode-image_xfm_48"
      },
      {
        "origin": "erode_T1w_mask_147",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "erode_T1w_mask_147",
        "target": "nii_space-T1w_desc-eroded_mask_149"
      },
      {
        "origin": "erode_CSF_mask_150",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "erode_CSF_mask_150",
        "target": "nii_label-CSF_desc-eroded_mask_152"
      },
      {
        "origin": "erode_WM_mask_153",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "erode_WM_mask_153",
        "target": "nii_label-WM_desc-eroded_mask_155"
      },
      {
        "origin": "nuisance_regressors_Regressor_1_156",
        "target": "nii_desc-confounds_timeseries_171"
      },
      {
        "origin": "anat_to_func_linear_xfm_Regressor_1_156",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "write_composite_invlinear_xfm",
        "target": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nuisance_regressors_Regressor_1_156"
      },
      {
        "origin": "write_composite_linear_xfm",
        "target": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49"
      },
      {
        "origin": "convert_bbr2itk_186",
        "target": "collectxfm_func_to_standard_186_"
      },
      {
        "origin": "convert_bbr2itk_186",
        "target": "collectxfm_func_mask_to_standard_186"
      },
      {
        "origin": "convert_bbr2itk_186",
        "target": "collectxfm_deriv_mask_to_standard_186"
      },
      {
        "origin": "split_func_186",
        "target": "applyxfm_func_to_standard_186_"
      },
      {
        "origin": "split_func_186",
        "target": "applyxfm_derivfunc_to_standard_186_"
      },
      {
        "origin": "convert_motionxfm2itk_186_",
        "target": "collectxfm_func_to_standard_186_"
      },
      {
        "origin": "collectxfm_func_to_standard_186_",
        "target": "applyxfm_func_to_standard_186_"
      },
      {
        "origin": "collectxfm_func_to_standard_186_",
        "target": "applyxfm_derivfunc_to_standard_186_"
      },
      {
        "origin": "applyxfm_func_to_standard_186_",
        "target": "merge_func_to_standard_186"
      },
      {
        "origin": "applyxfm_derivfunc_to_standard_186_",
        "target": "merge_derivfunc_to_standard_186"
      },
      {
        "origin": "resampled_T1w-brain-template-deriv",
        "target": "applyxfm_derivfunc_to_standard_186_"
      },
      {
        "origin": "resampled_T1w-brain-template-deriv",
        "target": "applyxfm_deriv_mask_to_standard_186"
      },
      {
        "origin": "merge_func_to_standard_186",
        "target": "get_func_brain_to_standard_186"
      },
      {
        "origin": "merge_func_to_standard_186",
        "target": "nii_space-template_desc-head_bold_198"
      },
      {
        "origin": "applyxfm_func_mask_to_standard_186",
        "target": "get_func_brain_to_standard_186"
      },
      {
        "origin": "applyxfm_func_mask_to_standard_186",
        "target": "nii_space-template_desc-bold_mask_201"
      },
      {
        "origin": "collectxfm_func_mask_to_standard_186",
        "target": "applyxfm_func_mask_to_standard_186"
      },
      {
        "origin": "applyxfm_deriv_mask_to_standard_186",
        "target": "nii_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "collectxfm_deriv_mask_to_standard_186",
        "target": "applyxfm_deriv_mask_to_standard_186"
      },
      {
        "origin": "get_func_brain_to_standard_186",
        "target": "nii_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "warp_funcreg-sbref_to_T1wtemplate_204",
        "target": "nii_space-template_sbref_207"
      },
      {
        "origin": "write_composite_xfm",
        "target": "warp_funcreg-sbref_to_T1wtemplate_204"
      },
      {
        "origin": "write_composite_xfm",
        "target": "nii_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "id_string_desc-preproc_T1w_37",
        "target": "nii_desc-preproc_T1w_37"
      },
      {
        "origin": "id_string_desc-preproc_T1w_37",
        "target": "json_desc-preproc_T1w_37"
      },
      {
        "origin": "nii_desc-preproc_T1w_37",
        "target": "sinker_desc-preproc_T1w_37"
      },
      {
        "origin": "json_desc-preproc_T1w_37",
        "target": "sinker_desc-preproc_T1w_37"
      },
      {
        "origin": "id_string_desc-head_T1w_39",
        "target": "nii_desc-head_T1w_39"
      },
      {
        "origin": "id_string_desc-head_T1w_39",
        "target": "json_desc-head_T1w_39"
      },
      {
        "origin": "nii_desc-head_T1w_39",
        "target": "sinker_desc-head_T1w_39"
      },
      {
        "origin": "json_desc-head_T1w_39",
        "target": "sinker_desc-head_T1w_39"
      },
      {
        "origin": "id_string_space-T1w_desc-brain_mask_32",
        "target": "nii_space-T1w_desc-brain_mask_32"
      },
      {
        "origin": "id_string_space-T1w_desc-brain_mask_32",
        "target": "json_space-T1w_desc-brain_mask_32"
      },
      {
        "origin": "nii_space-T1w_desc-brain_mask_32",
        "target": "sinker_space-T1w_desc-brain_mask_32"
      },
      {
        "origin": "json_space-T1w_desc-brain_mask_32",
        "target": "sinker_space-T1w_desc-brain_mask_32"
      },
      {
        "origin": "id_string_space-template_desc-preproc_T1w_46",
        "target": "nii_space-template_desc-preproc_T1w_46"
      },
      {
        "origin": "id_string_space-template_desc-preproc_T1w_46",
        "target": "json_space-template_desc-preproc_T1w_46"
      },
      {
        "origin": "nii_space-template_desc-preproc_T1w_46",
        "target": "sinker_space-template_desc-preproc_T1w_46"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_space-template_desc-preproc_T1w_46"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51"
      },
      {
        "origin": "anat_mni_ants_register",
        "target": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52"
      },
      {
        "origin": "json_space-template_desc-preproc_T1w_46",
        "target": "sinker_space-template_desc-preproc_T1w_46"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_xfm_47",
        "target": "nii_from-T1w_to-template_mode-image_xfm_47"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_xfm_47",
        "target": "json_from-T1w_to-template_mode-image_xfm_47"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_xfm_47",
        "target": "sinker_from-T1w_to-template_mode-image_xfm_47"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_xfm_47",
        "target": "sinker_from-T1w_to-template_mode-image_xfm_47"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_xfm_48",
        "target": "nii_from-template_to-T1w_mode-image_xfm_48"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_xfm_48",
        "target": "json_from-template_to-T1w_mode-image_xfm_48"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_xfm_48",
        "target": "sinker_from-template_to-T1w_mode-image_xfm_48"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_xfm_48",
        "target": "sinker_from-template_to-T1w_mode-image_xfm_48"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "target": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "target": "json_from-T1w_to-template_mode-image_desc-linear_xfm_49"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "target": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_49"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_desc-linear_xfm_49",
        "target": "sinker_from-T1w_to-template_mode-image_desc-linear_xfm_49"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "target": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "target": "json_from-template_to-T1w_mode-image_desc-linear_xfm_50"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "target": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_50"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_desc-linear_xfm_50",
        "target": "sinker_from-template_to-T1w_mode-image_desc-linear_xfm_50"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "target": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51"
      },
      {
        "origin": "id_string_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "target": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51"
      },
      {
        "origin": "nii_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "target": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51"
      },
      {
        "origin": "json_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51",
        "target": "sinker_from-T1w_to-template_mode-image_desc-nonlinear_xfm_51"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "target": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52"
      },
      {
        "origin": "id_string_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "target": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52"
      },
      {
        "origin": "nii_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "target": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52"
      },
      {
        "origin": "json_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52",
        "target": "sinker_from-template_to-T1w_mode-image_desc-nonlinear_xfm_52"
      },
      {
        "origin": "id_string_space-template_desc-head_T1w_56",
        "target": "nii_space-template_desc-head_T1w_56"
      },
      {
        "origin": "id_string_space-template_desc-head_T1w_56",
        "target": "json_space-template_desc-head_T1w_56"
      },
      {
        "origin": "nii_space-template_desc-head_T1w_56",
        "target": "sinker_space-template_desc-head_T1w_56"
      },
      {
        "origin": "json_space-template_desc-head_T1w_56",
        "target": "sinker_space-template_desc-head_T1w_56"
      },
      {
        "origin": "id_string_space-template_desc-brain_mask_60",
        "target": "nii_space-template_desc-brain_mask_60"
      },
      {
        "origin": "id_string_space-template_desc-brain_mask_60",
        "target": "json_space-template_desc-brain_mask_60"
      },
      {
        "origin": "nii_space-template_desc-brain_mask_60",
        "target": "sinker_space-template_desc-brain_mask_60"
      },
      {
        "origin": "json_space-template_desc-brain_mask_60",
        "target": "sinker_space-template_desc-brain_mask_60"
      },
      {
        "origin": "id_string_label-CSF_probseg_67",
        "target": "nii_label-CSF_probseg_67"
      },
      {
        "origin": "id_string_label-CSF_probseg_67",
        "target": "json_label-CSF_probseg_67"
      },
      {
        "origin": "nii_label-CSF_probseg_67",
        "target": "sinker_label-CSF_probseg_67"
      },
      {
        "origin": "json_label-CSF_probseg_67",
        "target": "sinker_label-CSF_probseg_67"
      },
      {
        "origin": "id_string_label-GM_probseg_68",
        "target": "nii_label-GM_probseg_68"
      },
      {
        "origin": "id_string_label-GM_probseg_68",
        "target": "json_label-GM_probseg_68"
      },
      {
        "origin": "nii_label-GM_probseg_68",
        "target": "sinker_label-GM_probseg_68"
      },
      {
        "origin": "json_label-GM_probseg_68",
        "target": "sinker_label-GM_probseg_68"
      },
      {
        "origin": "id_string_label-WM_probseg_69",
        "target": "nii_label-WM_probseg_69"
      },
      {
        "origin": "id_string_label-WM_probseg_69",
        "target": "json_label-WM_probseg_69"
      },
      {
        "origin": "nii_label-WM_probseg_69",
        "target": "sinker_label-WM_probseg_69"
      },
      {
        "origin": "json_label-WM_probseg_69",
        "target": "sinker_label-WM_probseg_69"
      },
      {
        "origin": "id_string_label-CSF_mask_70",
        "target": "nii_label-CSF_mask_70"
      },
      {
        "origin": "id_string_label-CSF_mask_70",
        "target": "json_label-CSF_mask_70"
      },
      {
        "origin": "nii_label-CSF_mask_70",
        "target": "sinker_label-CSF_mask_70"
      },
      {
        "origin": "json_label-CSF_mask_70",
        "target": "sinker_label-CSF_mask_70"
      },
      {
        "origin": "id_string_label-GM_mask_71",
        "target": "nii_label-GM_mask_71"
      },
      {
        "origin": "id_string_label-GM_mask_71",
        "target": "json_label-GM_mask_71"
      },
      {
        "origin": "nii_label-GM_mask_71",
        "target": "sinker_label-GM_mask_71"
      },
      {
        "origin": "json_label-GM_mask_71",
        "target": "sinker_label-GM_mask_71"
      },
      {
        "origin": "id_string_label-WM_mask_72",
        "target": "nii_label-WM_mask_72"
      },
      {
        "origin": "id_string_label-WM_mask_72",
        "target": "json_label-WM_mask_72"
      },
      {
        "origin": "nii_label-WM_mask_72",
        "target": "sinker_label-WM_mask_72"
      },
      {
        "origin": "json_label-WM_mask_72",
        "target": "sinker_label-WM_mask_72"
      },
      {
        "origin": "id_string_label-CSF_desc-preproc_mask_73",
        "target": "nii_label-CSF_desc-preproc_mask_73"
      },
      {
        "origin": "id_string_label-CSF_desc-preproc_mask_73",
        "target": "json_label-CSF_desc-preproc_mask_73"
      },
      {
        "origin": "nii_label-CSF_desc-preproc_mask_73",
        "target": "sinker_label-CSF_desc-preproc_mask_73"
      },
      {
        "origin": "json_label-CSF_desc-preproc_mask_73",
        "target": "sinker_label-CSF_desc-preproc_mask_73"
      },
      {
        "origin": "id_string_label-GM_desc-preproc_mask_74",
        "target": "nii_label-GM_desc-preproc_mask_74"
      },
      {
        "origin": "id_string_label-GM_desc-preproc_mask_74",
        "target": "json_label-GM_desc-preproc_mask_74"
      },
      {
        "origin": "nii_label-GM_desc-preproc_mask_74",
        "target": "sinker_label-GM_desc-preproc_mask_74"
      },
      {
        "origin": "json_label-GM_desc-preproc_mask_74",
        "target": "sinker_label-GM_desc-preproc_mask_74"
      },
      {
        "origin": "id_string_label-WM_desc-preproc_mask_75",
        "target": "nii_label-WM_desc-preproc_mask_75"
      },
      {
        "origin": "id_string_label-WM_desc-preproc_mask_75",
        "target": "json_label-WM_desc-preproc_mask_75"
      },
      {
        "origin": "nii_label-WM_desc-preproc_mask_75",
        "target": "sinker_label-WM_desc-preproc_mask_75"
      },
      {
        "origin": "json_label-WM_desc-preproc_mask_75",
        "target": "sinker_label-WM_desc-preproc_mask_75"
      },
      {
        "origin": "id_string_desc-preproc_bold_185",
        "target": "nii_desc-preproc_bold_185"
      },
      {
        "origin": "id_string_desc-preproc_bold_185",
        "target": "json_desc-preproc_bold_185"
      },
      {
        "origin": "nii_desc-preproc_bold_185",
        "target": "sinker_desc-preproc_bold_185"
      },
      {
        "origin": "json_desc-preproc_bold_185",
        "target": "sinker_desc-preproc_bold_185"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_90",
        "target": "nii_desc-movementParameters_motion_90"
      },
      {
        "origin": "id_string_desc-movementParameters_motion_90",
        "target": "json_desc-movementParameters_motion_90"
      },
      {
        "origin": "nii_desc-movementParameters_motion_90",
        "target": "sinker_desc-movementParameters_motion_90"
      },
      {
        "origin": "json_desc-movementParameters_motion_90",
        "target": "sinker_desc-movementParameters_motion_90"
      },
      {
        "origin": "id_string_desc-mean_bold_97",
        "target": "nii_desc-mean_bold_97"
      },
      {
        "origin": "id_string_desc-mean_bold_97",
        "target": "json_desc-mean_bold_97"
      },
      {
        "origin": "nii_desc-mean_bold_97",
        "target": "sinker_desc-mean_bold_97"
      },
      {
        "origin": "json_desc-mean_bold_97",
        "target": "sinker_desc-mean_bold_97"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_107",
        "target": "nii_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "id_string_space-bold_desc-brain_mask_107",
        "target": "json_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "nii_space-bold_desc-brain_mask_107",
        "target": "sinker_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "json_space-bold_desc-brain_mask_107",
        "target": "sinker_space-bold_desc-brain_mask_107"
      },
      {
        "origin": "id_string_motion_127",
        "target": "nii_motion_127"
      },
      {
        "origin": "id_string_motion_127",
        "target": "json_motion_127"
      },
      {
        "origin": "nii_motion_127",
        "target": "sinker_motion_127"
      },
      {
        "origin": "json_motion_127",
        "target": "sinker_motion_127"
      },
      {
        "origin": "id_string_desc-summary_motion_128",
        "target": "nii_desc-summary_motion_128"
      },
      {
        "origin": "id_string_desc-summary_motion_128",
        "target": "json_desc-summary_motion_128"
      },
      {
        "origin": "nii_desc-summary_motion_128",
        "target": "sinker_desc-summary_motion_128"
      },
      {
        "origin": "json_desc-summary_motion_128",
        "target": "sinker_desc-summary_motion_128"
      },
      {
        "origin": "id_string_sbref_129",
        "target": "nii_sbref_129"
      },
      {
        "origin": "id_string_sbref_129",
        "target": "json_sbref_129"
      },
      {
        "origin": "nii_sbref_129",
        "target": "sinker_sbref_129"
      },
      {
        "origin": "json_sbref_129",
        "target": "sinker_sbref_129"
      },
      {
        "origin": "id_string_space-T1w_sbref_137",
        "target": "nii_space-T1w_sbref_137"
      },
      {
        "origin": "id_string_space-T1w_sbref_137",
        "target": "json_space-T1w_sbref_137"
      },
      {
        "origin": "nii_space-T1w_sbref_137",
        "target": "sinker_space-T1w_sbref_137"
      },
      {
        "origin": "json_space-T1w_sbref_137",
        "target": "sinker_space-T1w_sbref_137"
      },
      {
        "origin": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "target": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "id_string_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "target": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "nii_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "target": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "json_from-bold_to-T1w_mode-image_desc-linear_xfm_138",
        "target": "sinker_from-bold_to-T1w_mode-image_desc-linear_xfm_138"
      },
      {
        "origin": "id_string_from-bold_to-template_mode-image_xfm_145",
        "target": "nii_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "id_string_from-bold_to-template_mode-image_xfm_145",
        "target": "json_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "nii_from-bold_to-template_mode-image_xfm_145",
        "target": "sinker_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "json_from-bold_to-template_mode-image_xfm_145",
        "target": "sinker_from-bold_to-template_mode-image_xfm_145"
      },
      {
        "origin": "id_string_from-template_to-bold_mode-image_xfm_146",
        "target": "nii_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "id_string_from-template_to-bold_mode-image_xfm_146",
        "target": "json_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "nii_from-template_to-bold_mode-image_xfm_146",
        "target": "sinker_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "write_composite_inv_xfm",
        "target": "nii_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "json_from-template_to-bold_mode-image_xfm_146",
        "target": "sinker_from-template_to-bold_mode-image_xfm_146"
      },
      {
        "origin": "id_string_space-T1w_desc-eroded_mask_149",
        "target": "nii_space-T1w_desc-eroded_mask_149"
      },
      {
        "origin": "id_string_space-T1w_desc-eroded_mask_149",
        "target": "json_space-T1w_desc-eroded_mask_149"
      },
      {
        "origin": "nii_space-T1w_desc-eroded_mask_149",
        "target": "sinker_space-T1w_desc-eroded_mask_149"
      },
      {
        "origin": "json_space-T1w_desc-eroded_mask_149",
        "target": "sinker_space-T1w_desc-eroded_mask_149"
      },
      {
        "origin": "id_string_label-CSF_desc-eroded_mask_152",
        "target": "nii_label-CSF_desc-eroded_mask_152"
      },
      {
        "origin": "id_string_label-CSF_desc-eroded_mask_152",
        "target": "json_label-CSF_desc-eroded_mask_152"
      },
      {
        "origin": "nii_label-CSF_desc-eroded_mask_152",
        "target": "sinker_label-CSF_desc-eroded_mask_152"
      },
      {
        "origin": "json_label-CSF_desc-eroded_mask_152",
        "target": "sinker_label-CSF_desc-eroded_mask_152"
      },
      {
        "origin": "id_string_label-WM_desc-eroded_mask_155",
        "target": "nii_label-WM_desc-eroded_mask_155"
      },
      {
        "origin": "id_string_label-WM_desc-eroded_mask_155",
        "target": "json_label-WM_desc-eroded_mask_155"
      },
      {
        "origin": "nii_label-WM_desc-eroded_mask_155",
        "target": "sinker_label-WM_desc-eroded_mask_155"
      },
      {
        "origin": "json_label-WM_desc-eroded_mask_155",
        "target": "sinker_label-WM_desc-eroded_mask_155"
      },
      {
        "origin": "id_string_desc-confounds_timeseries_171",
        "target": "nii_desc-confounds_timeseries_171"
      },
      {
        "origin": "id_string_desc-confounds_timeseries_171",
        "target": "json_desc-confounds_timeseries_171"
      },
      {
        "origin": "nii_desc-confounds_timeseries_171",
        "target": "sinker_desc-confounds_timeseries_171"
      },
      {
        "origin": "json_desc-confounds_timeseries_171",
        "target": "sinker_desc-confounds_timeseries_171"
      },
      {
        "origin": "id_string_space-template_desc-head_bold_198",
        "target": "nii_space-template_desc-head_bold_198"
      },
      {
        "origin": "id_string_space-template_desc-head_bold_198",
        "target": "json_space-template_desc-head_bold_198"
      },
      {
        "origin": "nii_space-template_desc-head_bold_198",
        "target": "sinker_space-template_desc-head_bold_198"
      },
      {
        "origin": "json_space-template_desc-head_bold_198",
        "target": "sinker_space-template_desc-head_bold_198"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_200",
        "target": "nii_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "id_string_space-template_desc-preproc_bold_200",
        "target": "json_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "nii_space-template_desc-preproc_bold_200",
        "target": "sinker_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "json_space-template_desc-preproc_bold_200",
        "target": "sinker_space-template_desc-preproc_bold_200"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_201",
        "target": "nii_space-template_desc-bold_mask_201"
      },
      {
        "origin": "id_string_space-template_desc-bold_mask_201",
        "target": "json_space-template_desc-bold_mask_201"
      },
      {
        "origin": "nii_space-template_desc-bold_mask_201",
        "target": "sinker_space-template_desc-bold_mask_201"
      },
      {
        "origin": "json_space-template_desc-bold_mask_201",
        "target": "sinker_space-template_desc-bold_mask_201"
      },
      {
        "origin": "id_string_space-template_res-derivative_desc-bold_mask_203",
        "target": "nii_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "id_string_space-template_res-derivative_desc-bold_mask_203",
        "target": "json_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "nii_space-template_res-derivative_desc-bold_mask_203",
        "target": "sinker_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "json_space-template_res-derivative_desc-bold_mask_203",
        "target": "sinker_space-template_res-derivative_desc-bold_mask_203"
      },
      {
        "origin": "id_string_space-template_sbref_207",
        "target": "nii_space-template_sbref_207"
      },
      {
        "origin": "id_string_space-template_sbref_207",
        "target": "json_space-template_sbref_207"
      },
      {
        "origin": "nii_space-template_sbref_207",
        "target": "sinker_space-template_sbref_207"
      },
      {
        "origin": "json_space-template_sbref_207",
        "target": "sinker_space-template_sbref_207"
      }
    ]
  }
}